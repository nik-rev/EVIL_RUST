error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: trait must be `unsafe`
  --> tests/ui/inherent_to_string.rs:5:1
   |
LL | / trait FalsePositive {
LL | |     fn to_string(&self) -> String;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:5:1
   |
LL | trait FalsePositive {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:6:5
   |
LL |     fn to_string(&self) -> String;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:6:5
   |
LL |     fn to_string(&self) -> String;
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:6:19
   |
LL |     fn to_string(&self) -> String;
   |                   ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:6:18
   |
LL |     fn to_string(&self) -> String;
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:9:1
   |
LL | struct A;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:10:1
   |
LL | struct B;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:11:1
   |
LL | struct C;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:12:1
   |
LL | struct D;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:13:1
   |
LL | struct E;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:14:1
   |
LL | struct F;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:15:1
   |
LL | struct G;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:16:1
   |
LL | struct H;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:17:1
   |
LL | struct I;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:18:1
   |
LL | struct J;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:20:1
   |
LL | impl A {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:22:5
   |
LL |     fn to_string(&self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:22:5
   |
LL |     fn to_string(&self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:22:19
   |
LL |     fn to_string(&self) -> String {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:22:18
   |
LL |     fn to_string(&self) -> String {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:29:5
   |
LL |     fn to_str(&self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:29:5
   |
LL |     fn to_str(&self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:29:16
   |
LL |     fn to_str(&self) -> String {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:29:15
   |
LL |     fn to_str(&self) -> String {
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:35:1
   |
LL | fn to_string() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:35:1
   |
LL | fn to_string() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:35:1
   |
LL | fn to_string() -> String {
   | ^

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:39:1
   |
LL | impl B {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:41:5
   |
LL |     fn to_string(&self) -> i32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:41:5
   |
LL |     fn to_string(&self) -> i32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:41:19
   |
LL |     fn to_string(&self) -> i32 {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:41:18
   |
LL |     fn to_string(&self) -> i32 {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:46:1
   |
LL | impl C {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:48:5
   |
LL |     fn to_string(&self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:48:5
   |
LL |     fn to_string(&self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:48:19
   |
LL |     fn to_string(&self) -> String {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:48:18
   |
LL |     fn to_string(&self) -> String {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:55:1
   |
LL | impl fmt::Display for C {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:56:5
   |
LL |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:56:5
   |
LL |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:56:13
   |
LL |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:56:19
   |
LL |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:56:12
   |
LL |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:56:22
   |
LL |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   |                      ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:61:1
   |
LL | impl FalsePositive for D {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:63:5
   |
LL |     fn to_string(&self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:63:5
   |
LL |     fn to_string(&self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:63:19
   |
LL |     fn to_string(&self) -> String {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:63:18
   |
LL |     fn to_string(&self) -> String {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:68:1
   |
LL | impl E {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:70:5
   |
LL |     fn to_string() -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:70:5
   |
LL |     fn to_string() -> String {
   |     ^

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:75:1
   |
LL | impl F {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:77:5
   |
LL |     fn to_string(&self, _i: i32) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:77:5
   |
LL |     fn to_string(&self, _i: i32) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:77:19
   |
LL |     fn to_string(&self, _i: i32) -> String {
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:77:25
   |
LL |     fn to_string(&self, _i: i32) -> String {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:77:18
   |
LL |     fn to_string(&self, _i: i32) -> String {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:82:1
   |
LL | impl G {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:84:5
   |
LL |     fn to_string<const _N: usize>(&self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:84:5
   |
LL |     fn to_string<const _N: usize>(&self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:84:36
   |
LL |     fn to_string<const _N: usize>(&self) -> String {
   |                                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:84:35
   |
LL |     fn to_string<const _N: usize>(&self) -> String {
   |                                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:91:1
   |
LL | impl H {
   | ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:92:26
   |
LL |     unsafe fn to_string(&self) -> String {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:92:25
   |
LL |     unsafe fn to_string(&self) -> String {
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:97:1
   |
LL | impl I {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:98:5
   |
LL |     extern "C" fn to_string(&self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:98:5
   |
LL |     extern "C" fn to_string(&self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:98:30
   |
LL |     extern "C" fn to_string(&self) -> String {
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:98:29
   |
LL |     extern "C" fn to_string(&self) -> String {
   |                             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:103:1
   |
LL | impl J {
   | ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/inherent_to_string.rs:104:37
   |
LL |     unsafe extern "C" fn to_string(&self) -> String {
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/inherent_to_string.rs:104:36
   |
LL |     unsafe extern "C" fn to_string(&self) -> String {
   |                                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/inherent_to_string.rs:109:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/inherent_to_string.rs:109:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/inherent_to_string.rs:109:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/inherent_to_string.rs:110:9
   |
LL |     let a = A;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/inherent_to_string.rs:116:9
   |
LL |     let b = B;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/inherent_to_string.rs:119:9
   |
LL |     let c = C;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/inherent_to_string.rs:122:9
   |
LL |     let d = D;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/inherent_to_string.rs:127:9
   |
LL |     let f = F;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/inherent_to_string.rs:130:9
   |
LL |     let g = G;
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 75 previous errors

