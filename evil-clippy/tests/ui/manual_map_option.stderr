error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:13:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_map_option.rs:13:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_map_option.rs:13:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:46:16
   |
LL |     match Some(&String::new()) {
   |                ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:57:11
   |
LL |     match &Some([0, 1]) {
   |           ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:63:11
   |
LL |     match &Some(0) {
   |           ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/manual_map_option.rs:71:14
   |
LL |         Some(ref x) => Some(x.is_empty()),
   |              ^^^^^

error: references are not allowed
  --> tests/ui/manual_map_option.rs:75:11
   |
LL |     match &&Some(String::new()) {
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:75:12
   |
LL |     match &&Some(String::new()) {
   |            ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:81:11
   |
LL |     match &&Some(0) {
   |           ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:81:12
   |
LL |     match &&Some(0) {
   |            ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:88:11
   |
LL |     match &mut Some(String::new()) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:95:15
   |
LL |         match &mut Some(String::new()) {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:102:11
   |
LL |     match &mut Some(String::new()) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/manual_map_option.rs:104:19
   |
LL |         &mut Some(ref x) => Some(x.len()),
   |                   ^^^^^

error: references are not allowed
  --> tests/ui/manual_map_option.rs:108:11
   |
LL |     match &mut &Some(String::new()) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:108:16
   |
LL |     match &mut &Some(String::new()) {
   |                ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:126:11
   |
LL |     match &Some((String::new(), "test")) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/manual_map_option.rs:133:15
   |
LL |         Some((ref x, y)) => Some((y, x)),
   |               ^^^^^

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:148:5
   |
LL |     fn f1() -> Result<(), ()> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_map_option.rs:148:5
   |
LL |     fn f1() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_map_option.rs:148:5
   |
LL |     fn f1() -> Result<(), ()> {
   |     ^

error: variable must be `mut`
  --> tests/ui/manual_map_option.rs:164:9
   |
LL |     let x1 = (Some(String::new()), 0);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/manual_map_option.rs:165:9
   |
LL |     let x2 = x1.0;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:171:5
   |
LL |     struct S1 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:175:5
   |
LL |     impl S1 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_map_option.rs:176:9
   |
LL |         fn f(self) -> Option<(String, u32)> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_map_option.rs:176:9
   |
LL |         fn f(self) -> Option<(String, u32)> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_map_option.rs:176:14
   |
LL |         fn f(self) -> Option<(String, u32)> {
   |              ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_map_option.rs:191:9
   |
LL |     let x: Option<Vec<&[u8]>> = match Some(()) {
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:191:23
   |
LL |     let x: Option<Vec<&[u8]>> = match Some(()) {
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:196:11
   |
LL |     match option_env!("") {
   |           ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:203:5
   |
LL |     async fn f2(x: u32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_map_option.rs:203:11
   |
LL |     async fn f2(x: u32) -> u32 {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_map_option.rs:203:11
   |
LL |     async fn f2(x: u32) -> u32 {
   |           ^

error: parameter must be `mut`
  --> tests/ui/manual_map_option.rs:203:17
   |
LL |     async fn f2(x: u32) -> u32 {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:207:5
   |
LL |     async fn f3() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_map_option.rs:207:11
   |
LL |     async fn f3() {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_map_option.rs:207:11
   |
LL |     async fn f3() {
   |           ^

error: item must be `pub`
  --> tests/ui/manual_map_option.rs:234:5
   |
LL |     const fn f4() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_map_option.rs:234:11
   |
LL |     const fn f4() {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_map_option.rs:234:11
   |
LL |     const fn f4() {
   |           ^

error: variable must be `mut`
  --> tests/ui/manual_map_option.rs:242:9
   |
LL |     let s = &String::new();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:242:13
   |
LL |     let s = &String::new();
   |             ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_map_option.rs:244:19
   |
LL |     let _: Option<&str> = match Some(s) {
   |                   ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 43 previous errors

