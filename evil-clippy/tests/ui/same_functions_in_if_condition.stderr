error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:10:1
   |
LL | fn function() -> bool {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:10:1
   |
LL | fn function() -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:10:1
   |
LL | fn function() -> bool {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:14:1
   |
LL | fn fn_arg(_arg: u8) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:14:1
   |
LL | fn fn_arg(_arg: u8) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:14:1
   |
LL | fn fn_arg(_arg: u8) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:14:11
   |
LL | fn fn_arg(_arg: u8) -> bool {
   |           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:18:1
   |
LL | struct Struct;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:20:1
   |
LL | impl Struct {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:21:5
   |
LL |     fn method(&self) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:21:5
   |
LL |     fn method(&self) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:21:16
   |
LL |     fn method(&self) -> bool {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/same_functions_in_if_condition.rs:21:15
   |
LL |     fn method(&self) -> bool {
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:24:5
   |
LL |     fn method_arg(&self, _arg: u8) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:24:5
   |
LL |     fn method_arg(&self, _arg: u8) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:24:20
   |
LL |     fn method_arg(&self, _arg: u8) -> bool {
   |                    ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:24:26
   |
LL |     fn method_arg(&self, _arg: u8) -> bool {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/same_functions_in_if_condition.rs:24:19
   |
LL |     fn method_arg(&self, _arg: u8) -> bool {
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:29:1
   |
LL | fn ifs_same_cond_fn() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:29:1
   |
LL | fn ifs_same_cond_fn() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:29:1
   |
LL | fn ifs_same_cond_fn() {
   | ^

error: variable must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:30:9
   |
LL |     let a = 0;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:31:9
   |
LL |     let obj = Struct;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:85:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:85:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:85:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:87:9
   |
LL |     let os = if cfg!(target_os = "macos") {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:97:5
   |
LL |     enum E {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:96:11
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |           ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:96:11
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |           ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^

error: references are not allowed
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: variable must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^

error: variable must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:96:14
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:96:25
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                         ^

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:96:22
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                      ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:96:22
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                      ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/same_functions_in_if_condition.rs:96:25
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/same_functions_in_if_condition.rs:96:25
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                         ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:96:29
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                             ^

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:96:29
   |
LL |     #[derive(PartialEq, Eq, ConstParamTy)]
   |                             ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/same_functions_in_if_condition.rs:101:5
   |
LL |     fn generic<const P: E>() -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:101:5
   |
LL |     fn generic<const P: E>() -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/same_functions_in_if_condition.rs:101:5
   |
LL |     fn generic<const P: E>() -> bool {
   |     ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: this `if` has the same function call as a previous `if`
  --> tests/ui/same_functions_in_if_condition.rs:34:15
   |
LL |     } else if function() {
   |               ^^^^^^^^^^
   |
note: same as this
  --> tests/ui/same_functions_in_if_condition.rs:33:8
   |
LL |     if function() {
   |        ^^^^^^^^^^
note: the lint level is defined here
  --> tests/ui/same_functions_in_if_condition.rs:2:9
   |
LL | #![deny(clippy::same_functions_in_if_condition)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this `if` has the same function call as a previous `if`
  --> tests/ui/same_functions_in_if_condition.rs:39:15
   |
LL |     } else if fn_arg(a) {
   |               ^^^^^^^^^
   |
note: same as this
  --> tests/ui/same_functions_in_if_condition.rs:38:8
   |
LL |     if fn_arg(a) {
   |        ^^^^^^^^^

error: this `if` has the same function call as a previous `if`
  --> tests/ui/same_functions_in_if_condition.rs:44:15
   |
LL |     } else if obj.method() {
   |               ^^^^^^^^^^^^
   |
note: same as this
  --> tests/ui/same_functions_in_if_condition.rs:43:8
   |
LL |     if obj.method() {
   |        ^^^^^^^^^^^^

error: this `if` has the same function call as a previous `if`
  --> tests/ui/same_functions_in_if_condition.rs:49:15
   |
LL |     } else if obj.method_arg(a) {
   |               ^^^^^^^^^^^^^^^^^
   |
note: same as this
  --> tests/ui/same_functions_in_if_condition.rs:48:8
   |
LL |     if obj.method_arg(a) {
   |        ^^^^^^^^^^^^^^^^^

error: this `if` has the same function call as a previous `if`
  --> tests/ui/same_functions_in_if_condition.rs:55:15
   |
LL |     } else if v.pop().is_none() {
   |               ^^^^^^^^^^^^^^^^^
   |
note: same as this
  --> tests/ui/same_functions_in_if_condition.rs:54:8
   |
LL |     if v.pop().is_none() {
   |        ^^^^^^^^^^^^^^^^^

error: this `if` has the same function call as a previous `if`
  --> tests/ui/same_functions_in_if_condition.rs:60:15
   |
LL |     } else if v.len() == 42 {
   |               ^^^^^^^^^^^^^
   |
note: same as this
  --> tests/ui/same_functions_in_if_condition.rs:59:8
   |
LL |     if v.len() == 42 {
   |        ^^^^^^^^^^^^^

error: aborting due to 49 previous errors

