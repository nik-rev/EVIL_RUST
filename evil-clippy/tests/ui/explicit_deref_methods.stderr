error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:16:1
   |
LL | fn concat(deref_str: &str) -> String {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:16:1
   |
LL | fn concat(deref_str: &str) -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:16:1
   |
LL | fn concat(deref_str: &str) -> String {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:16:11
   |
LL | fn concat(deref_str: &str) -> String {
   |           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:16:22
   |
LL | fn concat(deref_str: &str) -> String {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:20:1
   |
LL | fn just_return(deref_str: &str) -> &str {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:20:1
   |
LL | fn just_return(deref_str: &str) -> &str {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:20:1
   |
LL | fn just_return(deref_str: &str) -> &str {
   | ^

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:20:16
   |
LL | fn just_return(deref_str: &str) -> &str {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:20:27
   |
LL | fn just_return(deref_str: &str) -> &str {
   |                           ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:20:36
   |
LL | fn just_return(deref_str: &str) -> &str {
   |                                    ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:24:1
   |
LL | struct CustomVec(Vec<u8>);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:25:1
   |
LL | impl Deref for CustomVec {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:28:5
   |
LL |     fn deref(&self) -> &Vec<u8> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:28:5
   |
LL |     fn deref(&self) -> &Vec<u8> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:28:15
   |
LL |     fn deref(&self) -> &Vec<u8> {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:28:14
   |
LL |     fn deref(&self) -> &Vec<u8> {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:28:24
   |
LL |     fn deref(&self) -> &Vec<u8> {
   |                        ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:29:9
   |
LL |         &self.0
   |         ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:33:1
   |
LL | struct Aaa;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:35:1
   |
LL | impl Deref for Aaa {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:38:5
   |
LL |     fn deref(&self) -> &Self::Target {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:38:5
   |
LL |     fn deref(&self) -> &Self::Target {
   |     ^

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:38:15
   |
LL |     fn deref(&self) -> &Self::Target {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:38:14
   |
LL |     fn deref(&self) -> &Self::Target {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:38:24
   |
LL |     fn deref(&self) -> &Self::Target {
   |                        ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:43:1
   |
LL | impl DerefMut for Aaa {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:44:5
   |
LL |     fn deref_mut(&mut self) -> &mut Self::Target {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:44:5
   |
LL |     fn deref_mut(&mut self) -> &mut Self::Target {
   |     ^

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:44:23
   |
LL |     fn deref_mut(&mut self) -> &mut Self::Target {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:44:18
   |
LL |     fn deref_mut(&mut self) -> &mut Self::Target {
   |                  ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:44:32
   |
LL |     fn deref_mut(&mut self) -> &mut Self::Target {
   |                                ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:49:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:49:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:49:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:50:9
   |
LL |     let a: &mut String = &mut String::from("foo");
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:50:12
   |
LL |     let a: &mut String = &mut String::from("foo");
   |            ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:50:26
   |
LL |     let a: &mut String = &mut String::from("foo");
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:54:9
   |
LL |     let b: &str = a.deref();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:54:12
   |
LL |     let b: &str = a.deref();
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:57:9
   |
LL |     let b: &mut str = a.deref_mut();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:57:12
   |
LL |     let b: &mut str = a.deref_mut();
   |            ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:61:9
   |
LL |     let b: String = format!("{}, {}", a.deref(), a.deref());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:74:9
   |
LL |     let b: String = concat(a.deref());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:77:9
   |
LL |     let b = just_return(a).deref();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:80:9
   |
LL |     let b: String = concat(just_return(a).deref());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:83:9
   |
LL |     let b: &str = a.deref().deref();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:83:12
   |
LL |     let b: &str = a.deref().deref();
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:86:9
   |
LL |     let opt_a = Some(a.clone());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:87:9
   |
LL |     let b = opt_a.unwrap().deref();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:93:16
   |
LL |     Aaa::deref(&Aaa);
   |                ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:94:20
   |
LL |     Aaa::deref_mut(&mut Aaa);
   |                    ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:95:27
   |
LL |     <Aaa as Deref>::deref(&Aaa);
   |                           ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:96:34
   |
LL |     <Aaa as DerefMut>::deref_mut(&mut Aaa);
   |                                  ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:98:16
   |
LL |     Aaa::deref(&aaa);
   |                ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:99:20
   |
LL |     Aaa::deref_mut(&mut aaa);
   |                    ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:103:9
   |
LL |     let cv = CustomVec(vec![0, 42]);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:104:9
   |
LL |     let c = cv.deref()[0];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:106:9
   |
LL |     let b: &str = &*a.deref();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:106:12
   |
LL |     let b: &str = &*a.deref();
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:106:19
   |
LL |     let b: &str = &*a.deref();
   |                   ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:108:9
   |
LL |     let b: String = a.deref().clone();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:110:9
   |
LL |     let b: usize = a.deref_mut().len();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:112:9
   |
LL |     let b: &usize = &a.deref().len();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:112:12
   |
LL |     let b: &usize = &a.deref().len();
   |            ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:112:21
   |
LL |     let b: &usize = &a.deref().len();
   |                     ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:114:9
   |
LL |     let b: &str = &*a;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:114:12
   |
LL |     let b: &str = &*a;
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:114:19
   |
LL |     let b: &str = &*a;
   |                   ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:116:9
   |
LL |     let b: &mut str = &mut *a;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:116:12
   |
LL |     let b: &mut str = &mut *a;
   |            ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:116:23
   |
LL |     let b: &mut str = &mut *a;
   |                       ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:118:5
   |
LL |     macro_rules! expr_deref {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:123:9
   |
LL |     let b: &str = expr_deref!(a);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:123:12
   |
LL |     let b: &str = expr_deref!(a);
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:125:9
   |
LL |     let b: &str = expr_deref!(a.deref());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:125:12
   |
LL |     let b: &str = expr_deref!(a.deref());
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:130:5
   |
LL |     struct NoLint(u32);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:129:14
   |
LL |     #[derive(Copy, Clone)]
   |              ^

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:129:20
   |
LL |     #[derive(Copy, Clone)]
   |                    ^

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:129:17
   |
LL |     #[derive(Copy, Clone)]
   |                 ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:129:17
   |
LL |     #[derive(Copy, Clone)]
   |                 ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:129:20
   |
LL |     #[derive(Copy, Clone)]
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_deref_methods.rs:129:20
   |
LL |     #[derive(Copy, Clone)]
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/explicit_deref_methods.rs:131:5
   |
LL |     impl NoLint {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:132:13
   |
LL |         pub fn deref(self) -> u32 {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:132:13
   |
LL |         pub fn deref(self) -> u32 {
   |             ^

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:132:22
   |
LL |         pub fn deref(self) -> u32 {
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/explicit_deref_methods.rs:135:13
   |
LL |         pub fn deref_mut(self) -> u32 {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_deref_methods.rs:135:13
   |
LL |         pub fn deref_mut(self) -> u32 {
   |             ^

error: parameter must be `mut`
  --> tests/ui/explicit_deref_methods.rs:135:26
   |
LL |         pub fn deref_mut(self) -> u32 {
   |                          ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:139:9
   |
LL |     let no_lint = NoLint(42);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:140:9
   |
LL |     let b = no_lint.deref();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_deref_methods.rs:141:9
   |
LL |     let b = no_lint.deref_mut();
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 89 previous errors

