error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:8:1
   |
LL | fn test_nested() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:8:1
   |
LL | fn test_nested() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:8:1
   |
LL | fn test_nested() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:9:5
   |
LL |     fn nested() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:9:5
   |
LL |     fn nested() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:9:5
   |
LL |     fn nested() {
   |     ^

error: variable must be `mut`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:10:13
   |
LL |         let x = Some(());
   |             ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:23:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:23:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:23:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:13:13
   |
LL |         if x.is_some() {
   |         -------------- help: try: `if let Some(<item>) = x`
LL |             // unnecessary
LL |             x.unwrap();
   |             ^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:1:35
   |
LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:17:13
   |
LL |         if x.is_some() {
   |            ----------- because of this check
...
LL |             x.unwrap();
   |             ^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/checked_unwrap/complex_conditionals_nested.rs:1:9
   |
LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 13 previous errors

