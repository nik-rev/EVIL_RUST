error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:9:1
   |
LL | macro_rules! m {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:19:1
   |
LL | macro_rules! checks_in_param {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:27:1
   |
LL | macro_rules! checks_unwrap {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:35:1
   |
LL | macro_rules! checks_some {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:43:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:43:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:43:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:44:9
   |
LL |     let x = Some(());
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:139:1
   |
LL | fn issue11371() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:139:1
   |
LL | fn issue11371() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:139:1
   |
LL | fn issue11371() {
   | ^

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:140:9
   |
LL |     let option = Some(());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:150:9
   |
LL |     let result = Ok::<(), ()>(());
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:181:5
   |
LL |     static mut X: Option<i32> = Some(123);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:191:1
   |
LL | fn gen_option() -> Option<()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:191:1
   |
LL | fn gen_option() -> Option<()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:191:1
   |
LL | fn gen_option() -> Option<()> {
   | ^

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:196:1
   |
LL | fn gen_result() -> Result<(), ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:196:1
   |
LL | fn gen_result() -> Result<(), ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:196:1
   |
LL | fn gen_result() -> Result<(), ()> {
   | ^

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:201:1
   |
LL | fn issue14725() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:201:1
   |
LL | fn issue14725() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:201:1
   |
LL | fn issue14725() {
   | ^

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:202:9
   |
LL |     let option = Some(());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:212:9
   |
LL |     let result = Ok::<(), ()>(());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:215:13
   |
LL |         let _y = 1;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:219:13
   |
LL |         let _y = 1;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:243:1
   |
LL | fn issue14763(x: Option<String>, r: Result<(), ()>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:243:1
   |
LL | fn issue14763(x: Option<String>, r: Result<(), ()>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:243:1
   |
LL | fn issue14763(x: Option<String>, r: Result<(), ()>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:243:15
   |
LL | fn issue14763(x: Option<String>, r: Result<(), ()>) {
   |               ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:243:34
   |
LL | fn issue14763(x: Option<String>, r: Result<(), ()>) {
   |                                  ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:264:1
   |
LL | const ISSUE14763: fn(Option<String>) = |x| {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:276:1
   |
LL | fn check_expect() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:276:1
   |
LL | fn check_expect() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:276:1
   |
LL | fn check_expect() {
   | ^

error: variable must be `mut`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:277:9
   |
LL |     let x = Some(());
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:47:9
   |
LL |     if x.is_some() {
   |     -------------- help: try: `if let Some(<item>) = x`
LL |         // unnecessary
LL |         x.unwrap();
   |         ^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/checked_unwrap/simple_conditionals.rs:2:35
   |
LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `expect` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:51:9
   |
LL |     if x.is_some() {
   |     -------------- help: try: `if let Some(<item>) = x`
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:55:9
   |
LL |     if x.is_some() {
   |        ----------- because of this check
...
LL |         x.unwrap();
   |         ^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/checked_unwrap/simple_conditionals.rs:2:9
   |
LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `expect()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:59:9
   |
LL |     if x.is_some() {
   |        ----------- because of this check
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:64:9
   |
LL |     if x.is_none() {
   |        ----------- because of this check
LL |         // will panic
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_none`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:68:9
   |
LL |     if x.is_none() {
   |     -------------- help: try: `if let Some(<item>) = x`
...
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:13:13
   |
LL |         if $a.is_some() {
   |         --------------- help: try: `if let Some(<item>) = x`
LL |             // unnecessary
LL |             $a.unwrap();
   |             ^^^^^^^^^^^
...
LL |     m!(x);
   |     ----- in this macro invocation
   |
   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)

error: called `unwrap` on `x` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:81:9
   |
LL |     if x.is_ok() {
   |     ------------ help: try: `if let Ok(<item>) = x`
LL |         // unnecessary
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `expect` on `x` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:85:9
   |
LL |     if x.is_ok() {
   |     ------------ help: try: `if let Ok(<item>) = x`
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap_err()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:89:9
   |
LL |     if x.is_ok() {
   |        --------- because of this check
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:93:9
   |
LL |     if x.is_ok() {
   |        --------- because of this check
...
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: this call to `expect()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:97:9
   |
LL |     if x.is_ok() {
   |        --------- because of this check
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap_err` on `x` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:101:9
   |
LL |     if x.is_ok() {
   |     ------------ help: try: `if let Err(<item>) = x`
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:106:9
   |
LL |     if x.is_err() {
   |        ---------- because of this check
LL |         // will panic
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `unwrap_err` on `x` after checking its variant with `is_err`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:110:9
   |
LL |     if x.is_err() {
   |     ------------- help: try: `if let Err(<item>) = x`
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_err`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:114:9
   |
LL |     if x.is_err() {
   |     ------------- help: try: `if let Ok(<item>) = x`
...
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: this call to `unwrap_err()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:118:9
   |
LL |     if x.is_err() {
   |        ---------- because of this check
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: called `unwrap` on `option` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:143:9
   |
LL |     if option.is_some() {
   |     ------------------- help: try: `if let Some(<item>) = &option`
LL |         option.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:146:9
   |
LL |     if option.is_some() {
   |        ---------------- because of this check
...
LL |         option.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `result` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:153:9
   |
LL |     if result.is_ok() {
   |     ----------------- help: try: `if let Ok(<item>) = &result`
LL |         result.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:156:9
   |
LL |     if result.is_ok() {
   |        -------------- because of this check
...
LL |         result.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `option` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:162:9
   |
LL |     if option.is_some() {
   |     ------------------- help: try: `if let Some(<item>) = &mut option`
LL |         option.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:165:9
   |
LL |     if option.is_some() {
   |        ---------------- because of this check
...
LL |         option.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `result` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:171:9
   |
LL |     if result.is_ok() {
   |     ----------------- help: try: `if let Ok(<item>) = &mut result`
LL |         result.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:174:9
   |
LL |     if result.is_ok() {
   |        -------------- because of this check
...
LL |         result.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `option` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:205:17
   |
LL |     if option.is_some() {
   |     ------------------- help: try: `if let Some(<item>) = &option`
LL |         let _ = option.as_ref().unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:208:17
   |
LL |     if option.is_some() {
   |        ---------------- because of this check
...
LL |         let _ = option.as_ref().unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `result` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:216:9
   |
LL |     if result.is_ok() {
   |     ----------------- help: try: `if let Ok(<item>) = &result`
LL |         let _y = 1;
LL |         result.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:220:9
   |
LL |     if result.is_ok() {
   |        -------------- because of this check
...
LL |         result.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:246:17
   |
LL |         if x.is_some() {
   |         -------------- help: try: `if let Some(<item>) = x`
LL |             _ = x.unwrap();
   |                 ^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:249:17
   |
LL |         if x.is_some() {
   |            ----------- because of this check
...
LL |             _ = x.unwrap();
   |                 ^^^^^^^^^^

error: called `unwrap` on `r` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:255:17
   |
LL |         if r.is_ok() {
   |         ------------ help: try: `if let Ok(<item>) = &r`
LL |             _ = r.as_ref().unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:258:17
   |
LL |         if r.is_ok() {
   |            --------- because of this check
...
LL |             _ = r.as_ref().unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:267:17
   |
LL |         if x.is_some() {
   |         -------------- help: try: `if let Some(<item>) = x`
LL |             _ = x.unwrap();
   |                 ^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:270:17
   |
LL |         if x.is_some() {
   |            ----------- because of this check
...
LL |             _ = x.unwrap();
   |                 ^^^^^^^^^^

error: creating a shared reference to mutable static
  --> tests/ui/checked_unwrap/simple_conditionals.rs:183:12
   |
LL |         if X.is_some() {
   |            ^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[deny(static_mut_refs)]` on by default

error: aborting due to 70 previous errors

