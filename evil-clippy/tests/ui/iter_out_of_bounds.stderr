error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/iter_out_of_bounds.rs:6:1
   |
LL | fn opaque_empty_iter() -> impl Iterator<Item = ()> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/iter_out_of_bounds.rs:6:1
   |
LL | fn opaque_empty_iter() -> impl Iterator<Item = ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_out_of_bounds.rs:6:1
   |
LL | fn opaque_empty_iter() -> impl Iterator<Item = ()> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/iter_out_of_bounds.rs:10:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_out_of_bounds.rs:10:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_out_of_bounds.rs:10:1
   |
LL | fn main() {
   | ^

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:24:15
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |               ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:24:16
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |                ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:24:17
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |                 ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:24:18
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |                  ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:24:19
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |                   ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:24:20
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |                    ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/iter_out_of_bounds.rs:42:9
   |
LL |     let x = [1, 2, 3];
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/iter_out_of_bounds.rs:46:9
   |
LL |     let n = 4;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/iter_out_of_bounds.rs:50:9
   |
LL |     let empty = std::iter::empty::<i8>;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_out_of_bounds.rs:67:16
   |
LL |         let _: &i32 = x;
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:12:14
   |
LL |     for _ in [1, 2, 3].iter().skip(4) {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator
note: the lint level is defined here
  --> tests/ui/iter_out_of_bounds.rs:3:9
   |
LL | #![deny(clippy::iter_out_of_bounds)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this `.take()` call takes more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:17:19
   |
LL |     for (i, _) in [1, 2, 3].iter().take(4).enumerate() {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and the returned iterator will simply yield the same items

error: this `.take()` call takes more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:24:14
   |
LL |     for _ in (&&&&&&[1, 2, 3]).iter().take(4) {}
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and the returned iterator will simply yield the same items

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:27:14
   |
LL |     for _ in [1, 2, 3].iter().skip(4) {}
   |              ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:30:14
   |
LL |     for _ in [1; 3].iter().skip(4) {}
   |              ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:36:14
   |
LL |     for _ in vec![1, 2, 3].iter().skip(4) {}
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:39:14
   |
LL |     for _ in vec![1; 3].iter().skip(4) {}
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:43:14
   |
LL |     for _ in x.iter().skip(4) {}
   |              ^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:47:14
   |
LL |     for _ in x.iter().skip(n) {}
   |              ^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:52:14
   |
LL |     for _ in empty().skip(1) {}
   |              ^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.take()` call takes more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:55:14
   |
LL |     for _ in empty().take(1) {}
   |              ^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and the returned iterator will simply yield the same items

error: this `.skip()` call skips more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:58:14
   |
LL |     for _ in std::iter::once(1).skip(2) {}
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and will create an empty iterator

error: this `.take()` call takes more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:61:14
   |
LL |     for _ in std::iter::once(1).take(2) {}
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and the returned iterator will simply yield the same items

error: this `.take()` call takes more items than the iterator will produce
  --> tests/ui/iter_out_of_bounds.rs:64:14
   |
LL |     for x in [].iter().take(1) {
   |              ^^^^^^^^^^^^^^^^^
   |
   = note: this operation is useless and the returned iterator will simply yield the same items

error: aborting due to 32 previous errors

