error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/eta.rs:18:1
   |
LL | macro_rules! mac {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/eta.rs:24:1
   |
LL | macro_rules! closure_mac {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:30:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:30:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:30:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/eta.rs:31:9
   |
LL |     let a = Some(1u8).map(|a| foo(a));
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:33:9
   |
LL |     let c = Some(1u8).map(|a| {1+2; foo}(a));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:39:9
   |
LL |     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:42:9
   |
LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted
   |         ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/eta.rs:42:21
   |
LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted
   |                     ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eta.rs:42:22
   |
LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted
   |                      ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:50:9
   |
LL |     let e = Some(1u8).map(|a| divergent(a));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:51:9
   |
LL |     let e = Some(1u8).map(|a| generic(a));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:53:9
   |
LL |     let e = Some(1u8).map(generic);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:55:9
   |
LL |     let a: Option<Box<dyn (::std::ops::Deref<Target = [i32]>)>> =
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:62:5
   |
LL |     fn test<T>(x: impl Fn(usize, usize) -> T) -> T {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:62:5
   |
LL |     fn test<T>(x: impl Fn(usize, usize) -> T) -> T {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:62:5
   |
LL |     fn test<T>(x: impl Fn(usize, usize) -> T) -> T {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:62:16
   |
LL |     fn test<T>(x: impl Fn(usize, usize) -> T) -> T {
   |                ^ help: make this parameter mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/eta.rs:68:1
   |
LL | / trait TestTrait {
LL | |     fn trait_foo(self) -> bool;
LL | |     fn trait_foo_ref(&self) -> bool;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/eta.rs:68:1
   |
LL | trait TestTrait {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:69:5
   |
LL |     fn trait_foo(self) -> bool;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:69:5
   |
LL |     fn trait_foo(self) -> bool;
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:69:18
   |
LL |     fn trait_foo(self) -> bool;
   |                  ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/eta.rs:70:5
   |
LL |     fn trait_foo_ref(&self) -> bool;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:70:5
   |
LL |     fn trait_foo_ref(&self) -> bool;
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:70:23
   |
LL |     fn trait_foo_ref(&self) -> bool;
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:70:22
   |
LL |     fn trait_foo_ref(&self) -> bool;
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:73:1
   |
LL | struct TestStruct<'a> {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/eta.rs:74:15
   |
LL |     some_ref: &'a i32,
   |               ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:77:1
   |
LL | impl<'a> TestStruct<'a> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:78:5
   |
LL |     fn foo(self) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:78:5
   |
LL |     fn foo(self) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:78:12
   |
LL |     fn foo(self) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:81:26
   |
LL |     unsafe fn foo_unsafe(self) -> bool {
   |                          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:86:1
   |
LL | impl<'a> TestTrait for TestStruct<'a> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:87:5
   |
LL |     fn trait_foo(self) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:87:5
   |
LL |     fn trait_foo(self) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:87:18
   |
LL |     fn trait_foo(self) -> bool {
   |                  ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/eta.rs:90:5
   |
LL |     fn trait_foo_ref(&self) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:90:5
   |
LL |     fn trait_foo_ref(&self) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:90:23
   |
LL |     fn trait_foo_ref(&self) -> bool {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:90:22
   |
LL |     fn trait_foo_ref(&self) -> bool {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:95:1
   |
LL | impl<'a> std::ops::Deref for TestStruct<'a> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:97:5
   |
LL |     fn deref(&self) -> &char {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:97:5
   |
LL |     fn deref(&self) -> &char {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:97:15
   |
LL |     fn deref(&self) -> &char {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:97:14
   |
LL |     fn deref(&self) -> &char {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:97:24
   |
LL |     fn deref(&self) -> &char {
   |                        ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:98:9
   |
LL |         &'a'
   |         ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:102:1
   |
LL | fn test_redundant_closures_containing_method_calls() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:102:1
   |
LL | fn test_redundant_closures_containing_method_calls() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:102:1
   |
LL | fn test_redundant_closures_containing_method_calls() {
   | ^

error: variable must be `mut`
  --> tests/ui/eta.rs:103:9
   |
LL |     let i = 10;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:104:9
   |
LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:104:41
   |
LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:106:9
   |
LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:106:41
   |
LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:108:9
   |
LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo_ref());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:108:41
   |
LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo_ref());
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:109:9
   |
LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:109:18
   |
LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());
   |                  ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:112:13
   |
LL |         let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo_unsafe());
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:112:45
   |
LL |         let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo_unsafe());
   |                                             ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:114:9
   |
LL |     let e = Some("str").map(|s| s.to_string());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:116:9
   |
LL |     let e = Some('a').map(|s| s.to_uppercase());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:118:9
   |
LL |     let e: std::vec::Vec<usize> = vec!['a', 'b', 'c'].iter().map(|c| c.len_utf8()).collect();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:119:9
   |
LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:121:9
   |
LL |     let e = Some(PathBuf::new()).as_ref().and_then(|s| s.to_str());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:122:9
   |
LL |     let c = Some(TestStruct { some_ref: &i })
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:122:41
   |
LL |     let c = Some(TestStruct { some_ref: &i })
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:126:5
   |
LL |     fn test_different_borrow_levels<T>(t: &[&T])
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:126:5
   |
LL |     fn test_different_borrow_levels<T>(t: &[&T])
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:126:5
   |
LL |     fn test_different_borrow_levels<T>(t: &[&T])
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:126:40
   |
LL |     fn test_different_borrow_levels<T>(t: &[&T])
   |                                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:126:43
   |
LL |     fn test_different_borrow_levels<T>(t: &[&T])
   |                                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:126:45
   |
LL |     fn test_different_borrow_levels<T>(t: &[&T])
   |                                             ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:134:5
   |
LL |     fn issue14096() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:134:5
   |
LL |     fn issue14096() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:134:5
   |
LL |     fn issue14096() {
   |     ^

error: variable must be `mut`
  --> tests/ui/eta.rs:135:13
   |
LL |         let x = Some("42");
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:141:1
   |
LL | struct Thunk<T>(Box<dyn FnMut() -> T>);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:143:1
   |
LL | impl<T> Thunk<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:144:5
   |
LL |     fn new<F: 'static + FnOnce() -> T>(f: F) -> Thunk<T> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:144:5
   |
LL |     fn new<F: 'static + FnOnce() -> T>(f: F) -> Thunk<T> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:144:40
   |
LL |     fn new<F: 'static + FnOnce() -> T>(f: F) -> Thunk<T> {
   |                                        ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/eta.rs:150:5
   |
LL |     fn unwrap(self) -> T {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:150:5
   |
LL |     fn unwrap(self) -> T {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:150:15
   |
LL |     fn unwrap(self) -> T {
   |               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:156:1
   |
LL | fn foobar() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:156:1
   |
LL | fn foobar() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:156:1
   |
LL | fn foobar() {
   | ^

error: variable must be `mut`
  --> tests/ui/eta.rs:157:9
   |
LL |     let thunk = Thunk::new(|| println!("Hello, world!"));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:161:1
   |
LL | fn foo(_: u8) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:161:1
   |
LL | fn foo(_: u8) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:161:1
   |
LL | fn foo(_: u8) {}
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:163:1
   |
LL | fn foo2(_: u8) -> u8 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:163:1
   |
LL | fn foo2(_: u8) -> u8 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:163:1
   |
LL | fn foo2(_: u8) -> u8 {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:167:1
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:167:1
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:167:1
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   | ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:167:14
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:167:23
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:167:30
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:169:11
   |
LL |     F: Fn(&X, &X) -> bool,
   |           ^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:169:15
   |
LL |     F: Fn(&X, &X) -> bool,
   |               ^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:167:17
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   |                 ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:167:26
   |
LL | fn all<X, F>(x: &[X], y: &X, f: F) -> bool
   |                          ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:174:1
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:174:1
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:174:1
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:174:10
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:174:18
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:174:13
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   |             ^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:174:21
   |
LL | fn below(x: &u8, y: &u8) -> bool {
   |                     ^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:178:1
   |
LL | unsafe fn unsafe_fn(_: u8) {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:180:1
   |
LL | fn divergent(_: u8) -> ! {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:180:1
   |
LL | fn divergent(_: u8) -> ! {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:180:1
   |
LL | fn divergent(_: u8) -> ! {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:184:1
   |
LL | fn generic<T>(_: T) -> u8 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:184:1
   |
LL | fn generic<T>(_: T) -> u8 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:184:1
   |
LL | fn generic<T>(_: T) -> u8 {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:188:1
   |
LL | fn passes_fn_mut(mut x: Box<dyn FnMut()>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:188:1
   |
LL | fn passes_fn_mut(mut x: Box<dyn FnMut()>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:188:1
   |
LL | fn passes_fn_mut(mut x: Box<dyn FnMut()>) {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:192:1
   |
LL | fn requires_fn_once<T: FnOnce()>(_: T) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:192:1
   |
LL | fn requires_fn_once<T: FnOnce()>(_: T) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:192:1
   |
LL | fn requires_fn_once<T: FnOnce()>(_: T) {}
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:194:1
   |
LL | fn test_redundant_closure_with_function_pointer() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:194:1
   |
LL | fn test_redundant_closure_with_function_pointer() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:194:1
   |
LL | fn test_redundant_closure_with_function_pointer() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:195:5
   |
LL |     type FnPtrType = fn(u8);
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/eta.rs:196:9
   |
LL |     let foo_ptr: FnPtrType = foo;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:197:9
   |
LL |     let a = Some(1u8).map(|a| foo_ptr(a));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:201:1
   |
LL | fn test_redundant_closure_with_another_closure() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:201:1
   |
LL | fn test_redundant_closure_with_another_closure() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:201:1
   |
LL | fn test_redundant_closure_with_another_closure() {
   | ^

error: variable must be `mut`
  --> tests/ui/eta.rs:202:9
   |
LL |     let closure = |a| println!("{}", a);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:203:9
   |
LL |     let a = Some(1u8).map(|a| closure(a));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:207:1
   |
LL | fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:207:1
   |
LL | fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:207:1
   |
LL | fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {
   | ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:207:14
   |
LL | fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:214:1
   |
LL | fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:214:1
   |
LL | fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:214:1
   |
LL | fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {
   | ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:214:43
   |
LL | fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {
   |                                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:214:19
   |
LL | fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {
   |                   ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/eta.rs:215:7
   |
LL |     f(&mut "Hello".to_owned())
   |       ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/eta.rs:217:1
   |
LL | fn test_difference_in_mutability() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:217:1
   |
LL | fn test_difference_in_mutability() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:217:1
   |
LL | fn test_difference_in_mutability() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:221:1
   |
LL | struct Bar;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:222:1
   |
LL | impl std::ops::Deref for Bar {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:224:5
   |
LL |     fn deref(&self) -> &str {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:224:5
   |
LL |     fn deref(&self) -> &str {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:224:15
   |
LL |     fn deref(&self) -> &str {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:224:14
   |
LL |     fn deref(&self) -> &str {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:224:24
   |
LL |     fn deref(&self) -> &str {
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:229:1
   |
LL | fn test_deref_with_trait_method() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:229:1
   |
LL | fn test_deref_with_trait_method() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:229:1
   |
LL | fn test_deref_with_trait_method() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:233:1
   |
LL | fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:233:1
   |
LL | fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:233:1
   |
LL | fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:233:31
   |
LL | fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {
   |                               ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:233:44
   |
LL | fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {
   |                                            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:233:57
   |
LL | fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {
   |                                                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:244:1
   |
LL | fn mutable_closure_in_loop() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:244:1
   |
LL | fn mutable_closure_in_loop() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:244:1
   |
LL | fn mutable_closure_in_loop() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:258:1
   |
LL | fn late_bound_lifetimes() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:258:1
   |
LL | fn late_bound_lifetimes() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:258:1
   |
LL | fn late_bound_lifetimes() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:259:5
   |
LL |     fn take_asref_path<P: AsRef<Path>>(path: P) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:259:5
   |
LL |     fn take_asref_path<P: AsRef<Path>>(path: P) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:259:5
   |
LL |     fn take_asref_path<P: AsRef<Path>>(path: P) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:259:40
   |
LL |     fn take_asref_path<P: AsRef<Path>>(path: P) {}
   |                                        ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:261:5
   |
LL |     fn map_str<F>(thunk: F)
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:261:5
   |
LL |     fn map_str<F>(thunk: F)
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:261:5
   |
LL |     fn map_str<F>(thunk: F)
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:261:19
   |
LL |     fn map_str<F>(thunk: F)
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:263:19
   |
LL |         F: FnOnce(&str),
   |                   ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:267:5
   |
LL |     fn map_str_to_path<F>(thunk: F)
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:267:5
   |
LL |     fn map_str_to_path<F>(thunk: F)
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:267:5
   |
LL |     fn map_str_to_path<F>(thunk: F)
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:267:27
   |
LL |     fn map_str_to_path<F>(thunk: F)
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:269:19
   |
LL |         F: FnOnce(&str) -> &Path,
   |                   ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:269:28
   |
LL |         F: FnOnce(&str) -> &Path,
   |                            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:276:1
   |
LL | mod type_param_bound {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/eta.rs:277:5
   |
LL | /     trait Trait {
LL | |         fn fun();
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/eta.rs:277:5
   |
LL |     trait Trait {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:278:9
   |
LL |         fn fun();
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:278:9
   |
LL |         fn fun();
   |         ^

error: item must be `pub`
  --> tests/ui/eta.rs:281:5
   |
LL |     fn take<T: 'static>(_: T) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:281:5
   |
LL |     fn take<T: 'static>(_: T) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:281:5
   |
LL |     fn take<T: 'static>(_: T) {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:283:5
   |
LL |     fn test<X: Trait>() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:283:5
   |
LL |     fn test<X: Trait>() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:283:5
   |
LL |     fn test<X: Trait>() {
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:291:1
   |
LL | fn arc_fp() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:291:1
   |
LL | fn arc_fp() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:291:1
   |
LL | fn arc_fp() {
   | ^

error: variable must be `mut`
  --> tests/ui/eta.rs:292:9
   |
LL |     let rc = std::rc::Rc::new(|| 7);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:293:9
   |
LL |     let arc = std::sync::Arc::new(|n| n + 1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:294:9
   |
LL |     let ref_arc = &std::sync::Arc::new(|_| 5);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:294:19
   |
LL |     let ref_arc = &std::sync::Arc::new(|_| 5);
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:302:1
   |
LL | mod bind_by_ref {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:303:5
   |
LL |     struct A;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:304:5
   |
LL |     struct B;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:306:5
   |
LL |     impl From<&A> for B {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/eta.rs:306:15
   |
LL |     impl From<&A> for B {
   |               ^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/eta.rs:307:9
   |
LL |         fn from(A: &A) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:307:9
   |
LL |         fn from(A: &A) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:307:17
   |
LL |         fn from(A: &A) -> Self {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:307:20
   |
LL |         fn from(A: &A) -> Self {
   |                    ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:312:5
   |
LL |     fn test() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:312:5
   |
LL |     fn test() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:312:5
   |
LL |     fn test() {
   |     ^

error: references are not allowed
  --> tests/ui/eta.rs:314:33
   |
LL |         Some(A).map(|a| B::from(&a));
   |                                 ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/eta.rs:316:22
   |
LL |         Some(A).map(|ref a| B::from(a));
   |                      ^^^^^

error: item must be `pub`
  --> tests/ui/eta.rs:321:1
   |
LL | fn coerced_closure() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:321:1
   |
LL | fn coerced_closure() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:321:1
   |
LL | fn coerced_closure() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:322:5
   |
LL |     fn function_returning_unit<F: FnMut(i32)>(f: F) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:322:5
   |
LL |     fn function_returning_unit<F: FnMut(i32)>(f: F) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:322:5
   |
LL |     fn function_returning_unit<F: FnMut(i32)>(f: F) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:322:47
   |
LL |     fn function_returning_unit<F: FnMut(i32)>(f: F) {}
   |                                               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:325:5
   |
LL |     fn arr() -> &'static [u8; 0] {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:325:5
   |
LL |     fn arr() -> &'static [u8; 0] {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:325:5
   |
LL |     fn arr() -> &'static [u8; 0] {
   |     ^

error: references are not allowed
  --> tests/ui/eta.rs:325:17
   |
LL |     fn arr() -> &'static [u8; 0] {
   |                 ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:326:9
   |
LL |         &[]
   |         ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:328:5
   |
LL |     fn slice_fn(_: impl FnOnce() -> &'static [u8]) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:328:5
   |
LL |     fn slice_fn(_: impl FnOnce() -> &'static [u8]) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:328:5
   |
LL |     fn slice_fn(_: impl FnOnce() -> &'static [u8]) {}
   |     ^

error: references are not allowed
  --> tests/ui/eta.rs:328:37
   |
LL |     fn slice_fn(_: impl FnOnce() -> &'static [u8]) {}
   |                                     ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:333:1
   |
LL | fn box_dyn() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:333:1
   |
LL | fn box_dyn() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:333:1
   |
LL | fn box_dyn() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:334:5
   |
LL |     fn f(_: impl Fn(usize) -> Box<dyn std::any::Any>) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:334:5
   |
LL |     fn f(_: impl Fn(usize) -> Box<dyn std::any::Any>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:334:5
   |
LL |     fn f(_: impl Fn(usize) -> Box<dyn std::any::Any>) {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:339:1
   |
LL | fn not_general_enough() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:339:1
   |
LL | fn not_general_enough() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:339:1
   |
LL | fn not_general_enough() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:340:5
   |
LL |     fn f(_: impl FnMut(&Path) -> std::io::Result<()>) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:340:5
   |
LL |     fn f(_: impl FnMut(&Path) -> std::io::Result<()>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:340:5
   |
LL |     fn f(_: impl FnMut(&Path) -> std::io::Result<()>) {}
   |     ^

error: references are not allowed
  --> tests/ui/eta.rs:340:24
   |
LL |     fn f(_: impl FnMut(&Path) -> std::io::Result<()>) {}
   |                        ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/eta.rs:345:5
   |
LL | pub fn mutable_impl_fn_mut(mut f: impl FnMut(), mut f_used_once: impl FnMut()) -> impl FnMut() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:345:5
   |
LL | pub fn mutable_impl_fn_mut(mut f: impl FnMut(), mut f_used_once: impl FnMut()) -> impl FnMut() {
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:346:5
   |
LL |     fn takes_fn_mut(_: impl FnMut()) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:346:5
   |
LL |     fn takes_fn_mut(_: impl FnMut()) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:346:5
   |
LL |     fn takes_fn_mut(_: impl FnMut()) {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:350:5
   |
LL |     fn takes_fn_once(_: impl FnOnce()) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:350:5
   |
LL |     fn takes_fn_once(_: impl FnOnce()) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:350:5
   |
LL |     fn takes_fn_once(_: impl FnOnce()) {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:360:1
   |
LL | impl dyn TestTrait + '_ {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:361:5
   |
LL |     fn method_on_dyn(&self) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:361:5
   |
LL |     fn method_on_dyn(&self) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:361:23
   |
LL |     fn method_on_dyn(&self) -> bool {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:361:22
   |
LL |     fn method_on_dyn(&self) -> bool {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:367:1
   |
LL | fn angle_brackets_and_args() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:367:1
   |
LL | fn angle_brackets_and_args() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:367:1
   |
LL | fn angle_brackets_and_args() {
   | ^

error: variable must be `mut`
  --> tests/ui/eta.rs:368:9
   |
LL |     let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:368:27
   |
LL |     let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);
   |                           ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:368:44
   |
LL |     let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);
   |                                            ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:372:9
   |
LL |     let slice_opt: Option<&[u8]> = Some(b"slice");
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:372:27
   |
LL |     let slice_opt: Option<&[u8]> = Some(b"slice");
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/eta.rs:376:9
   |
LL |     let ptr_opt: Option<*const usize> = Some(&487);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:376:46
   |
LL |     let ptr_opt: Option<*const usize> = Some(&487);
   |                                              ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:380:9
   |
LL |     let test_struct = TestStruct { some_ref: &487 };
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:380:46
   |
LL |     let test_struct = TestStruct { some_ref: &487 };
   |                                              ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/eta.rs:381:9
   |
LL |     let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:381:25
   |
LL |     let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);
   |                         ^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:381:48
   |
LL |     let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);
   |                                                ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:387:1
   |
LL | fn track_caller_fp() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:387:1
   |
LL | fn track_caller_fp() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:387:1
   |
LL | fn track_caller_fp() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:388:5
   |
LL |     struct S;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:389:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:391:9
   |
LL |         fn add_location(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:391:9
   |
LL |         fn add_location(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:391:25
   |
LL |         fn add_location(self) {}
   |                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:395:5
   |
LL |     fn add_location() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:395:5
   |
LL |     fn add_location() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:395:5
   |
LL |     fn add_location() {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:397:5
   |
LL |     fn foo(_: fn()) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:397:5
   |
LL |     fn foo(_: fn()) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:397:5
   |
LL |     fn foo(_: fn()) {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:398:5
   |
LL |     fn foo2(_: fn(S)) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:398:5
   |
LL |     fn foo2(_: fn(S)) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:398:5
   |
LL |     fn foo2(_: fn(S)) {}
   |     ^

error: item must be `pub`
  --> tests/ui/eta.rs:403:1
   |
LL | fn _late_bound_to_early_bound_regions() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:403:1
   |
LL | fn _late_bound_to_early_bound_regions() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:403:1
   |
LL | fn _late_bound_to_early_bound_regions() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:404:5
   |
LL |     struct Foo<'a>(&'a u32);
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/eta.rs:404:20
   |
LL |     struct Foo<'a>(&'a u32);
   |                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:405:5
   |
LL |     impl<'a> Foo<'a> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:406:9
   |
LL |         fn f(x: &'a u32) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:406:9
   |
LL |         fn f(x: &'a u32) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:406:14
   |
LL |         fn f(x: &'a u32) -> Self {
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:406:17
   |
LL |         fn f(x: &'a u32) -> Self {
   |                 ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:410:5
   |
LL |     fn f(f: impl for<'a> Fn(&'a u32) -> Foo<'a>) -> Foo<'static> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:410:5
   |
LL |     fn f(f: impl for<'a> Fn(&'a u32) -> Foo<'a>) -> Foo<'static> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:410:5
   |
LL |     fn f(f: impl for<'a> Fn(&'a u32) -> Foo<'a>) -> Foo<'static> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:410:10
   |
LL |     fn f(f: impl for<'a> Fn(&'a u32) -> Foo<'a>) -> Foo<'static> {
   |          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:410:29
   |
LL |     fn f(f: impl for<'a> Fn(&'a u32) -> Foo<'a>) -> Foo<'static> {
   |                             ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:411:11
   |
LL |         f(&0)
   |           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:416:5
   |
LL |     struct Bar;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:417:5
   |
LL |     impl<'a> From<&'a u32> for Bar {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/eta.rs:417:19
   |
LL |     impl<'a> From<&'a u32> for Bar {
   |                   ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/eta.rs:418:9
   |
LL |         fn from(x: &'a u32) -> Bar {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:418:9
   |
LL |         fn from(x: &'a u32) -> Bar {
   |         ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:418:17
   |
LL |         fn from(x: &'a u32) -> Bar {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:418:20
   |
LL |         fn from(x: &'a u32) -> Bar {
   |                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:422:5
   |
LL |     fn f2(f: impl for<'a> Fn(&'a u32) -> Bar) -> Bar {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:422:5
   |
LL |     fn f2(f: impl for<'a> Fn(&'a u32) -> Bar) -> Bar {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:422:5
   |
LL |     fn f2(f: impl for<'a> Fn(&'a u32) -> Bar) -> Bar {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:422:11
   |
LL |     fn f2(f: impl for<'a> Fn(&'a u32) -> Bar) -> Bar {
   |           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:422:30
   |
LL |     fn f2(f: impl for<'a> Fn(&'a u32) -> Bar) -> Bar {
   |                              ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:423:11
   |
LL |         f(&0)
   |           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:428:5
   |
LL |     struct Baz<'a>(&'a u32);
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/eta.rs:428:20
   |
LL |     struct Baz<'a>(&'a u32);
   |                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eta.rs:429:5
   |
LL |     fn f3(f: impl Fn(&u32) -> Baz<'_>) -> Baz<'static> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:429:5
   |
LL |     fn f3(f: impl Fn(&u32) -> Baz<'_>) -> Baz<'static> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:429:5
   |
LL |     fn f3(f: impl Fn(&u32) -> Baz<'_>) -> Baz<'static> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:429:11
   |
LL |     fn f3(f: impl Fn(&u32) -> Baz<'_>) -> Baz<'static> {
   |           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:429:22
   |
LL |     fn f3(f: impl Fn(&u32) -> Baz<'_>) -> Baz<'static> {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:430:11
   |
LL |         f(&0)
   |           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:436:1
   |
LL | fn _mixed_late_bound_and_early_bound_regions() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:436:1
   |
LL | fn _mixed_late_bound_and_early_bound_regions() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:436:1
   |
LL | fn _mixed_late_bound_and_early_bound_regions() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:437:5
   |
LL |     fn f<T>(t: T, f: impl Fn(T, &u32) -> u32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:437:5
   |
LL |     fn f<T>(t: T, f: impl Fn(T, &u32) -> u32) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:437:5
   |
LL |     fn f<T>(t: T, f: impl Fn(T, &u32) -> u32) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:437:13
   |
LL |     fn f<T>(t: T, f: impl Fn(T, &u32) -> u32) -> u32 {
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eta.rs:437:19
   |
LL |     fn f<T>(t: T, f: impl Fn(T, &u32) -> u32) -> u32 {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:437:33
   |
LL |     fn f<T>(t: T, f: impl Fn(T, &u32) -> u32) -> u32 {
   |                                 ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:438:14
   |
LL |         f(t, &0)
   |              ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:440:5
   |
LL |     fn f2<'a, T: 'a>(_: &'a T, y: &u32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:440:5
   |
LL |     fn f2<'a, T: 'a>(_: &'a T, y: &u32) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:440:5
   |
LL |     fn f2<'a, T: 'a>(_: &'a T, y: &u32) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:440:32
   |
LL |     fn f2<'a, T: 'a>(_: &'a T, y: &u32) -> u32 {
   |                                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:440:25
   |
LL |     fn f2<'a, T: 'a>(_: &'a T, y: &u32) -> u32 {
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:440:35
   |
LL |     fn f2<'a, T: 'a>(_: &'a T, y: &u32) -> u32 {
   |                                   ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/eta.rs:443:15
   |
LL |     let _ = f(&0, |x, y| f2(x, y));
   |               ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eta.rs:447:1
   |
LL | fn _closure_with_types() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:447:1
   |
LL | fn _closure_with_types() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:447:1
   |
LL | fn _closure_with_types() {
   | ^

error: item must be `pub`
  --> tests/ui/eta.rs:448:5
   |
LL |     fn f<T>(x: T) -> T {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:448:5
   |
LL |     fn f<T>(x: T) -> T {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:448:5
   |
LL |     fn f<T>(x: T) -> T {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:448:13
   |
LL |     fn f<T>(x: T) -> T {
   |             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:451:5
   |
LL |     fn f2<T: Default>(f: impl Fn(T) -> T) -> T {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:451:5
   |
LL |     fn f2<T: Default>(f: impl Fn(T) -> T) -> T {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:451:5
   |
LL |     fn f2<T: Default>(f: impl Fn(T) -> T) -> T {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:451:23
   |
LL |     fn f2<T: Default>(f: impl Fn(T) -> T) -> T {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:461:1
   |
LL | mod issue_10854 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:465:9
   |
LL |         impl Test {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:466:17
   |
LL |             pub fn method(self) -> i32 {
   |                 ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:466:17
   |
LL |             pub fn method(self) -> i32 {
   |                 ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:466:27
   |
LL |             pub fn method(self) -> i32 {
   |                           ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/eta.rs:471:13
   |
LL |         pub fn calls_test(test: Option<Test>) -> Option<i32> {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:471:13
   |
LL |         pub fn calls_test(test: Option<Test>) -> Option<i32> {
   |             ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:471:27
   |
LL |         pub fn calls_test(test: Option<Test>) -> Option<i32> {
   |                           ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/eta.rs:476:13
   |
LL |         pub fn calls_outer(test: Option<super::Outer>) -> Option<i32> {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:476:13
   |
LL |         pub fn calls_outer(test: Option<super::Outer>) -> Option<i32> {
   |             ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:476:28
   |
LL |         pub fn calls_outer(test: Option<super::Outer>) -> Option<i32> {
   |                            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:484:5
   |
LL |     impl Outer {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:485:13
   |
LL |         pub fn method(self) -> i32 {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:485:13
   |
LL |         pub fn method(self) -> i32 {
   |             ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:485:23
   |
LL |         pub fn method(self) -> i32 {
   |                       ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/eta.rs:490:9
   |
LL |     pub fn calls_into_mod(test: Option<test_mod::Test>) -> Option<i32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:490:9
   |
LL |     pub fn calls_into_mod(test: Option<test_mod::Test>) -> Option<i32> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:490:27
   |
LL |     pub fn calls_into_mod(test: Option<test_mod::Test>) -> Option<i32> {
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:495:5
   |
LL |     mod a {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:498:21
   |
LL |                 pub fn extreme_nesting(test: Option<super::super::super::d::Test>) -> Option<i32> {
   |                     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:498:21
   |
LL |                 pub fn extreme_nesting(test: Option<super::super::super::d::Test>) -> Option<i32> {
   |                     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:498:40
   |
LL |                 pub fn extreme_nesting(test: Option<super::super::super::d::Test>) -> Option<i32> {
   |                                        ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:506:5
   |
LL |     mod d {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:509:9
   |
LL |         impl Test {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:510:17
   |
LL |             pub fn method(self) -> i32 {
   |                 ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:510:17
   |
LL |             pub fn method(self) -> i32 {
   |                 ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:510:27
   |
LL |             pub fn method(self) -> i32 {
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:517:1
   |
LL | mod issue_12853 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:518:5
   |
LL |     fn f_by_value<F: Fn(u32)>(f: F) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:518:5
   |
LL |     fn f_by_value<F: Fn(u32)>(f: F) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:518:5
   |
LL |     fn f_by_value<F: Fn(u32)>(f: F) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:518:31
   |
LL |     fn f_by_value<F: Fn(u32)>(f: F) {
   |                               ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:519:13
   |
LL |         let x = Box::new(|| None.map(|x| f(x)));
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:523:5
   |
LL |     fn f_by_ref<F: Fn(u32)>(f: &F) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:523:5
   |
LL |     fn f_by_ref<F: Fn(u32)>(f: &F) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:523:5
   |
LL |     fn f_by_ref<F: Fn(u32)>(f: &F) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/eta.rs:523:29
   |
LL |     fn f_by_ref<F: Fn(u32)>(f: &F) {
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:523:32
   |
LL |     fn f_by_ref<F: Fn(u32)>(f: &F) {
   |                                ^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/eta.rs:524:13
   |
LL |         let x = Box::new(|| None.map(|x| f(x)));
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eta.rs:530:1
   |
LL | mod issue_13073 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eta.rs:531:5
   |
LL |     fn get_default() -> Option<&'static str> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eta.rs:531:5
   |
LL |     fn get_default() -> Option<&'static str> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:531:5
   |
LL |     fn get_default() -> Option<&'static str> {
   |     ^

error: references are not allowed
  --> tests/ui/eta.rs:531:32
   |
LL |     fn get_default() -> Option<&'static str> {
   |                                ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/eta.rs:535:9
   |
LL |     pub fn foo() {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eta.rs:535:9
   |
LL |     pub fn foo() {
   |         ^

error: variable must be `mut`
  --> tests/ui/eta.rs:537:13
   |
LL |         let bind: Option<String> = None;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:538:13
   |
LL |         let _field = bind.as_deref().or_else(|| get_default()).unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:539:13
   |
LL |         let bind: Option<&'static str> = None;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eta.rs:539:26
   |
LL |         let bind: Option<&'static str> = None;
   |                          ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/eta.rs:540:13
   |
LL |         let _field = bind.as_deref().or_else(|| get_default()).unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eta.rs:542:13
   |
LL |         let _field = bind.or_else(|| get_default()).unwrap();
   |             ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 335 previous errors

