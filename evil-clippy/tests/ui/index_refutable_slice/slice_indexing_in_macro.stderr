error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:3:1
   |
LL | extern crate if_chain;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:6:1
   |
LL | macro_rules! if_let_slice_macro {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:16:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:16:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:16:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:9:13
   |
LL |         let slice: Option<&[u32]> = Some(&[1, 2, 3]);
   |             ^ help: make this variable mutable: `mut`
...
LL |     if_let_slice_macro!();
   |     --------------------- in this macro invocation
   |
   = note: requested on the command line with `-D clippy::missing-mut`
   = note: this error originates in the macro `if_let_slice_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:9:27
   |
LL |         let slice: Option<&[u32]> = Some(&[1, 2, 3]);
   |                           ^^^^^^
...
LL |     if_let_slice_macro!();
   |     --------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the macro `if_let_slice_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:9:42
   |
LL |         let slice: Option<&[u32]> = Some(&[1, 2, 3]);
   |                                          ^^^^^^^^^^
...
LL |     if_let_slice_macro!();
   |     --------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `if_let_slice_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:22:13
   |
LL |         let slice: Option<&[u32]> = Some(&[1, 2, 3]);
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:22:27
   |
LL |         let slice: Option<&[u32]> = Some(&[1, 2, 3]);
   |                           ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:22:42
   |
LL |         let slice: Option<&[u32]> = Some(&[1, 2, 3]);
   |                                          ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: this binding can be a slice pattern to avoid indexing
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:23:21
   |
LL |         if let Some(slice) = slice;
   |                     ^^^^^
   |
note: the lint level is defined here
  --> tests/ui/index_refutable_slice/slice_indexing_in_macro.rs:1:9
   |
LL | #![deny(clippy::index_refutable_slice)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: replace the binding and indexed access with a slice pattern
   |
LL ~         if let Some([slice_0, ..]) = slice;
LL |
LL |         then {
LL ~             println!("{}", slice_0);
   |

error: aborting due to 15 previous errors

