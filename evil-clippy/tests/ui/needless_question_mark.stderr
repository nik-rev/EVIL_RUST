error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:10:1
   |
LL | struct TO {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:14:1
   |
LL | struct TR {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:18:1
   |
LL | fn simple_option_bad1(to: TO) -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:18:1
   |
LL | fn simple_option_bad1(to: TO) -> Option<usize> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:18:1
   |
LL | fn simple_option_bad1(to: TO) -> Option<usize> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:18:23
   |
LL | fn simple_option_bad1(to: TO) -> Option<usize> {
   |                       ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:27:1
   |
LL | fn simple_option_bad2(to: TO) -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:27:1
   |
LL | fn simple_option_bad2(to: TO) -> Option<usize> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:27:1
   |
LL | fn simple_option_bad2(to: TO) -> Option<usize> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:27:23
   |
LL | fn simple_option_bad2(to: TO) -> Option<usize> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:33:1
   |
LL | fn simple_option_bad3(to: TO) -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:33:1
   |
LL | fn simple_option_bad3(to: TO) -> Option<usize> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:33:1
   |
LL | fn simple_option_bad3(to: TO) -> Option<usize> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:33:23
   |
LL | fn simple_option_bad3(to: TO) -> Option<usize> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:39:1
   |
LL | fn simple_option_bad4(to: Option<TO>) -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:39:1
   |
LL | fn simple_option_bad4(to: Option<TO>) -> Option<usize> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:39:1
   |
LL | fn simple_option_bad4(to: Option<TO>) -> Option<usize> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:39:23
   |
LL | fn simple_option_bad4(to: Option<TO>) -> Option<usize> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:48:1
   |
LL | fn simple_option_bad5(to: Option<TO>) -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:48:1
   |
LL | fn simple_option_bad5(to: Option<TO>) -> Option<usize> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:48:1
   |
LL | fn simple_option_bad5(to: Option<TO>) -> Option<usize> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:48:23
   |
LL | fn simple_option_bad5(to: Option<TO>) -> Option<usize> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:56:1
   |
LL | fn simple_result_bad1(tr: TR) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:56:1
   |
LL | fn simple_result_bad1(tr: TR) -> Result<usize, bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:56:1
   |
LL | fn simple_result_bad1(tr: TR) -> Result<usize, bool> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:56:23
   |
LL | fn simple_result_bad1(tr: TR) -> Result<usize, bool> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:64:1
   |
LL | fn simple_result_bad2(tr: TR) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:64:1
   |
LL | fn simple_result_bad2(tr: TR) -> Result<usize, bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:64:1
   |
LL | fn simple_result_bad2(tr: TR) -> Result<usize, bool> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:64:23
   |
LL | fn simple_result_bad2(tr: TR) -> Result<usize, bool> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:69:1
   |
LL | fn simple_result_bad3(tr: TR) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:69:1
   |
LL | fn simple_result_bad3(tr: TR) -> Result<usize, bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:69:1
   |
LL | fn simple_result_bad3(tr: TR) -> Result<usize, bool> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:69:23
   |
LL | fn simple_result_bad3(tr: TR) -> Result<usize, bool> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:74:1
   |
LL | fn simple_result_bad4(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:74:1
   |
LL | fn simple_result_bad4(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:74:1
   |
LL | fn simple_result_bad4(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:74:23
   |
LL | fn simple_result_bad4(tr: Result<TR, bool>) -> Result<usize, bool> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:82:1
   |
LL | fn simple_result_bad5(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:82:1
   |
LL | fn simple_result_bad5(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:82:1
   |
LL | fn simple_result_bad5(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:82:23
   |
LL | fn simple_result_bad5(tr: Result<TR, bool>) -> Result<usize, bool> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:89:1
   |
LL | fn also_bad(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:89:1
   |
LL | fn also_bad(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:89:1
   |
LL | fn also_bad(tr: Result<TR, bool>) -> Result<usize, bool> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:89:13
   |
LL | fn also_bad(tr: Result<TR, bool>) -> Result<usize, bool> {
   |             ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_question_mark.rs:91:13
   |
LL |         let t = tr.unwrap();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:98:1
   |
LL | fn false_positive_test<U, T>(x: Result<(), U>) -> Result<(), T>
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:98:1
   |
LL | fn false_positive_test<U, T>(x: Result<(), U>) -> Result<(), T>
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:98:1
   |
LL | fn false_positive_test<U, T>(x: Result<(), U>) -> Result<(), T>
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:98:30
   |
LL | fn false_positive_test<U, T>(x: Result<(), U>) -> Result<(), T>
   |                              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:106:1
   |
LL | fn deref_ref(s: Option<&String>) -> Option<&str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:106:1
   |
LL | fn deref_ref(s: Option<&String>) -> Option<&str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:106:1
   |
LL | fn deref_ref(s: Option<&String>) -> Option<&str> {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:106:14
   |
LL | fn deref_ref(s: Option<&String>) -> Option<&str> {
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/needless_question_mark.rs:106:24
   |
LL | fn deref_ref(s: Option<&String>) -> Option<&str> {
   |                        ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/needless_question_mark.rs:106:44
   |
LL | fn deref_ref(s: Option<&String>) -> Option<&str> {
   |                                            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:110:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:110:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:110:1
   |
LL | fn main() {}
   | ^

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:114:1
   |
LL | macro_rules! some_in_macro {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:120:5
   |
LL | pub fn test1() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:120:5
   |
LL | pub fn test1() {
   |     ^

error: variable must be `mut`
  --> tests/ui/needless_question_mark.rs:121:9
   |
LL |     let x = Some(3);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_question_mark.rs:122:9
   |
LL |     let _x = some_in_macro!(x?);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:126:1
   |
LL | macro_rules! some_and_qmark_in_macro {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:133:5
   |
LL | pub fn test2() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:133:5
   |
LL | pub fn test2() {
   |     ^

error: variable must be `mut`
  --> tests/ui/needless_question_mark.rs:134:9
   |
LL |     let x = Some(3);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_question_mark.rs:135:9
   |
LL |     let _x = some_and_qmark_in_macro!(x?);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:138:1
   |
LL | async fn async_option_bad(to: TO) -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:138:7
   |
LL | async fn async_option_bad(to: TO) -> Option<usize> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:138:7
   |
LL | async fn async_option_bad(to: TO) -> Option<usize> {
   |       ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:138:27
   |
LL | async fn async_option_bad(to: TO) -> Option<usize> {
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:144:1
   |
LL | async fn async_deref_ref(s: Option<&String>) -> Option<&str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:144:7
   |
LL | async fn async_deref_ref(s: Option<&String>) -> Option<&str> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:144:7
   |
LL | async fn async_deref_ref(s: Option<&String>) -> Option<&str> {
   |       ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:144:26
   |
LL | async fn async_deref_ref(s: Option<&String>) -> Option<&str> {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/needless_question_mark.rs:144:36
   |
LL | async fn async_deref_ref(s: Option<&String>) -> Option<&str> {
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/needless_question_mark.rs:144:56
   |
LL | async fn async_deref_ref(s: Option<&String>) -> Option<&str> {
   |                                                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:148:1
   |
LL | async fn async_result_bad(s: TR) -> Result<usize, bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:148:7
   |
LL | async fn async_result_bad(s: TR) -> Result<usize, bool> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:148:7
   |
LL | async fn async_result_bad(s: TR) -> Result<usize, bool> {
   |       ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:148:27
   |
LL | async fn async_result_bad(s: TR) -> Result<usize, bool> {
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_question_mark.rs:153:1
   |
LL | async fn async_wrapped<T>(a: Option<T>) -> Option<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_question_mark.rs:153:7
   |
LL | async fn async_wrapped<T>(a: Option<T>) -> Option<T> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_question_mark.rs:153:7
   |
LL | async fn async_wrapped<T>(a: Option<T>) -> Option<T> {
   |       ^

error: parameter must be `mut`
  --> tests/ui/needless_question_mark.rs:153:27
   |
LL | async fn async_wrapped<T>(a: Option<T>) -> Option<T> {
   |                           ^ help: make this parameter mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 72 previous errors

