error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:3:1
   |
LL | fn funcall() -> Result<u32, &'static str> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_ok_err.rs:3:1
   |
LL | fn funcall() -> Result<u32, &'static str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_ok_err.rs:3:1
   |
LL | fn funcall() -> Result<u32, &'static str> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: references are not allowed
  --> tests/ui/manual_ok_err.rs:3:29
   |
LL | fn funcall() -> Result<u32, &'static str> {
   |                             ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:7:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_ok_err.rs:7:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_ok_err.rs:7:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:55:5
   |
LL |     struct S;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:57:5
   |
LL |     impl std::ops::Neg for S {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/manual_ok_err.rs:58:35
   |
LL |         type Output = Result<u32, &'static str>;
   |                                   ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/manual_ok_err.rs:60:9
   |
LL |         fn neg(self) -> Self::Output {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_ok_err.rs:60:9
   |
LL |         fn neg(self) -> Self::Output {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_ok_err.rs:60:16
   |
LL |         fn neg(self) -> Self::Output {
   |                ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:75:1
   |
LL | fn no_lint() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_ok_err.rs:75:1
   |
LL | fn no_lint() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_ok_err.rs:75:1
   |
LL | fn no_lint() {
   | ^

error: references are not allowed
  --> tests/ui/manual_ok_err.rs:105:19
   |
LL |     let _: Option<&dyn std::any::Any> = match Ok::<_, ()>(&1) {
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_ok_err.rs:105:59
   |
LL |     let _: Option<&dyn std::any::Any> = match Ok::<_, ()>(&1) {
   |                                                           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_ok_err.rs:110:31
   |
LL |     let _ = match Ok::<_, ()>(&1) {
   |                               ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:126:1
   |
LL | const fn cf(x: Result<u32, &'static str>) -> Option<u32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_ok_err.rs:126:7
   |
LL | const fn cf(x: Result<u32, &'static str>) -> Option<u32> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_ok_err.rs:126:7
   |
LL | const fn cf(x: Result<u32, &'static str>) -> Option<u32> {
   |       ^

error: parameter must be `mut`
  --> tests/ui/manual_ok_err.rs:126:13
   |
LL | const fn cf(x: Result<u32, &'static str>) -> Option<u32> {
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_ok_err.rs:126:28
   |
LL | const fn cf(x: Result<u32, &'static str>) -> Option<u32> {
   |                            ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_ok_err.rs:134:1
   |
LL | fn issue14239() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_ok_err.rs:134:1
   |
LL | fn issue14239() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_ok_err.rs:134:1
   |
LL | fn issue14239() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 25 previous errors

