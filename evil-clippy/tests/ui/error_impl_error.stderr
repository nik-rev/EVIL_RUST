error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:6:14
   |
LL |     #[derive(Debug)]
   |              ^
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:6:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:6:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:6:14
   |
LL |     #[derive(Debug)]
   |              ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:6:14
   |
LL |     #[derive(Debug)]
   |              ^

error: references are not allowed
  --> tests/ui/error_impl_error.rs:6:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:6:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:10:5
   |
LL |     impl std::fmt::Display for Error {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:11:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:11:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:11:17
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:11:16
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:11:26
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:16:5
   |
LL |     impl std::error::Error for Error {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:19:1
   |
LL | mod b {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:21:5
   |
LL |     pub(super) enum Error {}
   |     ^^^^^^^^^^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:20:14
   |
LL |     #[derive(Debug)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:20:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:20:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:20:14
   |
LL |     #[derive(Debug)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:20:14
   |
LL |     #[derive(Debug)]
   |              ^

error: references are not allowed
  --> tests/ui/error_impl_error.rs:20:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:20:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:24:5
   |
LL |     impl std::fmt::Display for Error {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:25:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:25:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:25:17
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:25:16
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:25:26
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:30:5
   |
LL |     impl std::error::Error for Error {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:40:5
   |
LL |     impl std::fmt::Debug for Error {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:41:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:41:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:41:17
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:41:16
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:41:26
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:46:5
   |
LL |     impl std::fmt::Display for Error {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:47:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:47:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:47:17
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:47:16
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:47:26
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:52:5
   |
LL |     impl std::error::Error for Error {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:60:1
   |
LL | mod e {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:62:5
   |
LL |     pub(super) struct MyError;
   |     ^^^^^^^^^^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:61:14
   |
LL |     #[derive(Debug)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:61:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:61:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:61:14
   |
LL |     #[derive(Debug)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:61:14
   |
LL |     #[derive(Debug)]
   |              ^

error: references are not allowed
  --> tests/ui/error_impl_error.rs:61:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:61:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:64:5
   |
LL |     impl std::fmt::Display for MyError {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:65:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:65:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:65:17
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:65:16
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:65:26
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:70:5
   |
LL |     impl std::error::Error for MyError {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:79:1
   |
LL | mod g {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:81:5
   |
LL |     enum Error {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:80:14
   |
LL |     #[derive(Debug)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:80:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:80:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:80:14
   |
LL |     #[derive(Debug)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:80:14
   |
LL |     #[derive(Debug)]
   |              ^

error: references are not allowed
  --> tests/ui/error_impl_error.rs:80:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:80:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:83:5
   |
LL |     impl std::fmt::Display for Error {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/error_impl_error.rs:84:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/error_impl_error.rs:84:9
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |         ^

error: parameter must be `mut`
  --> tests/ui/error_impl_error.rs:84:17
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:84:16
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/error_impl_error.rs:84:26
   |
LL |         fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:89:5
   |
LL |     impl std::error::Error for Error {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:92:1
   |
LL | mod h {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/error_impl_error.rs:93:5
   |
LL |     type Error = std::fmt::Error;
   |     ^ help: make this item public: `pub`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 71 previous errors

