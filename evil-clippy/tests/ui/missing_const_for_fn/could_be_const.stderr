error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:7:1
   |
LL | struct Game {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:11:1
   |
LL | impl Game {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:13:9
   |
LL |     pub fn new() -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:13:9
   |
LL |     pub fn new() -> Self {
   |         ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:5
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:5
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |     ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:53
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |                                                     ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:59
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |                                                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:52
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |                                                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:62
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |                                                              ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:18:77
   |
LL |     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {
   |                                                                             ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:25:1
   |
LL | fn one() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:25:1
   |
LL | fn one() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:25:1
   |
LL | fn one() -> i32 {
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:31:1
   |
LL | fn two() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:31:1
   |
LL | fn two() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:31:1
   |
LL | fn two() -> i32 {
   | ^

error: variable must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:33:9
   |
LL |     let abc = 2;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:38:1
   |
LL | fn string() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:38:1
   |
LL | fn string() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:38:1
   |
LL | fn string() -> String {
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:44:1
   |
LL | unsafe fn four() -> i32 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:50:1
   |
LL | fn generic<T>(t: T) -> T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:50:1
   |
LL | fn generic<T>(t: T) -> T {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:50:1
   |
LL | fn generic<T>(t: T) -> T {
   | ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:50:15
   |
LL | fn generic<T>(t: T) -> T {
   |               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:55:1
   |
LL | fn sub(x: u32) -> usize {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:55:1
   |
LL | fn sub(x: u32) -> usize {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:55:1
   |
LL | fn sub(x: u32) -> usize {
   | ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:55:8
   |
LL | fn sub(x: u32) -> usize {
   |        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:56:24
   |
LL |     unsafe { transmute(&x) }
   |                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:59:1
   |
LL | fn generic_arr<T: Copy>(t: [T; 1]) -> T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:59:1
   |
LL | fn generic_arr<T: Copy>(t: [T; 1]) -> T {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:59:1
   |
LL | fn generic_arr<T: Copy>(t: [T; 1]) -> T {
   | ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:59:25
   |
LL | fn generic_arr<T: Copy>(t: [T; 1]) -> T {
   |                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:64:1
   |
LL | mod with_drop {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:67:5
   |
LL |     impl Drop for A {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:68:9
   |
LL |         fn drop(&mut self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:68:9
   |
LL |         fn drop(&mut self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:68:22
   |
LL |         fn drop(&mut self) {}
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:68:17
   |
LL |         fn drop(&mut self) {}
   |                 ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:71:5
   |
LL |     impl B {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:73:13
   |
LL |         pub fn b(self, a: &A) -> B {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:73:13
   |
LL |         pub fn b(self, a: &A) -> B {
   |             ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:73:18
   |
LL |         pub fn b(self, a: &A) -> B {
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:73:24
   |
LL |         pub fn b(self, a: &A) -> B {
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:73:27
   |
LL |         pub fn b(self, a: &A) -> B {
   |                           ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:81:1
   |
LL | mod const_fn_stabilized_before_msrv {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:83:5
   |
LL |     fn const_fn_stabilized_before_msrv(byte: u8) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:83:5
   |
LL |     fn const_fn_stabilized_before_msrv(byte: u8) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:83:5
   |
LL |     fn const_fn_stabilized_before_msrv(byte: u8) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:83:40
   |
LL |     fn const_fn_stabilized_before_msrv(byte: u8) {
   |                                        ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:90:1
   |
LL | fn msrv_1_45() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:90:1
   |
LL | fn msrv_1_45() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:90:1
   |
LL | fn msrv_1_45() -> i32 {
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:95:1
   |
LL | fn msrv_1_46() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:95:1
   |
LL | fn msrv_1_46() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:95:1
   |
LL | fn msrv_1_46() -> i32 {
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:101:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:101:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:101:1
   |
LL | fn main() {}
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:103:1
   |
LL | struct D;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:115:1
   |
LL | fn d(this: D) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:115:1
   |
LL | fn d(this: D) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:115:1
   |
LL | fn d(this: D) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:115:6
   |
LL | fn d(this: D) {}
   |      ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:118:1
   |
LL | mod msrv {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:119:5
   |
LL |     struct Foo(*const u8, &'static u8);
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:119:27
   |
LL |     struct Foo(*const u8, &'static u8);
   |                           ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:121:5
   |
LL |     impl Foo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:123:9
   |
LL |         fn deref_ptr_can_be_const(self) -> usize {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:123:9
   |
LL |         fn deref_ptr_can_be_const(self) -> usize {
   |         ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:123:35
   |
LL |         fn deref_ptr_can_be_const(self) -> usize {
   |                                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:128:9
   |
LL |         fn deref_copied_val(self) -> usize {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:128:9
   |
LL |         fn deref_copied_val(self) -> usize {
   |         ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:128:29
   |
LL |         fn deref_copied_val(self) -> usize {
   |                             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:134:5
   |
LL |     union Bar {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:139:5
   |
LL |     fn union_access_can_be_const() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:139:5
   |
LL |     fn union_access_can_be_const() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:139:5
   |
LL |     fn union_access_can_be_const() {
   |     ^

error: variable must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:141:13
   |
LL |         let bar = Bar { val: 1 };
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:146:5
   |
LL |     mod with_extern {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:147:9
   |
LL |         unsafe extern "C" fn c() {}
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:152:9
   |
LL |         extern fn implicit_c() {}
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:152:9
   |
LL |         extern fn implicit_c() {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:152:9
   |
LL |         extern fn implicit_c() {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:157:13
   |
LL |             fn c_in_block();
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:157:13
   |
LL |             fn c_in_block();
   |             ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:162:1
   |
LL | mod issue12677 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:167:5
   |
LL |     impl Wrapper {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:169:13
   |
LL |         pub fn new(strings: Vec<String>) -> Self {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:169:13
   |
LL |         pub fn new(strings: Vec<String>) -> Self {
   |             ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:169:20
   |
LL |         pub fn new(strings: Vec<String>) -> Self {
   |                    ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:175:13
   |
LL |         pub fn empty() -> Self {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:175:13
   |
LL |         pub fn empty() -> Self {
   |             ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:186:5
   |
LL |     impl Other {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:187:13
   |
LL |         pub fn new(text: String) -> Self {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:187:13
   |
LL |         pub fn new(text: String) -> Self {
   |             ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:187:20
   |
LL |         pub fn new(text: String) -> Self {
   |                    ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:189:17
   |
LL |             let vec = Vec::new();
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:195:1
   |
LL | mod with_ty_alias {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:196:5
   |
LL | /     trait FooTrait {
LL | |         type Foo: std::fmt::Debug;
LL | |         fn bar(_: Self::Foo) {}
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:196:5
   |
LL |     trait FooTrait {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:198:9
   |
LL |         fn bar(_: Self::Foo) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:198:9
   |
LL |         fn bar(_: Self::Foo) {}
   |         ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:200:5
   |
LL |     impl FooTrait for () {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:207:5
   |
LL |     fn alias_ty_is_projection(bar: <() as FooTrait>::Foo) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:207:5
   |
LL |     fn alias_ty_is_projection(bar: <() as FooTrait>::Foo) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:207:5
   |
LL |     fn alias_ty_is_projection(bar: <() as FooTrait>::Foo) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:207:31
   |
LL |     fn alias_ty_is_projection(bar: <() as FooTrait>::Foo) {}
   |                               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:211:1
   |
LL | mod extern_fn {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:212:5
   |
LL |     extern "C-unwind" fn c_unwind() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:212:5
   |
LL |     extern "C-unwind" fn c_unwind() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:212:5
   |
LL |     extern "C-unwind" fn c_unwind() {}
   |     ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:214:5
   |
LL |     extern "system" fn system() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:214:5
   |
LL |     extern "system" fn system() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:214:5
   |
LL |     extern "system" fn system() {}
   |     ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:216:5
   |
LL |     extern "system-unwind" fn system_unwind() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:216:5
   |
LL |     extern "system-unwind" fn system_unwind() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:216:5
   |
LL |     extern "system-unwind" fn system_unwind() {}
   |     ^

error: item must be `pub`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:220:1
   |
LL | fn mut_add(x: &mut i32) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:220:1
   |
LL | fn mut_add(x: &mut i32) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:220:1
   |
LL | fn mut_add(x: &mut i32) {
   | ^

error: parameter must be `mut`
  --> tests/ui/missing_const_for_fn/could_be_const.rs:220:12
   |
LL | fn mut_add(x: &mut i32) {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/missing_const_for_fn/could_be_const.rs:220:15
   |
LL | fn mut_add(x: &mut i32) {
   |               ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 100 previous errors

