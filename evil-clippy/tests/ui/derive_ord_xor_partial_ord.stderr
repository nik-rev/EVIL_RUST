error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:8:1
   |
LL | struct DeriveBoth;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:10
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:7
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |       ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:7
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |       ^  ---------- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:10
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:10
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |          ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:10
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:10
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:22
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                      ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:19
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                   ^  --- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:19
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                   ^  --- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:22
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:22
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                      ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:22
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                      ^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:22
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                      ^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:27
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                           ^

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:27
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                           ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:24
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                        ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:24
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                        ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:27
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                           ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:27
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                           ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:27
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                           ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:27
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                           ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:38
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                                      ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:35
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                                   ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:35
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                                   ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:38
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:7:38
   |
LL | #[derive(PartialOrd, Ord, PartialEq, Eq)]
   |                                      ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:10:1
   |
LL | impl PartialEq<u64> for DeriveBoth {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:11:5
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:11:5
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:11:12
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:11:11
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:11:21
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:16:1
   |
LL | impl PartialOrd<u64> for DeriveBoth {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:17:5
   |
LL |     fn partial_cmp(&self, _: &u64) -> Option<Ordering> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:17:5
   |
LL |     fn partial_cmp(&self, _: &u64) -> Option<Ordering> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:17:21
   |
LL |     fn partial_cmp(&self, _: &u64) -> Option<Ordering> {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:17:20
   |
LL |     fn partial_cmp(&self, _: &u64) -> Option<Ordering> {
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:17:30
   |
LL |     fn partial_cmp(&self, _: &u64) -> Option<Ordering> {
   |                              ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:25:1
   |
LL | struct DeriveOrd;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:7
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |       ^  --- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:7
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |       ^  --- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:12
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |            ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:12
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |            ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:26
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:23
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                       ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:23
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                       ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:26
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:22:26
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                          ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:27:1
   |
LL | impl PartialOrd for DeriveOrd {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:28:5
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:28:5
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:28:21
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:28:27
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:28:20
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:28:34
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:36:1
   |
LL | struct DeriveOrdWithExplicitTypeVariable;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:7
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |       ^  --- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:7
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |       ^  --- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:10
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |          ^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:12
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |            ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:12
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |            ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:15
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |               ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:26
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:23
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                       ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:23
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                       ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:26
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:33:26
   |
LL | #[derive(Ord, PartialEq, Eq)]
   |                          ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:38:1
   |
LL | impl PartialOrd<DeriveOrdWithExplicitTypeVariable> for DeriveOrdWithExplicitTypeVariable {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:39:5
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:39:5
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:39:21
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:39:27
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:39:20
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:39:34
   |
LL |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
   |                                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:45:1
   |
LL | struct DerivePartialOrd;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:7
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |       ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:7
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |       ^  ---------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:19
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                   ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:19
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                   ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:33
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                                 ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:30
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                              ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:30
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                              ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:33
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:44:33
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                                 ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:47:1
   |
LL | impl std::cmp::Ord for DerivePartialOrd {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:50:5
   |
LL |     fn cmp(&self, other: &Self) -> Ordering {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:50:5
   |
LL |     fn cmp(&self, other: &Self) -> Ordering {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:50:13
   |
LL |     fn cmp(&self, other: &Self) -> Ordering {
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:50:19
   |
LL |     fn cmp(&self, other: &Self) -> Ordering {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:50:12
   |
LL |     fn cmp(&self, other: &Self) -> Ordering {
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:50:26
   |
LL |     fn cmp(&self, other: &Self) -> Ordering {
   |                          ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:56:1
   |
LL | struct ImplUserOrd;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:7
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |       ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:7
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |       ^  ---------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:10
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:19
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                   ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:19
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                   ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:22
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                      ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:33
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                                 ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:30
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                              ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:30
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                              ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:33
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:55:33
   |
LL | #[derive(PartialOrd, PartialEq, Eq)]
   |                                 ^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:58:1
   |
LL | trait Ord {}
   | ^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:58:1
   |
LL | trait Ord {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:61:1
   |
LL | impl Ord for ImplUserOrd {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:63:1
   |
LL | mod use_ord {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:67:5
   |
LL |     struct DerivePartialOrdInUseOrd;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:14
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:11
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |           ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:11
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |           ^  ---------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:14
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:14
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |              ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:14
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |              ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:14
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |              ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:26
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                          ^

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:26
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                          ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:23
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                       ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:23
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                       ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:26
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:26
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                          ^

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:26
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:26
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:37
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                                     ^

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:34
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                                  ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:34
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                                  ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:37
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:66:37
   |
LL |     #[derive(PartialOrd, PartialEq, Eq)]
   |                                     ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:69:5
   |
LL |     impl Ord for DerivePartialOrdInUseOrd {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:72:9
   |
LL |         fn cmp(&self, other: &Self) -> Ordering {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:72:9
   |
LL |         fn cmp(&self, other: &Self) -> Ordering {
   |         ^

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:72:17
   |
LL |         fn cmp(&self, other: &Self) -> Ordering {
   |                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derive_ord_xor_partial_ord.rs:72:23
   |
LL |         fn cmp(&self, other: &Self) -> Ordering {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:72:16
   |
LL |         fn cmp(&self, other: &Self) -> Ordering {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derive_ord_xor_partial_ord.rs:72:30
   |
LL |         fn cmp(&self, other: &Self) -> Ordering {
   |                              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derive_ord_xor_partial_ord.rs:78:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:78:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derive_ord_xor_partial_ord.rs:78:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 158 previous errors

