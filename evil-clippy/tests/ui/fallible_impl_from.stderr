error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:5:1
   |
LL | struct Foo(i32);
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:6:1
   |
LL | impl From<String> for Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:9:5
   |
LL |     fn from(s: String) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:9:5
   |
LL |     fn from(s: String) -> Self {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:9:13
   |
LL |     fn from(s: String) -> Self {
   |             ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:14:1
   |
LL | struct Valid(Vec<u8>);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:16:1
   |
LL | impl<'a> From<&'a str> for Valid {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/fallible_impl_from.rs:16:15
   |
LL | impl<'a> From<&'a str> for Valid {
   |               ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:17:5
   |
LL |     fn from(s: &'a str) -> Valid {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:17:5
   |
LL |     fn from(s: &'a str) -> Valid {
   |     ^

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:17:13
   |
LL |     fn from(s: &'a str) -> Valid {
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/fallible_impl_from.rs:17:16
   |
LL |     fn from(s: &'a str) -> Valid {
   |                ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:21:1
   |
LL | impl From<usize> for Valid {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:22:5
   |
LL |     fn from(i: usize) -> Valid {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:22:5
   |
LL |     fn from(i: usize) -> Valid {
   |     ^

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:22:13
   |
LL |     fn from(i: usize) -> Valid {
   |             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:27:1
   |
LL | struct Invalid;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:29:1
   |
LL | impl From<usize> for Invalid {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:32:5
   |
LL |     fn from(i: usize) -> Invalid {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:32:5
   |
LL |     fn from(i: usize) -> Invalid {
   |     ^

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:32:13
   |
LL |     fn from(i: usize) -> Invalid {
   |             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:34:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:34:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:34:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:40:1
   |
LL | impl From<Option<String>> for Invalid {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:43:5
   |
LL |     fn from(s: Option<String>) -> Invalid {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:43:5
   |
LL |     fn from(s: Option<String>) -> Invalid {
   |     ^

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:43:13
   |
LL |     fn from(s: Option<String>) -> Invalid {
   |             ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/fallible_impl_from.rs:44:13
   |
LL |         let s = s.unwrap();
   |             ^ help: make this variable mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:54:1
   |
LL | / trait ProjStrTrait {
LL | |     type ProjString;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:54:1
   |
LL | trait ProjStrTrait {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:57:1
   |
LL | impl<T> ProjStrTrait for Box<T> {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:60:1
   |
LL | impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/fallible_impl_from.rs:60:15
   |
LL | impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:63:5
   |
LL |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:63:5
   |
LL |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {
   |     ^

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:63:13
   |
LL |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/fallible_impl_from.rs:63:16
   |
LL |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:71:1
   |
LL | struct Unreachable;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:73:1
   |
LL | impl From<String> for Unreachable {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:74:5
   |
LL |     fn from(s: String) -> Unreachable {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:74:5
   |
LL |     fn from(s: String) -> Unreachable {
   |     ^

error: parameter must be `mut`
  --> tests/ui/fallible_impl_from.rs:74:13
   |
LL |     fn from(s: String) -> Unreachable {
   |             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/fallible_impl_from.rs:85:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fallible_impl_from.rs:85:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fallible_impl_from.rs:85:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: consider implementing `TryFrom` instead
  --> tests/ui/fallible_impl_from.rs:6:1
   |
LL | / impl From<String> for Foo {
LL | |
LL | |
LL | |     fn from(s: String) -> Self {
...  |
LL | | }
   | |_^
   |
   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail
note: potential failure(s)
  --> tests/ui/fallible_impl_from.rs:10:13
   |
LL |         Foo(s.parse().unwrap())
   |             ^^^^^^^^^^^^^^^^^^
note: the lint level is defined here
  --> tests/ui/fallible_impl_from.rs:1:9
   |
LL | #![deny(clippy::fallible_impl_from)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: consider implementing `TryFrom` instead
  --> tests/ui/fallible_impl_from.rs:29:1
   |
LL | / impl From<usize> for Invalid {
LL | |
LL | |
LL | |     fn from(i: usize) -> Invalid {
...  |
LL | | }
   | |_^
   |
   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail
note: potential failure(s)
  --> tests/ui/fallible_impl_from.rs:34:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: consider implementing `TryFrom` instead
  --> tests/ui/fallible_impl_from.rs:40:1
   |
LL | / impl From<Option<String>> for Invalid {
LL | |
LL | |
LL | |     fn from(s: Option<String>) -> Invalid {
...  |
LL | | }
   | |_^
   |
   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail
note: potential failure(s)
  --> tests/ui/fallible_impl_from.rs:44:17
   |
LL |         let s = s.unwrap();
   |                 ^^^^^^^^^^
LL |         if !s.is_empty() {
LL |             panic!("42");
   |             ^^^^^^^^^^^^
LL |         } else if s.parse::<u32>().unwrap() != 42 {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^
LL |             panic!("{:?}", s);
   |             ^^^^^^^^^^^^^^^^^

error: consider implementing `TryFrom` instead
  --> tests/ui/fallible_impl_from.rs:60:1
   |
LL | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {
LL | |
LL | |
LL | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {
...  |
LL | | }
   | |_^
   |
   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail
note: potential failure(s)
  --> tests/ui/fallible_impl_from.rs:64:12
   |
LL |         if s.parse::<u32>().ok().unwrap() != 42 {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LL |             panic!("{:?}", s);
   |             ^^^^^^^^^^^^^^^^^

error: aborting due to 45 previous errors

