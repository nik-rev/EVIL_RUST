error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:4:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:4:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:4:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:26:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:26:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:26:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: references are not allowed
  --> tests/ui/manual_inspect.rs:33:12
   |
LL |         if &x == &0 {
   |            ^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:33:18
   |
LL |         if &x == &0 {
   |                  ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:34:17
   |
LL |             let _y = x;
   |                 ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:35:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:35:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:35:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:41:13
   |
LL |         let y = x + 1;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:50:9
   |
LL |         struct Foo(i32);
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:49:18
   |
LL |         #[derive(PartialEq)]
   |                  ^

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:49:18
   |
LL |         #[derive(PartialEq)]
   |                  ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:49:15
   |
LL |         #[derive(PartialEq)]
   |               ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:49:15
   |
LL |         #[derive(PartialEq)]
   |               ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:49:18
   |
LL |         #[derive(PartialEq)]
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:49:18
   |
LL |         #[derive(PartialEq)]
   |                  ^

error: references are not allowed
  --> tests/ui/manual_inspect.rs:49:18
   |
LL |         #[derive(PartialEq)]
   |                  ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:49:18
   |
LL |         #[derive(PartialEq)]
   |                  ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:54:17
   |
LL |                 panic!();
   |                 ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:54:17
   |
LL |                 panic!();
   |                 ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:54:17
   |
LL |                 panic!();
   |                 ^^^^^^^^

error: references are not allowed
  --> tests/ui/manual_inspect.rs:60:16
   |
LL |             if &x == &Foo(0) {
   |                ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:60:22
   |
LL |             if &x == &Foo(0) {
   |                      ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:61:21
   |
LL |                 let _y = x;
   |                     ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:62:17
   |
LL |                 panic!();
   |                 ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:62:17
   |
LL |                 panic!();
   |                 ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:62:17
   |
LL |                 panic!();
   |                 ^^^^^^^^

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:69:9
   |
LL |         macro_rules! maybe_ret {
   |         ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:86:17
   |
LL |             let _x = x.1;
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:87:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:87:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:87:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:94:17
   |
LL |             let _x = x.0;
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:95:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:95:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:95:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:103:21
   |
LL |                 let _x = x;
   |                     ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:105:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:105:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:105:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:114:21
   |
LL |                 let _x = &x;
   |                     ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:114:26
   |
LL |                 let _x = &x;
   |                          ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:126:21
   |
LL |                 let _x = x;
   |                     ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:128:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:128:13
   |
LL |             panic!();
   |             ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:128:13
   |
LL |             panic!();
   |             ^^^^^^^^

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:136:9
   |
LL |         struct Cell2(core::cell::Cell<u32>);
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:135:18
   |
LL |         #[derive(Debug)]
   |                  ^

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:135:15
   |
LL |         #[derive(Debug)]
   |               ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:135:15
   |
LL |         #[derive(Debug)]
   |               ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:135:18
   |
LL |         #[derive(Debug)]
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:135:18
   |
LL |         #[derive(Debug)]
   |                  ^

error: references are not allowed
  --> tests/ui/manual_inspect.rs:135:18
   |
LL |         #[derive(Debug)]
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:135:18
   |
LL |         #[derive(Debug)]
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:136:22
   |
LL |         #[derive(Debug)]
   |                  ----- in this derive macro expansion
LL |         struct Cell2(core::cell::Cell<u32>);
   |                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:136:22
   |
LL |         #[derive(Debug)]
   |                  ----- in this derive macro expansion
LL |         struct Cell2(core::cell::Cell<u32>);
   |                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: variable must be `mut`
  --> tests/ui/manual_inspect.rs:145:17
   |
LL |             let y = &x;
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_inspect.rs:145:21
   |
LL |             let y = &x;
   |                     ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:178:9
   |
LL |         struct S<T>(T);
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:179:9
   |
LL |         impl<T> S<T> {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:180:13
   |
LL |             fn map<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:180:13
   |
LL |             fn map<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |             ^

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:180:23
   |
LL |             fn map<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:180:29
   |
LL |             fn map<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |                             ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:184:13
   |
LL |             fn map_err<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:184:13
   |
LL |             fn map_err<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |             ^

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:184:27
   |
LL |             fn map_err<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |                           ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_inspect.rs:184:33
   |
LL |             fn map_err<U>(self, f: impl FnOnce(T) -> U) -> S<U> {
   |                                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_inspect.rs:202:1
   |
LL | fn layout_check() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_inspect.rs:202:1
   |
LL | fn layout_check() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_inspect.rs:202:1
   |
LL | fn layout_check() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 65 previous errors

