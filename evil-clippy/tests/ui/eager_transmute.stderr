error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:8:1
   |
LL | enum Opcode {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:15:1
   |
LL | struct Data {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:16:10
   |
LL |     foo: &'static [u8],
   |          ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:17:10
   |
LL |     bar: &'static [u8],
   |          ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:20:1
   |
LL | fn int_to_opcode(op: u8) -> Option<Opcode> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:20:1
   |
LL | fn int_to_opcode(op: u8) -> Option<Opcode> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:20:1
   |
LL | fn int_to_opcode(op: u8) -> Option<Opcode> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:20:18
   |
LL | fn int_to_opcode(op: u8) -> Option<Opcode> {
   |                  ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:25:1
   |
LL | fn f(op: u8, op2: Data, unrelated: u8) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:25:1
   |
LL | fn f(op: u8, op2: Data, unrelated: u8) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:25:1
   |
LL | fn f(op: u8, op2: Data, unrelated: u8) {
   | ^

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:25:6
   |
LL | fn f(op: u8, op2: Data, unrelated: u8) {
   |      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:25:14
   |
LL | fn f(op: u8, op2: Data, unrelated: u8) {
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:25:25
   |
LL | fn f(op: u8, op2: Data, unrelated: u8) {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:54:46
   |
LL |     let _: Option<Opcode> = (1..=3).contains(&op).then_some(unsafe { std::mem::transmute(op) });
   |                                              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:56:47
   |
LL |     let _: Option<Opcode> = ((1..=3).contains(&op) || op == 4).then_some(unsafe { std::mem::transmute(op) });
   |                                               ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:58:45
   |
LL |     let _: Option<Opcode> = (1..3).contains(&op).then_some(unsafe { std::mem::transmute(op) });
   |                                             ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:60:44
   |
LL |     let _: Option<Opcode> = (1..).contains(&op).then_some(unsafe { std::mem::transmute(op) });
   |                                            ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:62:44
   |
LL |     let _: Option<Opcode> = (..3).contains(&op).then_some(unsafe { std::mem::transmute(op) });
   |                                            ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:64:45
   |
LL |     let _: Option<Opcode> = (..=3).contains(&op).then_some(unsafe { std::mem::transmute(op) });
   |                                             ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eager_transmute.rs:69:19
   |
LL |         .contains(&unrelated)
   |                   ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:73:1
   |
LL | unsafe fn f2(op: u8) {
   | ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:73:14
   |
LL | unsafe fn f2(op: u8) {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:81:1
   |
LL | struct NonMaxU8(u8);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:84:1
   |
LL | struct NonZeroNonMaxU8(u8);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:86:1
   |
LL | macro_rules! impls {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:89:13
   |
LL |             impl PartialEq<u8> for $t {
   |             ^ help: make this item public: `pub`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:90:17
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:90:17
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:90:24
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                        ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:90:30
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                              ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:90:23
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                       ^^^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:90:37
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                                     ^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:94:13
   |
LL |             impl PartialOrd<u8> for $t {
   |             ^ help: make this item public: `pub`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:95:17
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:95:17
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:95:33
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                 ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:95:39
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                       ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:95:32
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                ^^^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:95:46
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                              ^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:89:13
   |
LL |             impl PartialEq<u8> for $t {
   |             ^ help: make this item public: `pub`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:90:17
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:90:17
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:90:24
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                        ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:90:30
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                              ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:90:23
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                       ^^^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:90:37
   |
LL |                 fn eq(&self, other: &u8) -> bool {
   |                                     ^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:94:13
   |
LL |             impl PartialOrd<u8> for $t {
   |             ^ help: make this item public: `pub`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:95:17
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:95:17
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                 ^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:95:33
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                 ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:95:39
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                       ^ help: make this parameter mutable: `mut`
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:95:32
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                ^^^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eager_transmute.rs:95:46
   |
LL |                 fn partial_cmp(&self, other: &u8) -> Option<std::cmp::Ordering> {
   |                                              ^^^
...
LL | impls!(NonMaxU8, NonZeroNonMaxU8);
   | --------------------------------- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:104:1
   |
LL | fn niche_tests(v1: u8, v2: NonZero<u8>, v3: NonZeroNonMaxU8) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:104:1
   |
LL | fn niche_tests(v1: u8, v2: NonZero<u8>, v3: NonZeroNonMaxU8) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:104:1
   |
LL | fn niche_tests(v1: u8, v2: NonZero<u8>, v3: NonZeroNonMaxU8) {
   | ^

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:104:16
   |
LL | fn niche_tests(v1: u8, v2: NonZero<u8>, v3: NonZeroNonMaxU8) {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:104:24
   |
LL | fn niche_tests(v1: u8, v2: NonZero<u8>, v3: NonZeroNonMaxU8) {
   |                        ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eager_transmute.rs:104:41
   |
LL | fn niche_tests(v1: u8, v2: NonZero<u8>, v3: NonZeroNonMaxU8) {
   |                                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/eager_transmute.rs:124:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eager_transmute.rs:124:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eager_transmute.rs:124:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 59 previous errors

