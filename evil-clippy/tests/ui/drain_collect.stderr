error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:6:1
   |
LL | fn binaryheap(b: &mut BinaryHeap<i32>) -> BinaryHeap<i32> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:6:1
   |
LL | fn binaryheap(b: &mut BinaryHeap<i32>) -> BinaryHeap<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:6:1
   |
LL | fn binaryheap(b: &mut BinaryHeap<i32>) -> BinaryHeap<i32> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:6:15
   |
LL | fn binaryheap(b: &mut BinaryHeap<i32>) -> BinaryHeap<i32> {
   |               ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:6:18
   |
LL | fn binaryheap(b: &mut BinaryHeap<i32>) -> BinaryHeap<i32> {
   |                  ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:11:1
   |
LL | fn binaryheap_dont_lint(b: &mut BinaryHeap<i32>) -> HashSet<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:11:1
   |
LL | fn binaryheap_dont_lint(b: &mut BinaryHeap<i32>) -> HashSet<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:11:1
   |
LL | fn binaryheap_dont_lint(b: &mut BinaryHeap<i32>) -> HashSet<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:11:25
   |
LL | fn binaryheap_dont_lint(b: &mut BinaryHeap<i32>) -> HashSet<i32> {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:11:28
   |
LL | fn binaryheap_dont_lint(b: &mut BinaryHeap<i32>) -> HashSet<i32> {
   |                            ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:15:1
   |
LL | fn hashmap(b: &mut HashMap<i32, i32>) -> HashMap<i32, i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:15:1
   |
LL | fn hashmap(b: &mut HashMap<i32, i32>) -> HashMap<i32, i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:15:1
   |
LL | fn hashmap(b: &mut HashMap<i32, i32>) -> HashMap<i32, i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:15:12
   |
LL | fn hashmap(b: &mut HashMap<i32, i32>) -> HashMap<i32, i32> {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:15:15
   |
LL | fn hashmap(b: &mut HashMap<i32, i32>) -> HashMap<i32, i32> {
   |               ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:20:1
   |
LL | fn hashmap_dont_lint(b: &mut HashMap<i32, i32>) -> Vec<(i32, i32)> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:20:1
   |
LL | fn hashmap_dont_lint(b: &mut HashMap<i32, i32>) -> Vec<(i32, i32)> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:20:1
   |
LL | fn hashmap_dont_lint(b: &mut HashMap<i32, i32>) -> Vec<(i32, i32)> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:20:22
   |
LL | fn hashmap_dont_lint(b: &mut HashMap<i32, i32>) -> Vec<(i32, i32)> {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:20:25
   |
LL | fn hashmap_dont_lint(b: &mut HashMap<i32, i32>) -> Vec<(i32, i32)> {
   |                         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:24:1
   |
LL | fn hashset(b: &mut HashSet<i32>) -> HashSet<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:24:1
   |
LL | fn hashset(b: &mut HashSet<i32>) -> HashSet<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:24:1
   |
LL | fn hashset(b: &mut HashSet<i32>) -> HashSet<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:24:12
   |
LL | fn hashset(b: &mut HashSet<i32>) -> HashSet<i32> {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:24:15
   |
LL | fn hashset(b: &mut HashSet<i32>) -> HashSet<i32> {
   |               ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:29:1
   |
LL | fn hashset_dont_lint(b: &mut HashSet<i32>) -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:29:1
   |
LL | fn hashset_dont_lint(b: &mut HashSet<i32>) -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:29:1
   |
LL | fn hashset_dont_lint(b: &mut HashSet<i32>) -> Vec<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:29:22
   |
LL | fn hashset_dont_lint(b: &mut HashSet<i32>) -> Vec<i32> {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:29:25
   |
LL | fn hashset_dont_lint(b: &mut HashSet<i32>) -> Vec<i32> {
   |                         ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:33:1
   |
LL | fn vecdeque(b: &mut VecDeque<i32>) -> VecDeque<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:33:1
   |
LL | fn vecdeque(b: &mut VecDeque<i32>) -> VecDeque<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:33:1
   |
LL | fn vecdeque(b: &mut VecDeque<i32>) -> VecDeque<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:33:13
   |
LL | fn vecdeque(b: &mut VecDeque<i32>) -> VecDeque<i32> {
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:33:16
   |
LL | fn vecdeque(b: &mut VecDeque<i32>) -> VecDeque<i32> {
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:38:1
   |
LL | fn vecdeque_dont_lint(b: &mut VecDeque<i32>) -> HashSet<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:38:1
   |
LL | fn vecdeque_dont_lint(b: &mut VecDeque<i32>) -> HashSet<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:38:1
   |
LL | fn vecdeque_dont_lint(b: &mut VecDeque<i32>) -> HashSet<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:38:23
   |
LL | fn vecdeque_dont_lint(b: &mut VecDeque<i32>) -> HashSet<i32> {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:38:26
   |
LL | fn vecdeque_dont_lint(b: &mut VecDeque<i32>) -> HashSet<i32> {
   |                          ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:42:1
   |
LL | fn vec(b: &mut Vec<i32>) -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:42:1
   |
LL | fn vec(b: &mut Vec<i32>) -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:42:1
   |
LL | fn vec(b: &mut Vec<i32>) -> Vec<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:42:8
   |
LL | fn vec(b: &mut Vec<i32>) -> Vec<i32> {
   |        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:42:11
   |
LL | fn vec(b: &mut Vec<i32>) -> Vec<i32> {
   |           ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:47:1
   |
LL | fn vec2(b: &mut Vec<i32>) -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:47:1
   |
LL | fn vec2(b: &mut Vec<i32>) -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:47:1
   |
LL | fn vec2(b: &mut Vec<i32>) -> Vec<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:47:9
   |
LL | fn vec2(b: &mut Vec<i32>) -> Vec<i32> {
   |         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:47:12
   |
LL | fn vec2(b: &mut Vec<i32>) -> Vec<i32> {
   |            ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:52:1
   |
LL | fn vec3(b: &mut Vec<i32>) -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:52:1
   |
LL | fn vec3(b: &mut Vec<i32>) -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:52:1
   |
LL | fn vec3(b: &mut Vec<i32>) -> Vec<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:52:9
   |
LL | fn vec3(b: &mut Vec<i32>) -> Vec<i32> {
   |         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:52:12
   |
LL | fn vec3(b: &mut Vec<i32>) -> Vec<i32> {
   |            ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:57:1
   |
LL | fn vec4(b: &mut Vec<i32>) -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:57:1
   |
LL | fn vec4(b: &mut Vec<i32>) -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:57:1
   |
LL | fn vec4(b: &mut Vec<i32>) -> Vec<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:57:9
   |
LL | fn vec4(b: &mut Vec<i32>) -> Vec<i32> {
   |         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:57:12
   |
LL | fn vec4(b: &mut Vec<i32>) -> Vec<i32> {
   |            ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:62:1
   |
LL | fn vec_no_reborrow() -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:62:1
   |
LL | fn vec_no_reborrow() -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:62:1
   |
LL | fn vec_no_reborrow() -> Vec<i32> {
   | ^

error: item must be `pub`
  --> tests/ui/drain_collect.rs:68:1
   |
LL | fn vec_dont_lint(b: &mut Vec<i32>) -> HashSet<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:68:1
   |
LL | fn vec_dont_lint(b: &mut Vec<i32>) -> HashSet<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:68:1
   |
LL | fn vec_dont_lint(b: &mut Vec<i32>) -> HashSet<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:68:18
   |
LL | fn vec_dont_lint(b: &mut Vec<i32>) -> HashSet<i32> {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:68:21
   |
LL | fn vec_dont_lint(b: &mut Vec<i32>) -> HashSet<i32> {
   |                     ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:72:1
   |
LL | fn string(b: &mut String) -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:72:1
   |
LL | fn string(b: &mut String) -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:72:1
   |
LL | fn string(b: &mut String) -> String {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:72:11
   |
LL | fn string(b: &mut String) -> String {
   |           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:72:14
   |
LL | fn string(b: &mut String) -> String {
   |              ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:77:1
   |
LL | fn string_dont_lint(b: &mut String) -> HashSet<char> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:77:1
   |
LL | fn string_dont_lint(b: &mut String) -> HashSet<char> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:77:1
   |
LL | fn string_dont_lint(b: &mut String) -> HashSet<char> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:77:21
   |
LL | fn string_dont_lint(b: &mut String) -> HashSet<char> {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:77:24
   |
LL | fn string_dont_lint(b: &mut String) -> HashSet<char> {
   |                        ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:81:1
   |
LL | fn not_whole_length(v: &mut Vec<i32>) -> Vec<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:81:1
   |
LL | fn not_whole_length(v: &mut Vec<i32>) -> Vec<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:81:1
   |
LL | fn not_whole_length(v: &mut Vec<i32>) -> Vec<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/drain_collect.rs:81:21
   |
LL | fn not_whole_length(v: &mut Vec<i32>) -> Vec<i32> {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/drain_collect.rs:81:24
   |
LL | fn not_whole_length(v: &mut Vec<i32>) -> Vec<i32> {
   |                        ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/drain_collect.rs:85:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/drain_collect.rs:85:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/drain_collect.rs:85:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: you seem to be trying to move all elements into a new `BinaryHeap`
  --> tests/ui/drain_collect.rs:7:5
   |
LL |     b.drain().collect()
   |     ^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`
   |
note: the lint level is defined here
  --> tests/ui/drain_collect.rs:1:9
   |
LL | #![deny(clippy::drain_collect)]
   |         ^^^^^^^^^^^^^^^^^^^^^

error: you seem to be trying to move all elements into a new `HashMap`
  --> tests/ui/drain_collect.rs:16:5
   |
LL |     b.drain().collect()
   |     ^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `HashSet`
  --> tests/ui/drain_collect.rs:25:5
   |
LL |     b.drain().collect()
   |     ^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `Vec`
  --> tests/ui/drain_collect.rs:34:5
   |
LL |     b.drain(..).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `Vec`
  --> tests/ui/drain_collect.rs:43:5
   |
LL |     b.drain(..).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `Vec`
  --> tests/ui/drain_collect.rs:48:5
   |
LL |     b.drain(0..).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `Vec`
  --> tests/ui/drain_collect.rs:53:5
   |
LL |     b.drain(..b.len()).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `Vec`
  --> tests/ui/drain_collect.rs:58:5
   |
LL |     b.drain(0..b.len()).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: you seem to be trying to move all elements into a new `Vec`
  --> tests/ui/drain_collect.rs:64:5
   |
LL |     b.drain(..).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(&mut b)`

error: you seem to be trying to move all elements into a new `String`
  --> tests/ui/drain_collect.rs:73:5
   |
LL |     b.drain(..).collect()
   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `mem::take`: `std::mem::take(b)`

error: aborting due to 82 previous errors

