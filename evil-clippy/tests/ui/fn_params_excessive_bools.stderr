error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:6:5
   |
LL |     fn f(_: bool, _: bool, _: bool, _: bool);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:6:5
   |
LL |     fn f(_: bool, _: bool, _: bool, _: bool);
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:9:1
   |
LL | macro_rules! foo {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:11:9
   |
LL |         fn fff(_: bool, _: bool, _: bool, _: bool) {}
   |         ^ help: make this item public: `pub`
...
LL | foo!();
   | ------ in this macro invocation
   |
   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:11:9
   |
LL |         fn fff(_: bool, _: bool, _: bool, _: bool) {}
   |         ^
...
LL | foo!();
   | ------ in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:11:9
   |
LL |         fn fff(_: bool, _: bool, _: bool, _: bool) {}
   |         ^
...
LL | foo!();
   | ------ in this macro invocation
   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:18:1
   |
LL | unsafe extern "C" fn k(_: bool, _: bool, _: bool, _: bool) {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:19:1
   |
LL | fn g(_: bool, _: bool, _: bool, _: bool) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:19:1
   |
LL | fn g(_: bool, _: bool, _: bool, _: bool) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:19:1
   |
LL | fn g(_: bool, _: bool, _: bool, _: bool) {}
   | ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:21:1
   |
LL | fn h(_: bool, _: bool, _: bool) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:21:1
   |
LL | fn h(_: bool, _: bool, _: bool) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:21:1
   |
LL | fn h(_: bool, _: bool, _: bool) {}
   | ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:22:1
   |
LL | fn e(_: S, _: S, _: Box<S>, _: Vec<u32>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:22:1
   |
LL | fn e(_: S, _: S, _: Box<S>, _: Vec<u32>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:22:1
   |
LL | fn e(_: S, _: S, _: Box<S>, _: Vec<u32>) {}
   | ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:23:1
   |
LL | fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:23:1
   |
LL | fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:23:1
   |
LL | fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}
   | ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:26:1
   |
LL | struct S;
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:27:1
   |
LL | / trait Trait {
LL | |     // should warn for trait functions with and without body
LL | |     fn f(_: bool, _: bool, _: bool, _: bool);
...  |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:27:1
   |
LL | trait Trait {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:29:5
   |
LL |     fn f(_: bool, _: bool, _: bool, _: bool);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:29:5
   |
LL |     fn f(_: bool, _: bool, _: bool, _: bool);
   |     ^

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:31:5
   |
LL |     fn g(_: bool, _: bool, _: bool, _: Vec<u32>);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:31:5
   |
LL |     fn g(_: bool, _: bool, _: bool, _: Vec<u32>);
   |     ^

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:33:5
   |
LL |     fn h(_: bool, _: bool, _: bool, _: bool, _: bool, _: bool);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:33:5
   |
LL |     fn h(_: bool, _: bool, _: bool, _: bool, _: bool, _: bool);
   |     ^

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:34:5
   |
LL |     fn i(_: bool, _: bool, _: bool, _: bool) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:34:5
   |
LL |     fn i(_: bool, _: bool, _: bool, _: bool) {}
   |     ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:38:1
   |
LL | impl S {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:39:5
   |
LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:39:5
   |
LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/fn_params_excessive_bools.rs:39:11
   |
LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}
   |           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/fn_params_excessive_bools.rs:39:10
   |
LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:41:5
   |
LL |     fn g(&self, _: bool, _: bool, _: bool) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:41:5
   |
LL |     fn g(&self, _: bool, _: bool, _: bool) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/fn_params_excessive_bools.rs:41:11
   |
LL |     fn g(&self, _: bool, _: bool, _: bool) {}
   |           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/fn_params_excessive_bools.rs:41:10
   |
LL |     fn g(&self, _: bool, _: bool, _: bool) {}
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:46:1
   |
LL | impl Trait for S {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:49:5
   |
LL |     fn f(_: bool, _: bool, _: bool, _: bool) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:49:5
   |
LL |     fn f(_: bool, _: bool, _: bool, _: bool) {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:50:5
   |
LL |     fn g(_: bool, _: bool, _: bool, _: Vec<u32>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:50:5
   |
LL |     fn g(_: bool, _: bool, _: bool, _: Vec<u32>) {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:51:5
   |
LL |     fn h(_: bool, _: bool, _: bool, _: bool, _: bool, _: bool) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:51:5
   |
LL |     fn h(_: bool, _: bool, _: bool, _: bool, _: bool, _: bool) {}
   |     ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:54:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:54:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:54:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:55:5
   |
LL |     fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:55:5
   |
LL |     fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:55:5
   |
LL |     fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {
   |     ^

error: item must be `pub`
  --> tests/ui/fn_params_excessive_bools.rs:57:9
   |
LL |         fn nn(_: bool, _: bool, _: bool, _: bool) {}
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:57:9
   |
LL |         fn nn(_: bool, _: bool, _: bool, _: bool) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/fn_params_excessive_bools.rs:57:9
   |
LL |         fn nn(_: bool, _: bool, _: bool, _: bool) {}
   |         ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 41 previous errors

