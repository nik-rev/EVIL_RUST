error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/single_match.rs:11:1
   |
LL | fn dummy() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:11:1
   |
LL | fn dummy() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:11:1
   |
LL | fn dummy() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/single_match.rs:13:1
   |
LL | fn single_match() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:13:1
   |
LL | fn single_match() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:13:1
   |
LL | fn single_match() {
   | ^

error: variable must be `mut`
  --> tests/ui/single_match.rs:14:9
   |
LL |     let x = Some(1u8);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:24:9
   |
LL |     let x = Some(1u8);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:35:9
   |
LL |     let z = (1u8, 1u8);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:55:1
   |
LL | enum Foo {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:62:1
   |
LL | fn single_match_know_enum() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:62:1
   |
LL | fn single_match_know_enum() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:62:1
   |
LL | fn single_match_know_enum() {
   | ^

error: variable must be `mut`
  --> tests/ui/single_match.rs:63:9
   |
LL |     let x = Some(1u8);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:64:9
   |
LL |     let y: Result<_, i8> = Ok(1i8);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:78:9
   |
LL |     let c = Cow::Borrowed("");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:86:9
   |
LL |     let z = Foo::Bar;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:100:1
   |
LL | fn if_suggestion() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:100:1
   |
LL | fn if_suggestion() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:100:1
   |
LL | fn if_suggestion() {
   | ^

error: variable must be `mut`
  --> tests/ui/single_match.rs:101:9
   |
LL |     let x = "test";
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:109:5
   |
LL |     enum Foo {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^

error: item must be `pub`
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:108:11
   |
LL |     #[derive(PartialEq, Eq)]
   |           ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:108:11
   |
LL |     #[derive(PartialEq, Eq)]
   |           ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^

error: references are not allowed
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: variable must be `mut`
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^

error: variable must be `mut`
  --> tests/ui/single_match.rs:108:14
   |
LL |     #[derive(PartialEq, Eq)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/single_match.rs:108:25
   |
LL |     #[derive(PartialEq, Eq)]
   |                         ^

error: function must be `unsafe`
  --> tests/ui/single_match.rs:108:22
   |
LL |     #[derive(PartialEq, Eq)]
   |                      ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:108:22
   |
LL |     #[derive(PartialEq, Eq)]
   |                      ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/single_match.rs:108:25
   |
LL |     #[derive(PartialEq, Eq)]
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:108:25
   |
LL |     #[derive(PartialEq, Eq)]
   |                         ^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/single_match.rs:115:9
   |
LL |     let x = Foo::A;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:122:5
   |
LL |     const FOO_C: Foo = Foo::C(0);
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/single_match.rs:129:11
   |
LL |     match &&x {
   |           ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/single_match.rs:129:12
   |
LL |     match &&x {
   |            ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/single_match.rs:135:9
   |
LL |     let x = &x;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:135:13
   |
LL |     let x = &x;
   |             ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/single_match.rs:136:11
   |
LL |     match &x {
   |           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/single_match.rs:142:5
   |
LL |     enum Bar {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:146:5
   |
LL |     impl PartialEq for Bar {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:147:9
   |
LL |         fn eq(&self, rhs: &Self) -> bool {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:147:9
   |
LL |         fn eq(&self, rhs: &Self) -> bool {
   |         ^

error: parameter must be `mut`
  --> tests/ui/single_match.rs:147:16
   |
LL |         fn eq(&self, rhs: &Self) -> bool {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/single_match.rs:147:22
   |
LL |         fn eq(&self, rhs: &Self) -> bool {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:147:15
   |
LL |         fn eq(&self, rhs: &Self) -> bool {
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/single_match.rs:147:27
   |
LL |         fn eq(&self, rhs: &Self) -> bool {
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/single_match.rs:151:5
   |
LL |     impl Eq for Bar {}
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/single_match.rs:153:9
   |
LL |     let x = Bar::A;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:161:5
   |
LL |     struct X;
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/single_match.rs:162:9
   |
LL |     let x = Some(X);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:171:1
   |
LL | fn ranges() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:171:1
   |
LL | fn ranges() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:171:1
   |
LL | fn ranges() {
   | ^

error: item must be `pub`
  --> tests/ui/single_match.rs:172:5
   |
LL |     enum E {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/single_match.rs:175:9
   |
LL |     let x = (Some(E::V), Some(42));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:225:1
   |
LL | fn skip_type_aliases() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:225:1
   |
LL | fn skip_type_aliases() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:225:1
   |
LL | fn skip_type_aliases() {
   | ^

error: item must be `pub`
  --> tests/ui/single_match.rs:226:5
   |
LL |     enum OptionEx {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:230:5
   |
LL |     enum ResultEx {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:251:1
   |
LL | macro_rules! single_match {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:260:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:260:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:260:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/single_match.rs:272:1
   |
LL | fn issue_10808(bar: Option<i32>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:272:1
   |
LL | fn issue_10808(bar: Option<i32>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:272:1
   |
LL | fn issue_10808(bar: Option<i32>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/single_match.rs:272:16
   |
LL | fn issue_10808(bar: Option<i32>) {
   |                ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:275:17
   |
LL |             let r = &v as *const i32;
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:275:21
   |
LL |             let r = &v as *const i32;
   |                     ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/single_match.rs:286:21
   |
LL |                 let r = &v as *const i32;
   |                     ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:286:25
   |
LL |                 let r = &v as *const i32;
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/single_match.rs:295:1
   |
LL | mod issue8634 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:296:5
   |
LL |     struct SomeError(i32, i32);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:298:5
   |
LL |     fn foo(x: Result<i32, ()>) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:298:5
   |
LL |     fn foo(x: Result<i32, ()>) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:298:5
   |
LL |     fn foo(x: Result<i32, ()>) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/single_match.rs:298:12
   |
LL |     fn foo(x: Result<i32, ()>) {
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:309:5
   |
LL |     fn bar(x: Result<i32, SomeError>) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:309:5
   |
LL |     fn bar(x: Result<i32, SomeError>) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:309:5
   |
LL |     fn bar(x: Result<i32, SomeError>) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/single_match.rs:309:12
   |
LL |     fn bar(x: Result<i32, SomeError>) {
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:320:5
   |
LL |     fn block_comment(x: Result<i32, SomeError>) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:320:5
   |
LL |     fn block_comment(x: Result<i32, SomeError>) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:320:5
   |
LL |     fn block_comment(x: Result<i32, SomeError>) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/single_match.rs:320:22
   |
LL |     fn block_comment(x: Result<i32, SomeError>) {
   |                      ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:335:1
   |
LL | fn issue11365() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:335:1
   |
LL | fn issue11365() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:335:1
   |
LL | fn issue11365() {
   | ^

error: item must be `pub`
  --> tests/ui/single_match.rs:336:5
   |
LL |     enum Foo {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/single_match.rs:369:11
   |
LL |     match &Some(A) {
   |           ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/single_match.rs:374:11
   |
LL |     match &Some(A) {
   |           ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/single_match.rs:379:11
   |
LL |     match &Some(A) {
   |           ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/single_match.rs:386:1
   |
LL | fn issue12758(s: &[u8]) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:386:1
   |
LL | fn issue12758(s: &[u8]) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:386:1
   |
LL | fn issue12758(s: &[u8]) {
   | ^

error: parameter must be `mut`
  --> tests/ui/single_match.rs:386:15
   |
LL | fn issue12758(s: &[u8]) {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:386:18
   |
LL | fn issue12758(s: &[u8]) {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/single_match.rs:387:11
   |
LL |     match &s[0..3] {
   |           ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/single_match.rs:394:10
   |
LL | #[derive(Eq, PartialEq)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/single_match.rs:394:7
   |
LL | #[derive(Eq, PartialEq)]
   |       ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:394:7
   |
LL | #[derive(Eq, PartialEq)]
   |       ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/single_match.rs:394:10
   |
LL | #[derive(Eq, PartialEq)]
   |          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/single_match.rs:394:10
   |
LL | #[derive(Eq, PartialEq)]
   |          ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/single_match.rs:394:14
   |
LL | #[derive(Eq, PartialEq)]
   |              ^

error: item must be `pub`
  --> tests/ui/single_match.rs:394:14
   |
LL | #[derive(Eq, PartialEq)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:394:11
   |
LL | #[derive(Eq, PartialEq)]
   |           ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:394:11
   |
LL | #[derive(Eq, PartialEq)]
   |           ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/single_match.rs:394:14
   |
LL | #[derive(Eq, PartialEq)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/single_match.rs:394:14
   |
LL | #[derive(Eq, PartialEq)]
   |              ^

error: references are not allowed
  --> tests/ui/single_match.rs:394:14
   |
LL | #[derive(Eq, PartialEq)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/single_match.rs:394:14
   |
LL | #[derive(Eq, PartialEq)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/single_match.rs:397:1
   |
LL | const DATA: Data = Data([1, 2, 3, 4]);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:398:1
   |
LL | const CONST_I32: i32 = 1;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/single_match.rs:400:1
   |
LL | fn irrefutable_match() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:400:1
   |
LL | fn irrefutable_match() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:400:1
   |
LL | fn irrefutable_match() {
   | ^

error: variable must be `mut`
  --> tests/ui/single_match.rs:413:9
   |
LL |     let i = 0;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:416:17
   |
LL |             let a = 1;
   |                 ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/single_match.rs:417:17
   |
LL |             let b = 2;
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/single_match.rs:465:1
   |
LL | fn issue_14493() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/single_match.rs:465:1
   |
LL | fn issue_14493() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/single_match.rs:465:1
   |
LL | fn issue_14493() {
   | ^

error: item must be `pub`
  --> tests/ui/single_match.rs:466:5
   |
LL |     macro_rules! mac {
   |     ^ help: make this item public: `pub`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 114 previous errors

