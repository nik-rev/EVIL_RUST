error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/exhaustive_items.rs:4:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/exhaustive_items.rs:4:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/exhaustive_items.rs:4:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/exhaustive_items.rs:37:5
   |
LL |     enum ExhaustivePrivate {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/exhaustive_items.rs:46:5
   |
LL |     enum NonExhaustivePrivate {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/exhaustive_items.rs:78:5
   |
LL |     struct ExhaustivePrivate {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/exhaustive_items.rs:85:5
   |
LL |     struct NonExhaustivePrivate {
   |     ^ help: make this item public: `pub`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: exported enums should not be exhaustive
  --> tests/ui/exhaustive_items.rs:9:5
   |
LL | /     pub enum Exhaustive {
LL | |
LL | |         Foo,
LL | |         Bar,
LL | |         Baz,
LL | |         Quux(String),
LL | |     }
   | |_____^
   |
note: the lint level is defined here
  --> tests/ui/exhaustive_items.rs:1:9
   |
LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
help: try adding #[non_exhaustive]
   |
LL ~     #[non_exhaustive]
LL ~     pub enum Exhaustive {
   |

error: exported enums should not be exhaustive
  --> tests/ui/exhaustive_items.rs:19:5
   |
LL | /     pub enum ExhaustiveWithAttrs {
LL | |
LL | |         Foo,
LL | |         Bar,
LL | |         Baz,
LL | |         Quux(String),
LL | |     }
   | |_____^
   |
help: try adding #[non_exhaustive]
   |
LL ~     #[non_exhaustive]
LL ~     pub enum ExhaustiveWithAttrs {
   |

error: exported structs should not be exhaustive
  --> tests/ui/exhaustive_items.rs:55:5
   |
LL | /     pub struct Exhaustive {
LL | |
LL | |         pub foo: u8,
LL | |         pub bar: String,
LL | |     }
   | |_____^
   |
note: the lint level is defined here
  --> tests/ui/exhaustive_items.rs:1:35
   |
LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: try adding #[non_exhaustive]
   |
LL ~     #[non_exhaustive]
LL ~     pub struct Exhaustive {
   |

error: aborting due to 13 previous errors

