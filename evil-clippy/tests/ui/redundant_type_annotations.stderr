error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:5:1
   |
LL | struct Cake<T> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:4:10
   |
LL | #[derive(Debug, Default)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:4:7
   |
LL | #[derive(Debug, Default)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:4:7
   |
LL | #[derive(Debug, Default)]
   |       ^  ----- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:4:10
   |
LL | #[derive(Debug, Default)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:4:10
   |
LL | #[derive(Debug, Default)]
   |          ^

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:4:10
   |
LL | #[derive(Debug, Default)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:4:10
   |
LL | #[derive(Debug, Default)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:6:5
   |
LL | #[derive(Debug, Default)]
   |          ----- in this derive macro expansion
LL | struct Cake<T> {
LL |     _data: T,
   |     ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:6:5
   |
LL | #[derive(Debug, Default)]
   |          ----- in this derive macro expansion
LL | struct Cake<T> {
LL |     _data: T,
   |     ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:4:17
   |
LL | #[derive(Debug, Default)]
   |                 ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:4:14
   |
LL | #[derive(Debug, Default)]
   |              ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:4:14
   |
LL | #[derive(Debug, Default)]
   |              ^  ------- in this derive macro expansion

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:9:1
   |
LL | fn make_something<T>() -> T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:9:1
   |
LL | fn make_something<T>() -> T {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:9:1
   |
LL | fn make_something<T>() -> T {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:13:1
   |
LL | fn make_cake<T: Default>() -> Cake<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:13:1
   |
LL | fn make_cake<T: Default>() -> Cake<T> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:13:1
   |
LL | fn make_cake<T: Default>() -> Cake<T> {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:17:1
   |
LL | fn plus_one<T: std::ops::Add<u8, Output = T>>(val: T) -> T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:17:1
   |
LL | fn plus_one<T: std::ops::Add<u8, Output = T>>(val: T) -> T {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:17:1
   |
LL | fn plus_one<T: std::ops::Add<u8, Output = T>>(val: T) -> T {
   | ^

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:17:47
   |
LL | fn plus_one<T: std::ops::Add<u8, Output = T>>(val: T) -> T {
   |                                               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:22:1
   |
LL | struct Slice {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:21:10
   |
LL | #[derive(Default)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:21:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:21:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:27:1
   |
LL | struct Pie {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:26:10
   |
LL | #[derive(Default)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:26:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:26:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:32:1
   |
LL | enum Pizza {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:37:1
   |
LL | fn return_a_string() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:37:1
   |
LL | fn return_a_string() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:37:1
   |
LL | fn return_a_string() -> String {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:41:1
   |
LL | fn return_a_struct() -> Pie {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:41:1
   |
LL | fn return_a_struct() -> Pie {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:41:1
   |
LL | fn return_a_struct() -> Pie {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:45:1
   |
LL | fn return_an_enum() -> Pizza {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:45:1
   |
LL | fn return_an_enum() -> Pizza {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:45:1
   |
LL | fn return_an_enum() -> Pizza {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:49:1
   |
LL | fn return_an_int() -> u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:49:1
   |
LL | fn return_an_int() -> u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:49:1
   |
LL | fn return_an_int() -> u32 {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:53:1
   |
LL | impl Pie {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:54:5
   |
LL |     fn return_an_int(&self) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:54:5
   |
LL |     fn return_an_int(&self) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:54:23
   |
LL |     fn return_an_int(&self) -> u32 {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:54:22
   |
LL |     fn return_an_int(&self) -> u32 {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:58:5
   |
LL |     fn return_a_ref(&self) -> &u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:58:5
   |
LL |     fn return_a_ref(&self) -> &u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:58:22
   |
LL |     fn return_a_ref(&self) -> &u32 {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:58:21
   |
LL |     fn return_a_ref(&self) -> &u32 {
   |                     ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:58:31
   |
LL |     fn return_a_ref(&self) -> &u32 {
   |                               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:59:9
   |
LL |         &self.inner
   |         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:62:5
   |
LL |     fn return_a_ref_to_struct(&self) -> &Slice {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:62:5
   |
LL |     fn return_a_ref_to_struct(&self) -> &Slice {
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:62:32
   |
LL |     fn return_a_ref_to_struct(&self) -> &Slice {
   |                                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:62:31
   |
LL |     fn return_a_ref_to_struct(&self) -> &Slice {
   |                               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:62:41
   |
LL |     fn return_a_ref_to_struct(&self) -> &Slice {
   |                                         ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:63:9
   |
LL |         &self.inner_struct
   |         ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:66:5
   |
LL |     fn associated_return_an_int() -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:66:5
   |
LL |     fn associated_return_an_int() -> u32 {
   |     ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:70:5
   |
LL |     fn new() -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:70:5
   |
LL |     fn new() -> Self {
   |     ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:74:5
   |
LL |     fn associated_return_a_string() -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:74:5
   |
LL |     fn associated_return_a_string() -> String {
   |     ^

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:78:5
   |
LL |     fn test_method_call(&self) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:78:5
   |
LL |     fn test_method_call(&self) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:78:26
   |
LL |     fn test_method_call(&self) {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:78:25
   |
LL |     fn test_method_call(&self) {
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:81:13
   |
LL |         let v: u32 = self.return_an_int();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:84:13
   |
LL |         let v: &u32 = self.return_a_ref();
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:84:16
   |
LL |         let v: &u32 = self.return_a_ref();
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:87:13
   |
LL |         let v: &Slice = self.return_a_ref_to_struct();
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:87:16
   |
LL |         let v: &Slice = self.return_a_ref_to_struct();
   |                ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:92:1
   |
LL | fn test_generics() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:92:1
   |
LL | fn test_generics() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:92:1
   |
LL | fn test_generics() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:94:9
   |
LL |     let _c: Cake<i32> = make_something();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:97:9
   |
LL |     let _c: Cake<u8> = make_cake();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:100:9
   |
LL |     let _c: Cake<u8> = make_cake::<u8>();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:103:9
   |
LL |     let _c: u8 = make_something::<u8>();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:106:9
   |
LL |     let _c: u8 = plus_one(5_u8);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:109:9
   |
LL |     let _c: u8 = plus_one(5);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:112:9
   |
LL |     let _return: String = String::from("test");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:115:1
   |
LL | fn test_non_locals() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:115:1
   |
LL | fn test_non_locals() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:115:1
   |
LL | fn test_non_locals() {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:117:5
   |
LL |     fn _arg(x: u32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:117:5
   |
LL |     fn _arg(x: u32) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:117:5
   |
LL |     fn _arg(x: u32) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_type_annotations.rs:117:13
   |
LL |     fn _arg(x: u32) -> u32 {
   |             ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:122:9
   |
LL |     let _closure_arg = |x: u32| x;
   |         ^ help: make this variable mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:125:1
   |
LL | / trait Trait {
LL | |     type AssocTy;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:125:1
   |
LL | trait Trait {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:129:1
   |
LL | impl Trait for () {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:133:1
   |
LL | fn test_complex_types<T>() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:133:1
   |
LL | fn test_complex_types<T>() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:133:1
   |
LL | fn test_complex_types<T>() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:135:9
   |
LL |     let _u8: u8 = 128;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:138:9
   |
LL |     let _tuple_i32: (i32, i32) = (12, 13);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:141:9
   |
LL |     let _tuple_u32: (u32, u32) = (1, 2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:144:9
   |
LL |     let _tuple_u32: (u32, u32) = (3_u32, 4_u32);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:147:9
   |
LL |     let _array: [i32; 3] = [5, 6, 7];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:150:9
   |
LL |     let _array: [u32; 2] = [8, 9];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:152:9
   |
LL |     let ty_param: T = make_something();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:154:9
   |
LL |     let assoc_ty: <() as Trait>::AssocTy = String::new();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:157:1
   |
LL | fn test_functions() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:157:1
   |
LL | fn test_functions() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:157:1
   |
LL | fn test_functions() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:160:9
   |
LL |     let _return: String = return_a_string();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:163:9
   |
LL |     let _return: Pie = return_a_struct();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:166:9
   |
LL |     let _return: Pizza = return_an_enum();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:169:9
   |
LL |     let _return: u32 = return_an_int();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:172:9
   |
LL |     let _return: String = String::new();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:175:9
   |
LL |     let new_pie: Pie = Pie::new();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:178:9
   |
LL |     let _return: u32 = new_pie.return_an_int();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:181:9
   |
LL |     let _return: u32 = Pie::associated_return_an_int();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:184:9
   |
LL |     let _return: String = Pie::associated_return_a_string();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:188:1
   |
LL | fn test_simple_types() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:188:1
   |
LL | fn test_simple_types() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:188:1
   |
LL | fn test_simple_types() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:191:9
   |
LL |     let _var: u32 = u32::MAX;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:194:9
   |
LL |     let _var: u32 = 5_u32;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:197:9
   |
LL |     let _var: &str = "test";
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:197:15
   |
LL |     let _var: &str = "test";
   |               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:200:9
   |
LL |     let _var: &[u8; 4] = b"test";
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:200:15
   |
LL |     let _var: &[u8; 4] = b"test";
   |               ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:203:9
   |
LL |     let _var: bool = false;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:207:1
   |
LL | fn issue12212() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:207:1
   |
LL | fn issue12212() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:207:1
   |
LL | fn issue12212() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_type_annotations.rs:209:9
   |
LL |     let _var: &[u8] = b"test";
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_type_annotations.rs:209:15
   |
LL |     let _var: &[u8] = b"test";
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:212:1
   |
LL | fn issue11190() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:212:1
   |
LL | fn issue11190() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:212:1
   |
LL | fn issue11190() {}
   | ^

error: item must be `pub`
  --> tests/ui/redundant_type_annotations.rs:214:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_type_annotations.rs:214:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_type_annotations.rs:214:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 118 previous errors

