error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:9:1
   |
LL | fn func1(a: bool, b: bool) -> Option<i32> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:9:1
   |
LL | fn func1(a: bool, b: bool) -> Option<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:9:1
   |
LL | fn func1(a: bool, b: bool) -> Option<i32> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:9:10
   |
LL | fn func1(a: bool, b: bool) -> Option<i32> {
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:9:19
   |
LL | fn func1(a: bool, b: bool) -> Option<i32> {
   |                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:24:1
   |
LL | fn func2(a: bool, b: bool) -> Option<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:24:1
   |
LL | fn func2(a: bool, b: bool) -> Option<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:24:1
   |
LL | fn func2(a: bool, b: bool) -> Option<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:24:10
   |
LL | fn func2(a: bool, b: bool) -> Option<i32> {
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:24:19
   |
LL | fn func2(a: bool, b: bool) -> Option<i32> {
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:34:5
   |
LL | pub fn func3(a: bool) -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:34:5
   |
LL | pub fn func3(a: bool) -> Option<i32> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:34:14
   |
LL | pub fn func3(a: bool) -> Option<i32> {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:39:1
   |
LL | fn func4(a: bool) -> Option<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:39:1
   |
LL | fn func4(a: bool) -> Option<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:39:1
   |
LL | fn func4(a: bool) -> Option<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:39:10
   |
LL | fn func4(a: bool) -> Option<i32> {
   |          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:44:1
   |
LL | fn func5() -> Option<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:44:1
   |
LL | fn func5() -> Option<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:44:1
   |
LL | fn func5() -> Option<i32> {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:51:1
   |
LL | fn func6() -> Option<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:51:1
   |
LL | fn func6() -> Option<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:51:1
   |
LL | fn func6() -> Option<i32> {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:56:1
   |
LL | fn func7() -> Result<i32, ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:56:1
   |
LL | fn func7() -> Result<i32, ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:56:1
   |
LL | fn func7() -> Result<i32, ()> {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:63:1
   |
LL | fn func8(a: bool) -> Result<i32, ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:63:1
   |
LL | fn func8(a: bool) -> Result<i32, ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:63:1
   |
LL | fn func8(a: bool) -> Result<i32, ()> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:63:10
   |
LL | fn func8(a: bool) -> Result<i32, ()> {
   |          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:68:1
   |
LL | fn func9(a: bool) -> Result<i32, ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:68:1
   |
LL | fn func9(a: bool) -> Result<i32, ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:68:1
   |
LL | fn func9(a: bool) -> Result<i32, ()> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:68:10
   |
LL | fn func9(a: bool) -> Result<i32, ()> {
   |          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:73:1
   |
LL | fn func10() -> Option<()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:73:1
   |
LL | fn func10() -> Option<()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:73:1
   |
LL | fn func10() -> Option<()> {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:79:1
   |
LL | impl A {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:81:9
   |
LL |     pub fn func11() -> Option<i32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:81:9
   |
LL |     pub fn func11() -> Option<i32> {
   |         ^

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:86:5
   |
LL |     fn func12() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:86:5
   |
LL |     fn func12() -> Option<i32> {
   |     ^

error: trait must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:93:1
   |
LL | / trait B {
LL | |     // trait impls are not linted
LL | |     fn func13() -> Option<i32> {
LL | |         Some(1)
LL | |     }
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:93:1
   |
LL | trait B {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:95:5
   |
LL |     fn func13() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:95:5
   |
LL |     fn func13() -> Option<i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:100:1
   |
LL | impl B for A {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:102:5
   |
LL |     fn func13() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:102:5
   |
LL |     fn func13() -> Option<i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:107:1
   |
LL | fn issue_6384(s: &str) -> Option<&str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:107:1
   |
LL | fn issue_6384(s: &str) -> Option<&str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:107:1
   |
LL | fn issue_6384(s: &str) -> Option<&str> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:107:15
   |
LL | fn issue_6384(s: &str) -> Option<&str> {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_wraps.rs:107:18
   |
LL | fn issue_6384(s: &str) -> Option<&str> {
   |                  ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/unnecessary_wraps.rs:107:34
   |
LL | fn issue_6384(s: &str) -> Option<&str> {
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:115:1
   |
LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:115:1
   |
LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:115:1
   |
LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:115:17
   |
LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {
   |                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:115:26
   |
LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {
   |                          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:130:1
   |
LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:130:1
   |
LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:130:1
   |
LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:130:17
   |
LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {
   |                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/unnecessary_wraps.rs:130:26
   |
LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {
   |                          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:144:1
   |
LL | fn issue_6640_3() -> Option<()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:144:1
   |
LL | fn issue_6640_3() -> Option<()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:144:1
   |
LL | fn issue_6640_3() -> Option<()> {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:149:1
   |
LL | fn issue_6640_4() -> Result<(), ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:149:1
   |
LL | fn issue_6640_4() -> Result<(), ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:149:1
   |
LL | fn issue_6640_4() -> Result<(), ()> {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_wraps.rs:153:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_wraps.rs:153:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_wraps.rs:153:1
   |
LL | fn main() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 58 previous errors

