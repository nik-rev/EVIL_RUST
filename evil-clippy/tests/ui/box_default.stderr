error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/box_default.rs:5:1
   |
LL | struct ImplementsDefault;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:4:10
   |
LL | #[derive(Default)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/box_default.rs:4:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:4:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/box_default.rs:7:1
   |
LL | struct OwnDefault;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:9:1
   |
LL | impl OwnDefault {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:10:5
   |
LL |     fn default() -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:10:5
   |
LL |     fn default() -> Self {
   |     ^

error: item must be `pub`
  --> tests/ui/box_default.rs:15:1
   |
LL | macro_rules! default {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:21:1
   |
LL | macro_rules! string_new {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:27:1
   |
LL | macro_rules! box_new {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:33:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:33:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:33:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/box_default.rs:34:9
   |
LL |     let string1: Box<String> = Box::new(Default::default());
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:36:9
   |
LL |     let string2: Box<String> = Box::new(String::new());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:38:9
   |
LL |     let impl1: Box<ImplementsDefault> = Box::new(Default::default());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:40:9
   |
LL |     let vec: Box<Vec<u8>> = Box::new(Vec::new());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:42:9
   |
LL |     let byte: Box<u8> = Box::new(u8::default());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:44:9
   |
LL |     let vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:46:9
   |
LL |     let vec3: Box<Vec<bool>> = Box::new(Vec::from([]));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:49:9
   |
LL |     let plain_default = Box::new(Default::default());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:60:9
   |
LL |     let own: Box<OwnDefault> = Box::new(OwnDefault::default()); // should not lint
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:63:9
   |
LL |     let impl2 = Box::new(ImplementsDefault::default());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:64:9
   |
LL |     let impl3 = Box::new(<ImplementsDefault as Default>::default());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:65:9
   |
LL |     let vec4: Box<_> = Box::new(Vec::from([false; 0]));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:66:9
   |
LL |     let more = ret_ty_fn();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/box_default.rs:81:1
   |
LL | fn ret_ty_fn() -> Box<bool> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:81:1
   |
LL | fn ret_ty_fn() -> Box<bool> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:81:1
   |
LL | fn ret_ty_fn() -> Box<bool> {
   | ^

error: item must be `pub`
  --> tests/ui/box_default.rs:85:1
   |
LL | fn call_ty_fn(_b: Box<u8>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:85:1
   |
LL | fn call_ty_fn(_b: Box<u8>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:85:1
   |
LL | fn call_ty_fn(_b: Box<u8>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/box_default.rs:85:15
   |
LL | fn call_ty_fn(_b: Box<u8>) {
   |               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/box_default.rs:89:1
   |
LL | struct X<T>(T);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:91:1
   |
LL | impl<T: Default> X<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:92:5
   |
LL |     fn x(_: Box<T>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:92:5
   |
LL |     fn x(_: Box<T>) {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/box_default.rs:94:5
   |
LL |     fn same_generic_param() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:94:5
   |
LL |     fn same_generic_param() {
   |     ^

error: item must be `pub`
  --> tests/ui/box_default.rs:102:1
   |
LL | impl Read for ImplementsDefault {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:103:5
   |
LL |     fn read(&mut self, _: &mut [u8]) -> Result<usize> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:103:5
   |
LL |     fn read(&mut self, _: &mut [u8]) -> Result<usize> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/box_default.rs:103:18
   |
LL |     fn read(&mut self, _: &mut [u8]) -> Result<usize> {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/box_default.rs:103:13
   |
LL |     fn read(&mut self, _: &mut [u8]) -> Result<usize> {
   |             ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/box_default.rs:103:27
   |
LL |     fn read(&mut self, _: &mut [u8]) -> Result<usize> {
   |                           ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/box_default.rs:108:1
   |
LL | fn issue_9621_dyn_trait() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:108:1
   |
LL | fn issue_9621_dyn_trait() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:108:1
   |
LL | fn issue_9621_dyn_trait() {
   | ^

error: item must be `pub`
  --> tests/ui/box_default.rs:113:1
   |
LL | fn issue_10089() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:113:1
   |
LL | fn issue_10089() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:113:1
   |
LL | fn issue_10089() {
   | ^

error: variable must be `mut`
  --> tests/ui/box_default.rs:114:9
   |
LL |     let _closure = || {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/box_default.rs:116:9
   |
LL |         struct WeirdPathed;
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:115:18
   |
LL |         #[derive(Default)]
   |                  ^

error: function must be `unsafe`
  --> tests/ui/box_default.rs:115:15
   |
LL |         #[derive(Default)]
   |               ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:115:15
   |
LL |         #[derive(Default)]
   |               ^  ------- in this derive macro expansion

error: item must be `pub`
  --> tests/ui/box_default.rs:122:1
   |
LL | fn issue_10381() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:122:1
   |
LL | fn issue_10381() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:122:1
   |
LL | fn issue_10381() {
   | ^

error: item must be `pub`
  --> tests/ui/box_default.rs:123:14
   |
LL |     #[derive(Default)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/box_default.rs:123:11
   |
LL |     #[derive(Default)]
   |           ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:123:11
   |
LL |     #[derive(Default)]
   |           ^  ------- in this derive macro expansion

error: trait must be `unsafe`
  --> tests/ui/box_default.rs:125:5
   |
LL |     pub trait Bar {}
   |     ^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/box_default.rs:126:5
   |
LL |     impl Bar for Foo {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:128:5
   |
LL |     fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:128:5
   |
LL |     fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:128:5
   |
LL |     fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/box_default.rs:128:22
   |
LL |     fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {
   |                      ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/box_default.rs:141:1
   |
LL | fn issue_11927() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:141:1
   |
LL | fn issue_11927() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:141:1
   |
LL | fn issue_11927() {
   | ^

error: item must be `pub`
  --> tests/ui/box_default.rs:142:5
   |
LL |     mod outer {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/box_default.rs:143:18
   |
LL |         #[derive(Default)]
   |                  ^

error: function must be `unsafe`
  --> tests/ui/box_default.rs:143:15
   |
LL |         #[derive(Default)]
   |               ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:143:15
   |
LL |         #[derive(Default)]
   |               ^  ------- in this derive macro expansion

error: item must be `pub`
  --> tests/ui/box_default.rs:149:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/box_default.rs:149:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/box_default.rs:149:5
   |
LL |     fn foo() {
   |     ^

error: variable must be `mut`
  --> tests/ui/box_default.rs:150:13
   |
LL |         let _b = Box::new(outer::Inner::default());
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/box_default.rs:151:13
   |
LL |         let _b = Box::new(std::collections::HashSet::<i32>::new());
   |             ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 68 previous errors

