error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:6:1
   |
LL | enum OptionalCell {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:12:1
   |
LL | const UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(true));
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:14:1
   |
LL | const FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:16:1
   |
LL | const fn unfrozen_variant() -> OptionalCell {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:16:7
   |
LL | const fn unfrozen_variant() -> OptionalCell {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:16:7
   |
LL | const fn unfrozen_variant() -> OptionalCell {
   |       ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:20:1
   |
LL | const fn frozen_variant() -> OptionalCell {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:20:7
   |
LL | const fn frozen_variant() -> OptionalCell {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:20:7
   |
LL | const fn frozen_variant() -> OptionalCell {
   |       ^

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:24:1
   |
LL | const UNFROZEN_VARIANT_FROM_FN: OptionalCell = unfrozen_variant();
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:26:1
   |
LL | const FROZEN_VARIANT_FROM_FN: OptionalCell = frozen_variant();
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:28:1
   |
LL | enum NestedInnermost {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:33:1
   |
LL | struct NestedInner {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:37:1
   |
LL | enum NestedOuter {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:42:1
   |
LL | struct NestedOutermost {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:47:1
   |
LL | const NESTED_UNFROZEN_VARIANT: NestedOutermost = NestedOutermost {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:53:1
   |
LL | const NESTED_FROZEN_VARIANT: NestedOutermost = NestedOutermost {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:59:1
   |
LL | / trait AssocConsts {
LL | |     // When there's no default value, lint it only according to its type.
LL | |     // Further details are on the corresponding code (`NonCopyConst::check_trait_item`).
LL | |     const TO_BE_UNFROZEN_VARIANT: OptionalCell;
...  |
LL | |     const DEFAULTED_ON_FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:59:1
   |
LL | trait AssocConsts {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:75:1
   |
LL | impl AssocConsts for u64 {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:85:1
   |
LL | / trait AssocTypes {
LL | |     type ToBeUnfrozen;
LL | |
LL | |     const TO_BE_UNFROZEN_VARIANT: Option<Self::ToBeUnfrozen>;
LL | |     const TO_BE_FROZEN_VARIANT: Option<Self::ToBeUnfrozen>;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:85:1
   |
LL | trait AssocTypes {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:92:1
   |
LL | impl AssocTypes for u64 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:101:1
   |
LL | enum BothOfCellAndGeneric<T> {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:107:1
   |
LL | impl<T> BothOfCellAndGeneric<T> {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:124:1
   |
LL | / trait BothOfCellAndGenericWithAssocType {
LL | |     type AssocType;
LL | |
LL | |     const UNFROZEN_VARIANT: BothOfCellAndGeneric<Self::AssocType> =
...  |
LL | |     const FROZEN_VARIANT: BothOfCellAndGeneric<Self::AssocType> = BothOfCellAndGeneric::Frozen(5);
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:124:1
   |
LL | trait BothOfCellAndGenericWithAssocType {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/declare_interior_mutable_const/enums.rs:135:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:135:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/declare_interior_mutable_const/enums.rs:135:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 31 previous errors

