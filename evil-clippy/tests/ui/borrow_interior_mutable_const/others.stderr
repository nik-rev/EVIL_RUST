error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:11:1
   |
LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5);
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:12:1
   |
LL | const CELL: Cell<usize> = Cell::new(6);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:13:1
   |
LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Option<Box<AtomicUsize>>, u8) = ([ATOMIC], None, 7);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:14:1
   |
LL | const INTEGER: u8 = 8;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:15:1
   |
LL | const STRING: String = String::new();
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:16:1
   |
LL | const STR: &str = "012345";
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:16:12
   |
LL | const STR: &str = "012345";
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:17:1
   |
LL | const COW: Cow<str> = Cow::Borrowed("abcdef");
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:18:1
   |
LL | const NO_ANN: &dyn Display = &70;
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:18:15
   |
LL | const NO_ANN: &dyn Display = &70;
   |               ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:18:30
   |
LL | const NO_ANN: &dyn Display = &70;
   |                              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: static must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:19:8
   |
LL | static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);
   |        ^ help: make this static mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:19:1
   |
LL | static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:20:1
   |
LL | const ONCE_INIT: Once = Once::new();
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:30:1
   |
LL | impl<T> StaticRef<T> {
   | ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:37:29
   |
LL |     pub const unsafe fn new(ptr: *const T) -> StaticRef<T> {
   |                             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:42:1
   |
LL | impl<T> std::ops::Deref for StaticRef<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/borrow_interior_mutable_const/others.rs:45:5
   |
LL |     fn deref(&self) -> &T {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/borrow_interior_mutable_const/others.rs:45:5
   |
LL |     fn deref(&self) -> &T {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:45:15
   |
LL |     fn deref(&self) -> &T {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:45:14
   |
LL |     fn deref(&self) -> &T {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:45:24
   |
LL |     fn deref(&self) -> &T {
   |                        ^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:46:18
   |
LL |         unsafe { &*self.ptr }
   |                  ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:51:1
   |
LL | mod issue12979 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:54:5
   |
LL |     const ATOMIC_TUPLE: (Vec<UnsafeCell<u8>>, ()) = (Vec::new(), ());
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:56:5
   |
LL |     fn main() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/borrow_interior_mutable_const/others.rs:56:5
   |
LL |     fn main() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/borrow_interior_mutable_const/others.rs:56:5
   |
LL |     fn main() {
   |     ^

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:57:13
   |
LL |         let _x = &ATOMIC_TUPLE.0;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:57:18
   |
LL |         let _x = &ATOMIC_TUPLE.0;
   |                  ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:62:1
   |
LL | const CELL_REF: StaticRef<(UnsafeCell<u32>,)> = unsafe { StaticRef::new(std::ptr::null()) };
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/borrow_interior_mutable_const/others.rs:64:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/borrow_interior_mutable_const/others.rs:64:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/borrow_interior_mutable_const/others.rs:64:1
   |
LL | fn main() {
   | ^

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:67:5
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:67:5
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:67:5
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:67:5
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:67:5
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:70:9
   |
LL |     let _once = ONCE_INIT;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:71:9
   |
LL |     let _once_ref = &ONCE_INIT;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:71:21
   |
LL |     let _once_ref = &ONCE_INIT;
   |                     ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:73:9
   |
LL |     let _once_ref_2 = &&ONCE_INIT;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:73:23
   |
LL |     let _once_ref_2 = &&ONCE_INIT;
   |                       ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:73:24
   |
LL |     let _once_ref_2 = &&ONCE_INIT;
   |                        ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:75:9
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:75:23
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT;
   |                       ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:75:24
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT;
   |                        ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:75:25
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT;
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:75:26
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT;
   |                          ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:77:9
   |
LL |     let _once_mut = &mut ONCE_INIT;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:77:21
   |
LL |     let _once_mut = &mut ONCE_INIT;
   |                     ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:79:9
   |
LL |     let _atomic_into_inner = ATOMIC.into_inner();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:81:9
   |
LL |     let _twice = (ONCE_INIT, ONCE_INIT);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:82:9
   |
LL |     let _ref_twice = &(ONCE_INIT, ONCE_INIT);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:82:22
   |
LL |     let _ref_twice = &(ONCE_INIT, ONCE_INIT);
   |                      ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:83:9
   |
LL |     let _ref_once = &(ONCE_INIT, ONCE_INIT).0;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:83:21
   |
LL |     let _ref_once = &(ONCE_INIT, ONCE_INIT).0;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:84:9
   |
LL |     let _array_twice = [ONCE_INIT, ONCE_INIT];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:85:9
   |
LL |     let _ref_array_twice = &[ONCE_INIT, ONCE_INIT];
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:85:28
   |
LL |     let _ref_array_twice = &[ONCE_INIT, ONCE_INIT];
   |                            ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:86:9
   |
LL |     let _ref_array_once = &[ONCE_INIT, ONCE_INIT][0];
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:86:27
   |
LL |     let _ref_array_once = &[ONCE_INIT, ONCE_INIT][0];
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:89:13
   |
LL |     let _ = &ATOMIC_TUPLE;
   |             ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:91:13
   |
LL |     let _ = &ATOMIC_TUPLE.0;
   |             ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:93:13
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0;
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:93:15
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0;
   |               ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:93:16
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0;
   |                ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:93:17
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0;
   |                 ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:93:18
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0;
   |                  ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:95:13
   |
LL |     let _ = &ATOMIC_TUPLE.0[0];
   |             ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:99:13
   |
LL |     let _ = &ATOMIC_TUPLE.2;
   |             ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:100:14
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).0;
   |              ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:100:15
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).0;
   |               ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:100:16
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).0;
   |                ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:100:17
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).0;
   |                 ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:101:14
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).2;
   |              ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:101:15
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).2;
   |               ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:101:16
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).2;
   |                ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:101:17
   |
LL |     let _ = (&&&&ATOMIC_TUPLE).2;
   |                 ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:107:13
   |
LL |     let _ = &{ ATOMIC_TUPLE };
   |             ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:111:5
   |
LL |     assert_eq!(CELL.get(), 6);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:111:5
   |
LL |     assert_eq!(CELL.get(), 6);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:111:5
   |
LL |     assert_eq!(CELL.get(), 6);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:111:5
   |
LL |     assert_eq!(CELL.get(), 6);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:111:5
   |
LL |     assert_eq!(CELL.get(), 6);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:114:5
   |
LL |     assert_eq!(INTEGER, 8);
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:114:5
   |
LL |     assert_eq!(INTEGER, 8);
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:114:5
   |
LL |     assert_eq!(INTEGER, 8);
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:114:5
   |
LL |     assert_eq!(INTEGER, 8);
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:114:5
   |
LL |     assert_eq!(INTEGER, 8);
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:117:9
   |
LL |     let a = ATOMIC;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:119:5
   |
LL |     assert_eq!(a.load(Ordering::SeqCst), 4);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:119:5
   |
LL |     assert_eq!(a.load(Ordering::SeqCst), 4);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:119:5
   |
LL |     assert_eq!(a.load(Ordering::SeqCst), 4);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:119:5
   |
LL |     assert_eq!(a.load(Ordering::SeqCst), 4);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:119:5
   |
LL |     assert_eq!(a.load(Ordering::SeqCst), 4);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:122:5
   |
LL |     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:122:5
   |
LL |     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:122:5
   |
LL |     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:122:5
   |
LL |     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:122:5
   |
LL |     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:125:5
   |
LL |     assert_eq!(NO_ANN.to_string(), "70"); // should never lint this.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:125:5
   |
LL |     assert_eq!(NO_ANN.to_string(), "70"); // should never lint this.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/borrow_interior_mutable_const/others.rs:125:5
   |
LL |     assert_eq!(NO_ANN.to_string(), "70"); // should never lint this.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:125:5
   |
LL |     assert_eq!(NO_ANN.to_string(), "70"); // should never lint this.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:125:5
   |
LL |     assert_eq!(NO_ANN.to_string(), "70"); // should never lint this.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:127:13
   |
LL |     let _ = &CELL_REF.0;
   |             ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:65:5
   |
LL |     ATOMIC.store(1, Ordering::SeqCst);
   |     ^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here
note: the lint level is defined here
  --> tests/ui/borrow_interior_mutable_const/others.rs:1:9
   |
LL | #![deny(clippy::borrow_interior_mutable_const)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:67:16
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5);
   |                ^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:71:22
   |
LL |     let _once_ref = &ONCE_INIT;
   |                      ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:73:25
   |
LL |     let _once_ref_2 = &&ONCE_INIT;
   |                         ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:75:27
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT;
   |                           ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:77:26
   |
LL |     let _once_mut = &mut ONCE_INIT;
   |                          ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:89:14
   |
LL |     let _ = &ATOMIC_TUPLE;
   |              ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:91:14
   |
LL |     let _ = &ATOMIC_TUPLE.0;
   |              ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:93:19
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0;
   |                   ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:95:14
   |
LL |     let _ = &ATOMIC_TUPLE.0[0];
   |              ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:97:13
   |
LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst);
   |             ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:103:13
   |
LL |     let _ = ATOMIC_TUPLE.0[0];
   |             ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:109:5
   |
LL |     CELL.set(2);
   |     ^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a `const` item with interior mutability should not be borrowed
  --> tests/ui/borrow_interior_mutable_const/others.rs:111:16
   |
LL |     assert_eq!(CELL.get(), 6);
   |                ^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: aborting due to 123 previous errors

