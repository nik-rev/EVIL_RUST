error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/iter_cloned_collect.rs:6:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/iter_cloned_collect.rs:6:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_cloned_collect.rs:6:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:7:9
   |
LL |     let v = [1, 2, 3, 4, 5];
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:8:9
   |
LL |     let v2: Vec<isize> = v.iter().cloned().collect();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:10:9
   |
LL |     let v3: HashSet<isize> = v.iter().cloned().collect();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:11:9
   |
LL |     let v4: VecDeque<isize> = v.iter().cloned().collect();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:28:9
   |
LL |     let arr: [u8; 64] = [0; 64];
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/iter_cloned_collect.rs:37:1
   |
LL | mod issue9119 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/iter_cloned_collect.rs:42:5
   |
LL |     struct Example(u16);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/iter_cloned_collect.rs:41:14
   |
LL |     #[derive(Clone)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/iter_cloned_collect.rs:41:11
   |
LL |     #[derive(Clone)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_cloned_collect.rs:41:11
   |
LL |     #[derive(Clone)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/iter_cloned_collect.rs:41:14
   |
LL |     #[derive(Clone)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:41:14
   |
LL |     #[derive(Clone)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:42:20
   |
LL |     #[derive(Clone)]
   |              ----- in this derive macro expansion
LL |     struct Example(u16);
   |                    ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/iter_cloned_collect.rs:44:5
   |
LL |     impl iter::FromIterator<Example> for Vec<u8> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_cloned_collect.rs:45:9
   |
LL |         fn from_iter<T>(iter: T) -> Self
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_cloned_collect.rs:45:9
   |
LL |         fn from_iter<T>(iter: T) -> Self
   |         ^

error: parameter must be `mut`
  --> tests/ui/iter_cloned_collect.rs:45:25
   |
LL |         fn from_iter<T>(iter: T) -> Self
   |                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/iter_cloned_collect.rs:53:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_cloned_collect.rs:53:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_cloned_collect.rs:53:5
   |
LL |     fn foo() {
   |     ^

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:54:13
   |
LL |         let examples = [Example(1), Example(0x1234)];
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:55:13
   |
LL |         let encoded: Vec<u8> = examples.iter().cloned().collect();
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:56:9
   |
LL |         assert_eq!(encoded, vec![0x01, 0x00, 0x34, 0x12]);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:56:9
   |
LL |         assert_eq!(encoded, vec![0x01, 0x00, 0x34, 0x12]);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:56:9
   |
LL |         assert_eq!(encoded, vec![0x01, 0x00, 0x34, 0x12]);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:56:9
   |
LL |         assert_eq!(encoded, vec![0x01, 0x00, 0x34, 0x12]);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:56:9
   |
LL |         assert_eq!(encoded, vec![0x01, 0x00, 0x34, 0x12]);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:58:13
   |
LL |         let a = [&&String::new()];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:58:18
   |
LL |         let a = [&&String::new()];
   |                  ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:58:19
   |
LL |         let a = [&&String::new()];
   |                   ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/iter_cloned_collect.rs:59:13
   |
LL |         let v: Vec<&&String> = a.iter().cloned().collect();
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:59:20
   |
LL |         let v: Vec<&&String> = a.iter().cloned().collect();
   |                    ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_cloned_collect.rs:59:21
   |
LL |         let v: Vec<&&String> = a.iter().cloned().collect();
   |                     ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 36 previous errors

