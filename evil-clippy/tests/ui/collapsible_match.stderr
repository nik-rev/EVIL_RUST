error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:12:1
   |
LL | fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:12:1
   |
LL | fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:12:1
   |
LL | fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:12:15
   |
LL | fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {
   |               ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:12:45
   |
LL | fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {
   |                                             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:122:1
   |
LL | fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:122:1
   |
LL | fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:122:1
   |
LL | fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:122:19
   |
LL | fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:122:57
   |
LL | fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {
   |                                                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:220:9
   |
LL |         macro_rules! mac {
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:235:5
   |
LL |     enum E<T> {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/collapsible_match.rs:272:12
   |
LL |     let _: &dyn std::any::Any = match &Some(Some(1)) {
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/collapsible_match.rs:272:39
   |
LL |     let _: &dyn std::any::Any = match &Some(Some(1)) {
   |                                       ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:287:5
   |
LL | pub fn test_1(x: Issue9647) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:287:5
   |
LL | pub fn test_1(x: Issue9647) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:287:15
   |
LL | pub fn test_1(x: Issue9647) {
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:297:5
   |
LL | pub fn test_2(x: Issue9647) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:297:5
   |
LL | pub fn test_2(x: Issue9647) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:297:15
   |
LL | pub fn test_2(x: Issue9647) {
   |               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:308:1
   |
LL | fn lint_emitted_at_right_node(opt: Option<Result<u64, String>>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:308:1
   |
LL | fn lint_emitted_at_right_node(opt: Option<Result<u64, String>>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:308:1
   |
LL | fn lint_emitted_at_right_node(opt: Option<Result<u64, String>>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:308:31
   |
LL | fn lint_emitted_at_right_node(opt: Option<Result<u64, String>>) {
   |                               ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/collapsible_match.rs:309:9
   |
LL |     let n = match opt {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:319:1
   |
LL | fn make<T>() -> T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:319:1
   |
LL | fn make<T>() -> T {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:319:1
   |
LL | fn make<T>() -> T {
   | ^

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:323:1
   |
LL | fn foo<T, U>(t: T) -> U {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:323:1
   |
LL | fn foo<T, U>(t: T) -> U {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:323:1
   |
LL | fn foo<T, U>(t: T) -> U {
   | ^

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:323:14
   |
LL | fn foo<T, U>(t: T) -> U {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:327:1
   |
LL | fn take<T>(t: T) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:327:1
   |
LL | fn take<T>(t: T) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:327:1
   |
LL | fn take<T>(t: T) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/collapsible_match.rs:327:12
   |
LL | fn take<T>(t: T) {}
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/collapsible_match.rs:329:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collapsible_match.rs:329:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collapsible_match.rs:329:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 34 previous errors

