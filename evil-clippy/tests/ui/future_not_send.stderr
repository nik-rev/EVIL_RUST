error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:8:1
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:8:7
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:8:7
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |       ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:8:25
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                         ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:8:39
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:8:45
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                             ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:14:11
   |
LL | pub async fn public_future(rc: Rc<[u8]>) {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:14:11
   |
LL | pub async fn public_future(rc: Rc<[u8]>) {
   |           ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:14:28
   |
LL | pub async fn public_future(rc: Rc<[u8]>) {
   |                            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:20:11
   |
LL | pub async fn public_send(arc: Arc<[u8]>) -> bool {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:20:11
   |
LL | pub async fn public_send(arc: Arc<[u8]>) -> bool {
   |           ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:20:26
   |
LL | pub async fn public_send(arc: Arc<[u8]>) -> bool {
   |                          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:24:1
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:24:7
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:24:7
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |       ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:24:26
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:24:40
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:24:46
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                              ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:30:11
   |
LL | pub async fn public_future2(rc: Rc<[u8]>) {}
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:30:11
   |
LL | pub async fn public_future2(rc: Rc<[u8]>) {}
   |           ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:30:29
   |
LL | pub async fn public_future2(rc: Rc<[u8]>) {}
   |                             ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:33:11
   |
LL | pub async fn public_send2(arc: Arc<[u8]>) -> bool {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:33:11
   |
LL | pub async fn public_send2(arc: Arc<[u8]>) -> bool {
   |           ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:33:27
   |
LL | pub async fn public_send2(arc: Arc<[u8]>) -> bool {
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:37:1
   |
LL | struct Dummy {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:41:1
   |
LL | impl Dummy {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:42:11
   |
LL |     async fn private_future(&self) -> usize {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:42:11
   |
LL |     async fn private_future(&self) -> usize {
   |           ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:42:30
   |
LL |     async fn private_future(&self) -> usize {
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:42:29
   |
LL |     async fn private_future(&self) -> usize {
   |                             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:49:15
   |
LL |     pub async fn public_future(&self) {
   |               ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:49:15
   |
LL |     pub async fn public_future(&self) {
   |               ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:49:33
   |
LL |     pub async fn public_future(&self) {
   |                                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:49:32
   |
LL |     pub async fn public_future(&self) {
   |                                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:56:9
   |
LL |     pub fn public_send(&self) -> impl std::future::Future<Output = bool> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:56:9
   |
LL |     pub fn public_send(&self) -> impl std::future::Future<Output = bool> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:56:25
   |
LL |     pub fn public_send(&self) -> impl std::future::Future<Output = bool> {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:56:24
   |
LL |     pub fn public_send(&self) -> impl std::future::Future<Output = bool> {
   |                        ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:61:1
   |
LL | async fn generic_future<T>(t: T) -> T
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:61:7
   |
LL | async fn generic_future<T>(t: T) -> T
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:61:7
   |
LL | async fn generic_future<T>(t: T) -> T
   |       ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:61:28
   |
LL | async fn generic_future<T>(t: T) -> T
   |                            ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/future_not_send.rs:66:9
   |
LL |     let rt = &t;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:66:14
   |
LL |     let rt = &t;
   |              ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:72:1
   |
LL | async fn maybe_send_generic_future<T>(t: T) -> T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:72:7
   |
LL | async fn maybe_send_generic_future<T>(t: T) -> T {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:72:7
   |
LL | async fn maybe_send_generic_future<T>(t: T) -> T {
   |       ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:72:39
   |
LL | async fn maybe_send_generic_future<T>(t: T) -> T {
   |                                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:77:1
   |
LL | async fn maybe_send_generic_future2<F: Fn() -> Fut, Fut: Future>(f: F) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:77:7
   |
LL | async fn maybe_send_generic_future2<F: Fn() -> Fut, Fut: Future>(f: F) {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:77:7
   |
LL | async fn maybe_send_generic_future2<F: Fn() -> Fut, Fut: Future>(f: F) {
   |       ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:77:66
   |
LL | async fn maybe_send_generic_future2<F: Fn() -> Fut, Fut: Future>(f: F) {
   |                                                                  ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/future_not_send.rs:79:9
   |
LL |     let res = f();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:83:1
   |
LL | async fn generic_future_always_unsend<T>(_: Rc<T>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:83:7
   |
LL | async fn generic_future_always_unsend<T>(_: Rc<T>) {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:83:7
   |
LL | async fn generic_future_always_unsend<T>(_: Rc<T>) {
   |       ^

error: item must be `pub`
  --> tests/ui/future_not_send.rs:89:1
   |
LL | async fn generic_future_send<T>(t: T)
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:89:7
   |
LL | async fn generic_future_send<T>(t: T)
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:89:7
   |
LL | async fn generic_future_send<T>(t: T)
   |       ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:89:33
   |
LL | async fn generic_future_send<T>(t: T)
   |                                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:96:1
   |
LL | async fn unclear_future<T>(t: T) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:96:7
   |
LL | async fn unclear_future<T>(t: T) {}
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:96:7
   |
LL | async fn unclear_future<T>(t: T) {}
   |       ^

error: parameter must be `mut`
  --> tests/ui/future_not_send.rs:96:28
   |
LL | async fn unclear_future<T>(t: T) {}
   |                            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/future_not_send.rs:98:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/future_not_send.rs:98:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/future_not_send.rs:98:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/future_not_send.rs:99:9
   |
LL |     let rc = Rc::new([1, 2, 3]);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/future_not_send.rs:100:32
   |
LL |     private_future(rc.clone(), &Cell::new(42));
   |                                ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/future_not_send.rs:102:9
   |
LL |     let arc = Arc::new([4, 5, 6]);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/future_not_send.rs:107:9
   |
LL |     let dummy = Dummy { rc };
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 59 previous errors

