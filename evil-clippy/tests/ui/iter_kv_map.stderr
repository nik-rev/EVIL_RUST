error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/iter_kv_map.rs:6:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/iter_kv_map.rs:6:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_kv_map.rs:6:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/iter_kv_map.rs:7:9
   |
LL |     let get_key = |(key, _val)| key;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/iter_kv_map.rs:8:5
   |
LL |     fn ref_acceptor(v: &u32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_kv_map.rs:8:5
   |
LL |     fn ref_acceptor(v: &u32) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_kv_map.rs:8:5
   |
LL |     fn ref_acceptor(v: &u32) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/iter_kv_map.rs:8:21
   |
LL |     fn ref_acceptor(v: &u32) -> u32 {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_kv_map.rs:8:24
   |
LL |     fn ref_acceptor(v: &u32) -> u32 {
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: variable must be `mut`
  --> tests/ui/iter_kv_map.rs:12:9
   |
LL |     let map: HashMap<u32, u32> = HashMap::new();
   |         ^ help: make this variable mutable: `mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/iter_kv_map.rs:50:46
   |
LL |     let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();
   |                                              ^^^^^^^

error: variable must be `mut`
  --> tests/ui/iter_kv_map.rs:68:9
   |
LL |     let map: BTreeMap<u32, u32> = BTreeMap::new();
   |         ^ help: make this variable mutable: `mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/iter_kv_map.rs:106:46
   |
LL |     let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();
   |                                              ^^^^^^^

error: item must be `pub`
  --> tests/ui/iter_kv_map.rs:126:1
   |
LL | fn msrv_1_53() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_kv_map.rs:126:1
   |
LL | fn msrv_1_53() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_kv_map.rs:126:1
   |
LL | fn msrv_1_53() {
   | ^

error: variable must be `mut`
  --> tests/ui/iter_kv_map.rs:127:9
   |
LL |     let map: HashMap<u32, u32> = HashMap::new();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/iter_kv_map.rs:148:1
   |
LL | fn msrv_1_54() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_kv_map.rs:148:1
   |
LL | fn msrv_1_54() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_kv_map.rs:148:1
   |
LL | fn msrv_1_54() {
   | ^

error: variable must be `mut`
  --> tests/ui/iter_kv_map.rs:150:9
   |
LL |     let map: HashMap<u32, u32> = HashMap::new();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/iter_kv_map.rs:174:1
   |
LL | fn issue14595() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_kv_map.rs:174:1
   |
LL | fn issue14595() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_kv_map.rs:174:1
   |
LL | fn issue14595() {
   | ^

error: item must be `pub`
  --> tests/ui/iter_kv_map.rs:177:5
   |
LL |     impl AsRef<BTreeMap<String, i32>> for Foo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_kv_map.rs:178:9
   |
LL |         fn as_ref(&self) -> &BTreeMap<String, i32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_kv_map.rs:178:9
   |
LL |         fn as_ref(&self) -> &BTreeMap<String, i32> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/iter_kv_map.rs:178:20
   |
LL |         fn as_ref(&self) -> &BTreeMap<String, i32> {
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_kv_map.rs:178:19
   |
LL |         fn as_ref(&self) -> &BTreeMap<String, i32> {
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_kv_map.rs:178:29
   |
LL |         fn as_ref(&self) -> &BTreeMap<String, i32> {
   |                             ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_kv_map.rs:179:13
   |
LL |             &self.0
   |             ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/iter_kv_map.rs:183:9
   |
LL |     let map = Foo(BTreeMap::default());
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 30 previous errors

