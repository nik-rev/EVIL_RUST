error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/useless_conversion_try.rs:8:1
   |
LL | fn test_generic<T: Copy>(val: T) -> T {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/useless_conversion_try.rs:8:1
   |
LL | fn test_generic<T: Copy>(val: T) -> T {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/useless_conversion_try.rs:8:1
   |
LL | fn test_generic<T: Copy>(val: T) -> T {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/useless_conversion_try.rs:8:26
   |
LL | fn test_generic<T: Copy>(val: T) -> T {
   |                          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/useless_conversion_try.rs:16:1
   |
LL | fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/useless_conversion_try.rs:16:1
   |
LL | fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/useless_conversion_try.rs:16:1
   |
LL | fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {
   | ^

error: parameter must be `mut`
  --> tests/ui/useless_conversion_try.rs:16:61
   |
LL | fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {
   |                                                             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/useless_conversion_try.rs:23:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/useless_conversion_try.rs:23:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/useless_conversion_try.rs:23:1
   |
LL | fn main() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: useless conversion to the same type: `T`
  --> tests/ui/useless_conversion_try.rs:9:13
   |
LL |     let _ = T::try_from(val).unwrap();
   |             ^^^^^^^^^^^^^^^^
   |
   = help: consider removing `T::try_from()`
note: the lint level is defined here
  --> tests/ui/useless_conversion_try.rs:1:9
   |
LL | #![deny(clippy::useless_conversion)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: useless conversion to the same type: `T`
  --> tests/ui/useless_conversion_try.rs:12:5
   |
LL |     val.try_into().unwrap()
   |     ^^^^^^^^^^^^^^
   |
   = help: consider removing `.try_into()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:35:21
   |
LL |     let _: String = "foo".to_string().try_into().unwrap();
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `.try_into()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:38:21
   |
LL |     let _: String = TryFrom::try_from("foo".to_string()).unwrap();
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `TryFrom::try_from()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:41:13
   |
LL |     let _ = String::try_from("foo".to_string()).unwrap();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `String::try_from()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:44:13
   |
LL |     let _ = String::try_from(format!("A: {:04}", 123)).unwrap();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `String::try_from()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:47:21
   |
LL |     let _: String = format!("Hello {}", "world").try_into().unwrap();
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `.try_into()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:50:21
   |
LL |     let _: String = String::new().try_into().unwrap();
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `.try_into()`

error: useless conversion to the same type: `std::string::String`
  --> tests/ui/useless_conversion_try.rs:53:27
   |
LL |     let _: String = match String::from("_").try_into() {
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider removing `.try_into()`

error: aborting due to 21 previous errors

