error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:13:1
   |
LL | struct Foo(u32);
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:12:10
   |
LL | #[derive(Copy, Clone)]
   |          ^

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:12:16
   |
LL | #[derive(Copy, Clone)]
   |                ^

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:12:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:12:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:12:16
   |
LL | #[derive(Copy, Clone)]
   |                ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:12:16
   |
LL | #[derive(Copy, Clone)]
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:16:1
   |
LL | struct Bar([u8; 24]);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:15:10
   |
LL | #[derive(Copy, Clone)]
   |          ^

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:15:16
   |
LL | #[derive(Copy, Clone)]
   |                ^

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:15:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:15:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:15:16
   |
LL | #[derive(Copy, Clone)]
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:15:16
   |
LL | #[derive(Copy, Clone)]
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:18:10
   |
LL | #[derive(Copy, Clone)]
   |          ^

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:18:16
   |
LL | #[derive(Copy, Clone)]
   |                ^

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:18:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:18:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:18:16
   |
LL | #[derive(Copy, Clone)]
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:18:16
   |
LL | #[derive(Copy, Clone)]
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:26:1
   |
LL | struct FooRef<'a> {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:27:10
   |
LL |     foo: &'a Foo,
   |          ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:30:1
   |
LL | type Baz = u32;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:1
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:1
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:1
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:9
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   |         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:22
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:30
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:12
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   |            ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:32:33
   |
LL | fn good(a: &mut u32, b: u32, c: &Bar) {}
   |                                 ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:34:1
   |
LL | fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:34:1
   |
LL | fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:34:1
   |
LL | fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:34:32
   |
LL | fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {
   |                                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:34:37
   |
LL | fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {
   |                                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:34:46
   |
LL | fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {
   |                                              ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:35:5
   |
LL |     &foo.0
   |     ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:39:1
   |
LL | fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:39:1
   |
LL | fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:39:1
   |
LL | fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:39:36
   |
LL | fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {
   |                                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:39:41
   |
LL | fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {
   |                                         ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:39:53
   |
LL | fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {
   |                                                     ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:40:5
   |
LL |     &foo.0
   |     ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:43:1
   |
LL | fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:43:1
   |
LL | fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:43:1
   |
LL | fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:43:35
   |
LL | fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {
   |                                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:43:40
   |
LL | fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {
   |                                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:48:1
   |
LL | fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:48:1
   |
LL | fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:48:1
   |
LL | fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:48:39
   |
LL | fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {
   |                                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:48:44
   |
LL | fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {
   |                                            ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:1
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:1
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:1
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:8
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |        ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:17
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:26
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:11
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |           ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:20
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |                    ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:29
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |                             ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:57:1
   |
LL | impl Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:5
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:5
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:13
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:19
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:32
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |                                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:40
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |                                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:22
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |                      ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:58:43
   |
LL |     fn good(self, a: &mut u32, b: u32, c: &Bar) {}
   |                                           ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:60:5
   |
LL |     fn good2(&mut self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:60:5
   |
LL |     fn good2(&mut self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:60:19
   |
LL |     fn good2(&mut self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:60:14
   |
LL |     fn good2(&mut self) {}
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:5
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:5
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:13
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:19
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:28
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:37
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:12
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:22
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:31
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:40
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:5
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:5
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:13
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:22
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:31
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:16
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:25
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:34
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:73:5
   |
LL |     fn bad_issue7518(self, other: &Self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:73:5
   |
LL |     fn bad_issue7518(self, other: &Self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:73:22
   |
LL |     fn bad_issue7518(self, other: &Self) {}
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:73:28
   |
LL |     fn bad_issue7518(self, other: &Self) {}
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:73:35
   |
LL |     fn bad_issue7518(self, other: &Self) {}
   |                                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:77:1
   |
LL | impl AsRef<u32> for Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:78:5
   |
LL |     fn as_ref(&self) -> &u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:78:5
   |
LL |     fn as_ref(&self) -> &u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:78:16
   |
LL |     fn as_ref(&self) -> &u32 {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:78:15
   |
LL |     fn as_ref(&self) -> &u32 {
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:78:25
   |
LL |     fn as_ref(&self) -> &u32 {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:79:9
   |
LL |         &self.0
   |         ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:83:1
   |
LL | impl Bar {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:5
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:5
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:14
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:20
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |                    ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:33
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:41
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |                                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:13
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:23
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |                       ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:84:44
   |
LL |     fn good(&self, a: &mut u32, b: u32, c: &Bar) {}
   |                                            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:5
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:5
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:13
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:22
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:31
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:16
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:25
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:34
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:92:1
   |
LL | / trait MyTrait {
LL | |     fn trait_method(&self, _foo: &Foo);
LL | |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:92:1
   |
LL | trait MyTrait {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:5
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:5
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:22
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:28
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:21
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |                     ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:34
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:97:1
   |
LL | / pub trait MyTrait2 {
LL | |     fn trait_method2(&self, _color: &Color);
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:98:5
   |
LL |     fn trait_method2(&self, _color: &Color);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:98:5
   |
LL |     fn trait_method2(&self, _color: &Color);
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:98:23
   |
LL |     fn trait_method2(&self, _color: &Color);
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:98:29
   |
LL |     fn trait_method2(&self, _color: &Color);
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:98:22
   |
LL |     fn trait_method2(&self, _color: &Color);
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:98:37
   |
LL |     fn trait_method2(&self, _color: &Color);
   |                                     ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:101:1
   |
LL | impl MyTrait for Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:102:5
   |
LL |     fn trait_method(&self, _foo: &Foo) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:102:5
   |
LL |     fn trait_method(&self, _foo: &Foo) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:102:22
   |
LL |     fn trait_method(&self, _foo: &Foo) {
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:102:28
   |
LL |     fn trait_method(&self, _foo: &Foo) {
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:102:21
   |
LL |     fn trait_method(&self, _foo: &Foo) {
   |                     ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:102:34
   |
LL |     fn trait_method(&self, _foo: &Foo) {
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:108:1
   |
LL | mod issue3992 {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:109:5
   |
LL | /     pub trait A {
LL | |         #[allow(clippy::trivially_copy_pass_by_ref)]
LL | |         fn a(b: &u16) {}
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:111:9
   |
LL |         fn a(b: &u16) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:111:9
   |
LL |         fn a(b: &u16) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:111:14
   |
LL |         fn a(b: &u16) {}
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:111:17
   |
LL |         fn a(b: &u16) {}
   |                 ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:115:9
   |
LL |     pub fn c(d: &u16) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:115:9
   |
LL |     pub fn c(d: &u16) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:115:14
   |
LL |     pub fn c(d: &u16) {}
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:115:17
   |
LL |     pub fn c(d: &u16) {}
   |                 ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:118:1
   |
LL | mod issue5876 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:121:5
   |
LL |     fn foo_always(x: &i32) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:121:5
   |
LL |     fn foo_always(x: &i32) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:121:5
   |
LL |     fn foo_always(x: &i32) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:121:19
   |
LL |     fn foo_always(x: &i32) {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:121:22
   |
LL |     fn foo_always(x: &i32) {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:126:5
   |
LL |     fn foo_never(x: &i32) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:126:5
   |
LL |     fn foo_never(x: &i32) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:126:5
   |
LL |     fn foo_never(x: &i32) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:126:18
   |
LL |     fn foo_never(x: &i32) {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:126:21
   |
LL |     fn foo_never(x: &i32) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:132:5
   |
LL |     fn foo(x: &i32) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:132:5
   |
LL |     fn foo(x: &i32) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:132:5
   |
LL |     fn foo(x: &i32) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:132:12
   |
LL |     fn foo(x: &i32) {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:132:15
   |
LL |     fn foo(x: &i32) {
   |               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:138:1
   |
LL | fn _ref_to_opt_ref_implicit(x: &u32) -> Option<&u32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:138:1
   |
LL | fn _ref_to_opt_ref_implicit(x: &u32) -> Option<&u32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:138:1
   |
LL | fn _ref_to_opt_ref_implicit(x: &u32) -> Option<&u32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:138:29
   |
LL | fn _ref_to_opt_ref_implicit(x: &u32) -> Option<&u32> {
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:138:32
   |
LL | fn _ref_to_opt_ref_implicit(x: &u32) -> Option<&u32> {
   |                                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:138:48
   |
LL | fn _ref_to_opt_ref_implicit(x: &u32) -> Option<&u32> {
   |                                                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:143:1
   |
LL | fn _ref_to_opt_ref_explicit<'a>(x: &'a u32) -> Option<&'a u32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:143:1
   |
LL | fn _ref_to_opt_ref_explicit<'a>(x: &'a u32) -> Option<&'a u32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:143:1
   |
LL | fn _ref_to_opt_ref_explicit<'a>(x: &'a u32) -> Option<&'a u32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:143:33
   |
LL | fn _ref_to_opt_ref_explicit<'a>(x: &'a u32) -> Option<&'a u32> {
   |                                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:143:36
   |
LL | fn _ref_to_opt_ref_explicit<'a>(x: &'a u32) -> Option<&'a u32> {
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:143:55
   |
LL | fn _ref_to_opt_ref_explicit<'a>(x: &'a u32) -> Option<&'a u32> {
   |                                                       ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:1
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:1
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:1
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:33
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   |                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:45
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   |                                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:36
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:48
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   |                                                ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:147:60
   |
LL | fn _with_constraint<'a, 'b: 'a>(x: &'b u32, y: &'a u32) -> &'a u32 {
   |                                                            ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:151:1
   |
LL | async fn _async_implicit(x: &u32) -> &u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:151:7
   |
LL | async fn _async_implicit(x: &u32) -> &u32 {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:151:7
   |
LL | async fn _async_implicit(x: &u32) -> &u32 {
   |       ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:151:26
   |
LL | async fn _async_implicit(x: &u32) -> &u32 {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:151:29
   |
LL | async fn _async_implicit(x: &u32) -> &u32 {
   |                             ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:151:38
   |
LL | async fn _async_implicit(x: &u32) -> &u32 {
   |                                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:156:1
   |
LL | async fn _async_explicit<'a>(x: &'a u32) -> &'a u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:156:7
   |
LL | async fn _async_explicit<'a>(x: &'a u32) -> &'a u32 {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:156:7
   |
LL | async fn _async_explicit<'a>(x: &'a u32) -> &'a u32 {
   |       ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:156:30
   |
LL | async fn _async_explicit<'a>(x: &'a u32) -> &'a u32 {
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:156:33
   |
LL | async fn _async_explicit<'a>(x: &'a u32) -> &'a u32 {
   |                                 ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:156:45
   |
LL | async fn _async_explicit<'a>(x: &'a u32) -> &'a u32 {
   |                                             ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:1
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:1
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:1
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:33
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   |                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:46
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   |                                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:37
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   |                                     ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:49
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   |                                                 ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:61
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   |                                                             ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:165:1
   |
LL | fn _return_ptr(x: &u32) -> *const u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:165:1
   |
LL | fn _return_ptr(x: &u32) -> *const u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:165:1
   |
LL | fn _return_ptr(x: &u32) -> *const u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:165:16
   |
LL | fn _return_ptr(x: &u32) -> *const u32 {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:165:19
   |
LL | fn _return_ptr(x: &u32) -> *const u32 {
   |                   ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:169:1
   |
LL | fn _return_field_ptr(x: &(u32, u32)) -> *const u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:169:1
   |
LL | fn _return_field_ptr(x: &(u32, u32)) -> *const u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:169:1
   |
LL | fn _return_field_ptr(x: &(u32, u32)) -> *const u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:169:22
   |
LL | fn _return_field_ptr(x: &(u32, u32)) -> *const u32 {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:169:25
   |
LL | fn _return_field_ptr(x: &(u32, u32)) -> *const u32 {
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:170:5
   |
LL |     &x.0
   |     ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:173:1
   |
LL | fn _return_field_ptr_addr_of(x: &(u32, u32)) -> *const u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:173:1
   |
LL | fn _return_field_ptr_addr_of(x: &(u32, u32)) -> *const u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:173:1
   |
LL | fn _return_field_ptr_addr_of(x: &(u32, u32)) -> *const u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:173:30
   |
LL | fn _return_field_ptr_addr_of(x: &(u32, u32)) -> *const u32 {
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:173:33
   |
LL | fn _return_field_ptr_addr_of(x: &(u32, u32)) -> *const u32 {
   |                                 ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trivially_copy_pass_by_ref.rs:177:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:177:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trivially_copy_pass_by_ref.rs:177:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:178:19
   |
LL |     let (mut foo, bar) = (Foo(0), Bar([0; 24]));
   |                   ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:179:17
   |
LL |     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);
   |                 ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:179:20
   |
LL |     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);
   |                    ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:179:23
   |
LL |     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);
   |                       ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:179:26
   |
LL |     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);
   |                          ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/trivially_copy_pass_by_ref.rs:179:29
   |
LL |     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);
   |                             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:180:10
   |
LL |     good(&mut a, b, &c);
   |          ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:180:21
   |
LL |     good(&mut a, b, &c);
   |                     ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:181:33
   |
LL |     good_return_implicit_lt_ref(&y);
   |                                 ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:182:33
   |
LL |     good_return_explicit_lt_ref(&y);
   |                                 ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:183:9
   |
LL |     bad(&x, &y, &z);
   |         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:183:13
   |
LL |     bad(&x, &y, &z);
   |             ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:183:17
   |
LL |     bad(&x, &y, &z);
   |                 ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:184:14
   |
LL |     foo.good(&mut a, b, &c);
   |              ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:184:25
   |
LL |     foo.good(&mut a, b, &c);
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:186:13
   |
LL |     foo.bad(&x, &y, &z);
   |             ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:186:17
   |
LL |     foo.bad(&x, &y, &z);
   |                 ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:186:21
   |
LL |     foo.bad(&x, &y, &z);
   |                     ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:187:15
   |
LL |     Foo::bad2(&x, &y, &z);
   |               ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:187:19
   |
LL |     Foo::bad2(&x, &y, &z);
   |                   ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:187:23
   |
LL |     Foo::bad2(&x, &y, &z);
   |                       ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:188:14
   |
LL |     bar.good(&mut a, b, &c);
   |              ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:188:25
   |
LL |     bar.good(&mut a, b, &c);
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:189:15
   |
LL |     Bar::bad2(&x, &y, &z);
   |               ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:189:19
   |
LL |     Bar::bad2(&x, &y, &z);
   |                   ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/trivially_copy_pass_by_ref.rs:189:23
   |
LL |     Bar::bad2(&x, &y, &z);
   |                       ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:11
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |           ^^^^ help: consider passing by value instead: `u32`
   |
note: the lint level is defined here
  --> tests/ui/trivially_copy_pass_by_ref.rs:3:9
   |
LL | #![deny(clippy::trivially_copy_pass_by_ref)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:20
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |                    ^^^^ help: consider passing by value instead: `Foo`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:52:29
   |
LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}
   |                             ^^^^ help: consider passing by value instead: `Baz`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:12
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |            ^^^^^ help: consider passing by value instead: `self`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:22
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                      ^^^^ help: consider passing by value instead: `u32`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:31
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                               ^^^^ help: consider passing by value instead: `Foo`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:62:40
   |
LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}
   |                                        ^^^^ help: consider passing by value instead: `Baz`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:16
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                ^^^^ help: consider passing by value instead: `u32`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:25
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                         ^^^^ help: consider passing by value instead: `Foo`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:68:34
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                                  ^^^^ help: consider passing by value instead: `Baz`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:73:35
   |
LL |     fn bad_issue7518(self, other: &Self) {}
   |                                   ^^^^^ help: consider passing by value instead: `Self`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:16
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                ^^^^ help: consider passing by value instead: `u32`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:25
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                         ^^^^ help: consider passing by value instead: `Foo`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:86:34
   |
LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}
   |                                  ^^^^ help: consider passing by value instead: `Baz`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:93:34
   |
LL |     fn trait_method(&self, _foo: &Foo);
   |                                  ^^^^ help: consider passing by value instead: `Foo`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:126:21
   |
LL |     fn foo_never(x: &i32) {
   |                     ^^^^ help: consider passing by value instead: `i32`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:132:15
   |
LL |     fn foo(x: &i32) {
   |               ^^^^ help: consider passing by value instead: `i32`

error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)
  --> tests/ui/trivially_copy_pass_by_ref.rs:160:37
   |
LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {
   |                                     ^^^^^^^ help: consider passing by value instead: `u32`

error: aborting due to 245 previous errors

