error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:7:1
   |
LL | struct MyVec {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:6:10
   |
LL | #[derive(Default)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:6:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:6:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:11:1
   |
LL | union MyOwnMaybeUninit {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:17:1
   |
LL | unsafe fn requires_paramenv<S>() {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:31:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:31:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:31:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:156:5
   |
LL |     fn polymorphic<T>() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:156:5
   |
LL |     fn polymorphic<T>() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:156:5
   |
LL |     fn polymorphic<T>() {
   |     ^

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:166:5
   |
LL |     fn poly_maybe_uninit<T>() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:166:5
   |
LL |     fn poly_maybe_uninit<T>() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:166:5
   |
LL |     fn poly_maybe_uninit<T>() {
   |     ^

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:174:5
   |
LL |     fn nested_union<T>() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:174:5
   |
LL |     fn nested_union<T>() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:174:5
   |
LL |     fn nested_union<T>() {
   |     ^

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:181:5
   |
LL |     struct Recursive<T>(*const Recursive<T>, MaybeUninit<T>);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:182:5
   |
LL |     fn recursive_union<T>() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:182:5
   |
LL |     fn recursive_union<T>() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:182:5
   |
LL |     fn recursive_union<T>() {
   |     ^

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:195:5
   |
LL |     enum Enum<T> {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/uninit_vec.rs:198:5
   |
LL |     fn union_in_enum<T>() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/uninit_vec.rs:198:5
   |
LL |     fn union_in_enum<T>() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/uninit_vec.rs:198:5
   |
LL |     fn union_in_enum<T>() {
   |     ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 23 previous errors

