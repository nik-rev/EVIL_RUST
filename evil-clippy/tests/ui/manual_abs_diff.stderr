error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:5:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:5:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:5:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:6:9
   |
LL |     let a: usize = 5;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:7:9
   |
LL |     let b: usize = 3;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:8:9
   |
LL |     let c: usize = 8;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:9:9
   |
LL |     let d: usize = 11;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:45:5
   |
LL |     const A: usize = 5;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:46:5
   |
LL |     const B: usize = 3;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:48:5
   |
LL |     const _: usize = if A > B { A - B } else { B - A };
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:51:9
   |
LL |     let a = Duration::from_secs(3);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:52:9
   |
LL |     let b = Duration::from_secs(5);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:56:9
   |
LL |     let a: i32 = 3;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:57:9
   |
LL |     let b: i32 = -5;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:64:1
   |
LL | fn fixme() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:64:1
   |
LL | fn fixme() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:64:1
   |
LL | fn fixme() {
   | ^

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:65:9
   |
LL |     let a: usize = 5;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:66:9
   |
LL |     let b: usize = 3;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:67:9
   |
LL |     let c: usize = 8;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:68:9
   |
LL |     let d: usize = 11;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:71:13
   |
LL |         let out;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:97:9
   |
LL |     let a: i32 = 3;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:98:9
   |
LL |     let b: i32 = 5;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:102:1
   |
LL | fn non_primitive_ty() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:102:1
   |
LL | fn non_primitive_ty() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:102:1
   |
LL | fn non_primitive_ty() {
   | ^

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:104:5
   |
LL |     struct S(i32);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:103:14
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:103:11
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |           ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:103:11
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |           ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:103:14
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:103:14
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |              ^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:103:18
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                  ^

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:103:18
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                  ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:103:15
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |               ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:103:15
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |               ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:103:18
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:103:18
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                  ^

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:103:18
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                  ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:103:18
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                  ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:103:29
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ^

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:103:26
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                          ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:103:26
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                          ^  ---------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:103:29
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:103:29
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ^

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:103:29
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:103:29
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:104:14
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ---------- in this derive macro expansion
LL |     struct S(i32);
   |              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_abs_diff.rs:104:14
   |
LL |     #[derive(Eq, PartialEq, PartialOrd)]
   |                             ---------- in this derive macro expansion
LL |     struct S(i32);
   |              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_abs_diff.rs:106:5
   |
LL |     impl std::ops::Sub for S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_abs_diff.rs:109:9
   |
LL |         fn sub(self, rhs: Self) -> Self::Output {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_abs_diff.rs:109:9
   |
LL |         fn sub(self, rhs: Self) -> Self::Output {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:109:16
   |
LL |         fn sub(self, rhs: Self) -> Self::Output {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_abs_diff.rs:109:22
   |
LL |         fn sub(self, rhs: Self) -> Self::Output {
   |                      ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:114:10
   |
LL |     let (a, b) = (S(10), S(20));
   |          ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_abs_diff.rs:114:13
   |
LL |     let (a, b) = (S(10), S(20));
   |             ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 54 previous errors

