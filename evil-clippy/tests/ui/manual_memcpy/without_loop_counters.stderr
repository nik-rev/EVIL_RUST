error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:10:1
   |
LL | const LOOP_OFFSET: usize = 5000;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:5
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:5
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:20
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |                    ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:33
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:50
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |                                                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:25
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |                         ^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:38
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |                                      ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:12:56
   |
LL | pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {
   |                                                        ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:69:9
   |
LL |     let some_var = 5;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:82:9
   |
LL |     let src_vec = vec![1, 2, 3, 4, 5];
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:95:5
   |
LL |     struct DummyStruct(i32);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:97:5
   |
LL |     impl ::std::ops::Index<usize> for DummyStruct {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:100:9
   |
LL |         fn index(&self, _: usize) -> &i32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:100:9
   |
LL |         fn index(&self, _: usize) -> &i32 {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:100:19
   |
LL |         fn index(&self, _: usize) -> &i32 {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:100:18
   |
LL |         fn index(&self, _: usize) -> &i32 {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:100:38
   |
LL |         fn index(&self, _: usize) -> &i32 {
   |                                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:101:13
   |
LL |             &self.0
   |             ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:105:9
   |
LL |     let src = DummyStruct(5);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:113:9
   |
LL |     let src = [0, 1, 2, 3, 4];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:115:9
   |
LL |     let from = 1;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:150:9
   |
LL |     let src = std::collections::VecDeque::from_iter([0, 1, 2, 3, 4]);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:154:9
   |
LL |     let src = vec![0, 1, 2, 3, 4];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:160:9
   |
LL |     let src = [0, 1, 2, 3, 4];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:183:9
   |
LL |     let src = [[0; 5]; 5];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:194:9
   |
LL |     let src = [0; 5];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:200:9
   |
LL |     let src = [[[0; 5]; 5]; 5];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:222:9
   |
LL |     let src = [[0; 5]; 5];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:230:9
   |
LL |     let src = [[[0; 5]; 5]; 5];
   |         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:239:5
   |
LL | pub fn manual_clone(src: &[String], dst: &mut [String]) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:239:5
   |
LL | pub fn manual_clone(src: &[String], dst: &mut [String]) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:239:21
   |
LL | pub fn manual_clone(src: &[String], dst: &mut [String]) {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:239:37
   |
LL | pub fn manual_clone(src: &[String], dst: &mut [String]) {
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:239:26
   |
LL | pub fn manual_clone(src: &[String], dst: &mut [String]) {
   |                          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_memcpy/without_loop_counters.rs:239:42
   |
LL | pub fn manual_clone(src: &[String], dst: &mut [String]) {
   |                                          ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:247:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:247:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_memcpy/without_loop_counters.rs:247:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 39 previous errors

