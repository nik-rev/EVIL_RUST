error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:12:1
   |
LL | fn bad1(string: Option<&str>) -> (bool, &str) {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:12:1
   |
LL | fn bad1(string: Option<&str>) -> (bool, &str) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:12:1
   |
LL | fn bad1(string: Option<&str>) -> (bool, &str) {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:12:9
   |
LL | fn bad1(string: Option<&str>) -> (bool, &str) {
   |         ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:12:24
   |
LL | fn bad1(string: Option<&str>) -> (bool, &str) {
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:12:41
   |
LL | fn bad1(string: Option<&str>) -> (bool, &str) {
   |                                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:21:1
   |
LL | fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:21:1
   |
LL | fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:21:1
   |
LL | fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:21:19
   |
LL | fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:21:34
   |
LL | fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:21:58
   |
LL | fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {
   |                                                          ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:31:1
   |
LL | fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:31:1
   |
LL | fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:31:1
   |
LL | fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:31:13
   |
LL | fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:31:21
   |
LL | fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {
   |                     ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:31:29
   |
LL | fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {
   |                             ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:34:30
   |
LL |     let _ = if let Some(s) = &num { s } else { &0 };
   |                              ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:34:48
   |
LL |     let _ = if let Some(s) = &num { s } else { &0 };
   |                                                ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:36:30
   |
LL |     let _ = if let Some(s) = &mut num {
   |                              ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:41:9
   |
LL |         &0
   |         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/option_if_let_else.rs:43:25
   |
LL |     let _ = if let Some(ref s) = num { s } else { &0 };
   |                         ^^^^^

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:43:51
   |
LL |     let _ = if let Some(ref s) = num { s } else { &0 };
   |                                                   ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/option_if_let_else.rs:52:25
   |
LL |     let _ = if let Some(ref mut s) = num {
   |                         ^^^^^^^^^

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:57:9
   |
LL |         &0
   |         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:61:1
   |
LL | fn longer_body(arg: Option<u32>) -> u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:61:1
   |
LL | fn longer_body(arg: Option<u32>) -> u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:61:1
   |
LL | fn longer_body(arg: Option<u32>) -> u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:61:16
   |
LL | fn longer_body(arg: Option<u32>) -> u32 {
   |                ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:64:13
   |
LL |         let y = x * x;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:71:1
   |
LL | fn impure_else(arg: Option<i32>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:71:1
   |
LL | fn impure_else(arg: Option<i32>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:71:1
   |
LL | fn impure_else(arg: Option<i32>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:71:16
   |
LL | fn impure_else(arg: Option<i32>) {
   |                ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:72:9
   |
LL |     let side_effect = || {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:85:1
   |
LL | fn test_map_or_else(arg: Option<u32>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:85:1
   |
LL | fn test_map_or_else(arg: Option<u32>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:85:1
   |
LL | fn test_map_or_else(arg: Option<u32>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:85:21
   |
LL | fn test_map_or_else(arg: Option<u32>) {
   |                     ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:97:1
   |
LL | fn negative_tests(arg: Option<u32>) -> u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:97:1
   |
LL | fn negative_tests(arg: Option<u32>) -> u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:97:1
   |
LL | fn negative_tests(arg: Option<u32>) -> u32 {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:97:19
   |
LL | fn negative_tests(arg: Option<u32>) -> u32 {
   |                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:115:1
   |
LL | fn pattern_to_vec(pattern: &str) -> Vec<String> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:115:1
   |
LL | fn pattern_to_vec(pattern: &str) -> Vec<String> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:115:1
   |
LL | fn pattern_to_vec(pattern: &str) -> Vec<String> {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:115:19
   |
LL | fn pattern_to_vec(pattern: &str) -> Vec<String> {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:115:28
   |
LL | fn pattern_to_vec(pattern: &str) -> Vec<String> {
   |                            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:131:1
   |
LL | fn test_result_impure_else(variable: Result<u32, &str>) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:131:1
   |
LL | fn test_result_impure_else(variable: Result<u32, &str>) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:131:1
   |
LL | fn test_result_impure_else(variable: Result<u32, &str>) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:131:28
   |
LL | fn test_result_impure_else(variable: Result<u32, &str>) -> bool {
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:131:50
   |
LL | fn test_result_impure_else(variable: Result<u32, &str>) -> bool {
   |                                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:142:1
   |
LL | enum DummyEnum {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:149:1
   |
LL | fn complex_subpat() -> DummyEnum {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:149:1
   |
LL | fn complex_subpat() -> DummyEnum {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:149:1
   |
LL | fn complex_subpat() -> DummyEnum {
   | ^

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:150:9
   |
LL |     let x = Some(DummyEnum::One(1));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:155:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:155:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:155:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:156:9
   |
LL |     let optional = Some(5);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:161:14
   |
LL |     unop_bad(&None, None);
   |              ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:180:5
   |
LL |     const fn _f(x: Option<u32>) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:180:11
   |
LL |     const fn _f(x: Option<u32>) -> u32 {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:180:11
   |
LL |     const fn _f(x: Option<u32>) -> u32 {
   |           ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:180:17
   |
LL |     const fn _f(x: Option<u32>) -> u32 {
   |                 ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:186:9
   |
LL |     let s = String::new();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:189:13
   |
LL |         let s = s;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:195:9
   |
LL |     let s = String::new();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:200:9
   |
LL |     let s = String::new();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:204:13
   |
LL |         let s = s;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:210:9
   |
LL |     let s = Some(String::new());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:212:30
   |
LL |     let _ = if let Some(x) = &s {
   |                              ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:215:13
   |
LL |         let _s = s;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:221:30
   |
LL |     let _ = if let Some(x) = &mut s {
   |                              ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:225:13
   |
LL |         let _s = &s;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:225:18
   |
LL |         let _s = &s;
   |                  ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:229:5
   |
LL |     async fn _f1(x: u32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:229:11
   |
LL |     async fn _f1(x: u32) -> u32 {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:229:11
   |
LL |     async fn _f1(x: u32) -> u32 {
   |           ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:229:18
   |
LL |     async fn _f1(x: u32) -> u32 {
   |                  ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:233:5
   |
LL |     async fn _f2() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:233:11
   |
LL |     async fn _f2() {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:233:11
   |
LL |     async fn _f2() {
   |           ^

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:253:9
   |
LL |     let res: Result<i32, i32> = Ok(5);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:269:1
   |
LL | fn issue9742() -> Option<&'static str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:269:1
   |
LL | fn issue9742() -> Option<&'static str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:269:1
   |
LL | fn issue9742() -> Option<&'static str> {
   | ^

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:269:26
   |
LL | fn issue9742() -> Option<&'static str> {
   |                          ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:277:1
   |
LL | mod issue10729 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:280:9
   |
LL |     pub fn reproduce(initial: &Option<String>) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:280:9
   |
LL |     pub fn reproduce(initial: &Option<String>) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:280:22
   |
LL |     pub fn reproduce(initial: &Option<String>) {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:280:31
   |
LL |     pub fn reproduce(initial: &Option<String>) {
   |                               ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:289:9
   |
LL |     pub fn reproduce2(initial: &mut Option<String>) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:289:9
   |
LL |     pub fn reproduce2(initial: &mut Option<String>) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:289:23
   |
LL |     pub fn reproduce2(initial: &mut Option<String>) {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:289:32
   |
LL |     pub fn reproduce2(initial: &mut Option<String>) {
   |                                ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:297:5
   |
LL |     fn do_something(_value: &str) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:297:5
   |
LL |     fn do_something(_value: &str) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:297:5
   |
LL |     fn do_something(_value: &str) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:297:21
   |
LL |     fn do_something(_value: &str) -> u32 {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:297:29
   |
LL |     fn do_something(_value: &str) -> u32 {
   |                             ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:300:5
   |
LL |     fn do_something2(_value: &mut str) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:300:5
   |
LL |     fn do_something2(_value: &mut str) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:300:5
   |
LL |     fn do_something2(_value: &mut str) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:300:22
   |
LL |     fn do_something2(_value: &mut str) -> u32 {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:300:30
   |
LL |     fn do_something2(_value: &mut str) -> u32 {
   |                              ^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:305:1
   |
LL | fn issue11429() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:305:1
   |
LL | fn issue11429() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:305:1
   |
LL | fn issue11429() {
   | ^

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:308:5
   |
LL |     macro_rules! new_map {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/option_if_let_else.rs:312:9
   |
LL |     let opt: Option<HashMap<u8, u8>> = None;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:314:42
   |
LL |     let mut _hashmap = if let Some(hm) = &opt {
   |                                          ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:321:37
   |
LL |     let mut _hm = if let Some(hm) = &opt { hm.clone() } else { new_map!() };
   |                                     ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:325:1
   |
LL | fn issue11893() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:325:1
   |
LL | fn issue11893() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:325:1
   |
LL | fn issue11893() {
   | ^

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:335:1
   |
LL | mod issue13964 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:337:5
   |
LL |     struct A(Option<String>);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:336:14
   |
LL |     #[derive(Debug)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:336:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:336:11
   |
LL |     #[derive(Debug)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:336:14
   |
LL |     #[derive(Debug)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:336:14
   |
LL |     #[derive(Debug)]
   |              ^

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:336:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:336:14
   |
LL |     #[derive(Debug)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:337:14
   |
LL |     #[derive(Debug)]
   |              ----- in this derive macro expansion
LL |     struct A(Option<String>);
   |              ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:337:14
   |
LL |     #[derive(Debug)]
   |              ----- in this derive macro expansion
LL |     struct A(Option<String>);
   |              ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:339:5
   |
LL |     fn foo(a: A) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:339:5
   |
LL |     fn foo(a: A) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:339:5
   |
LL |     fn foo(a: A) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:339:12
   |
LL |     fn foo(a: A) {
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:346:5
   |
LL |     fn bar(a: A) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:346:5
   |
LL |     fn bar(a: A) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:346:5
   |
LL |     fn bar(a: A) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:346:12
   |
LL |     fn bar(a: A) {
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:355:1
   |
LL | mod issue11059 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:358:5
   |
LL |     fn box_coercion_unsize(o: Option<i32>) -> Box<dyn Debug> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:358:5
   |
LL |     fn box_coercion_unsize(o: Option<i32>) -> Box<dyn Debug> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:358:5
   |
LL |     fn box_coercion_unsize(o: Option<i32>) -> Box<dyn Debug> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:358:28
   |
LL |     fn box_coercion_unsize(o: Option<i32>) -> Box<dyn Debug> {
   |                            ^ help: make this parameter mutable: `mut`

error: static must be `mut`
  --> tests/ui/option_if_let_else.rs:362:12
   |
LL |     static S: String = String::new();
   |            ^ help: make this static mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:362:5
   |
LL |     static S: String = String::new();
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_if_let_else.rs:364:5
   |
LL |     fn deref_with_overload(o: Option<&str>) -> &str {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_if_let_else.rs:364:5
   |
LL |     fn deref_with_overload(o: Option<&str>) -> &str {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_if_let_else.rs:364:5
   |
LL |     fn deref_with_overload(o: Option<&str>) -> &str {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_if_let_else.rs:364:28
   |
LL |     fn deref_with_overload(o: Option<&str>) -> &str {
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:364:38
   |
LL |     fn deref_with_overload(o: Option<&str>) -> &str {
   |                                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:364:48
   |
LL |     fn deref_with_overload(o: Option<&str>) -> &str {
   |                                                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/option_if_let_else.rs:365:41
   |
LL |         if let Some(o) = o { o } else { &S }
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 131 previous errors

