error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/option_as_ref_deref.rs:8:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/option_as_ref_deref.rs:8:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_as_ref_deref.rs:8:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/option_as_ref_deref.rs:49:9
   |
LL |     let vc = vec![String::new()];
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/option_as_ref_deref.rs:52:19
   |
LL |     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted
   |                   ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/option_as_ref_deref.rs:52:32
   |
LL |     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted
   |                                ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/option_as_ref_deref.rs:54:34
   |
LL |     let _ = opt.as_ref().map(|x| &**x);
   |                                  ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/option_as_ref_deref.rs:56:34
   |
LL |     let _ = opt.as_mut().map(|x| &mut **x);
   |                                  ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/option_as_ref_deref.rs:65:1
   |
LL | fn msrv_1_39() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_as_ref_deref.rs:65:1
   |
LL | fn msrv_1_39() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_as_ref_deref.rs:65:1
   |
LL | fn msrv_1_39() {
   | ^

error: variable must be `mut`
  --> tests/ui/option_as_ref_deref.rs:66:9
   |
LL |     let opt = Some(String::from("123"));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_as_ref_deref.rs:71:1
   |
LL | fn msrv_1_40() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_as_ref_deref.rs:71:1
   |
LL | fn msrv_1_40() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_as_ref_deref.rs:71:1
   |
LL | fn msrv_1_40() {
   | ^

error: variable must be `mut`
  --> tests/ui/option_as_ref_deref.rs:72:9
   |
LL |     let opt = Some(String::from("123"));
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 17 previous errors

