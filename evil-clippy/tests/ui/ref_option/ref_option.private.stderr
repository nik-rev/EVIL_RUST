error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:8:1
   |
LL | fn opt_u8(a: &Option<u8>) {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:8:1
   |
LL | fn opt_u8(a: &Option<u8>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:8:1
   |
LL | fn opt_u8(a: &Option<u8>) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:8:11
   |
LL | fn opt_u8(a: &Option<u8>) {}
   |           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:8:14
   |
LL | fn opt_u8(a: &Option<u8>) {}
   |              ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:10:1
   |
LL | fn opt_gen<T>(a: &Option<T>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:10:1
   |
LL | fn opt_gen<T>(a: &Option<T>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:10:1
   |
LL | fn opt_gen<T>(a: &Option<T>) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:10:15
   |
LL | fn opt_gen<T>(a: &Option<T>) {}
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:10:18
   |
LL | fn opt_gen<T>(a: &Option<T>) {}
   |                  ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:12:1
   |
LL | fn opt_string(a: &std::option::Option<String>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:12:1
   |
LL | fn opt_string(a: &std::option::Option<String>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:12:1
   |
LL | fn opt_string(a: &std::option::Option<String>) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:12:15
   |
LL | fn opt_string(a: &std::option::Option<String>) {}
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:12:18
   |
LL | fn opt_string(a: &std::option::Option<String>) {}
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:14:1
   |
LL | fn ret_string<'a>(p: &'a str) -> &'a Option<u8> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:14:1
   |
LL | fn ret_string<'a>(p: &'a str) -> &'a Option<u8> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:14:1
   |
LL | fn ret_string<'a>(p: &'a str) -> &'a Option<u8> {
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:14:19
   |
LL | fn ret_string<'a>(p: &'a str) -> &'a Option<u8> {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:14:22
   |
LL | fn ret_string<'a>(p: &'a str) -> &'a Option<u8> {
   |                      ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:14:34
   |
LL | fn ret_string<'a>(p: &'a str) -> &'a Option<u8> {
   |                                  ^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:16:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:16:5
   |
LL |     panic!()
   |     ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:16:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:18:1
   |
LL | fn ret_string_static() -> &'static Option<u8> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:18:1
   |
LL | fn ret_string_static() -> &'static Option<u8> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:18:1
   |
LL | fn ret_string_static() -> &'static Option<u8> {
   | ^

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:18:27
   |
LL | fn ret_string_static() -> &'static Option<u8> {
   |                           ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:20:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:20:5
   |
LL |     panic!()
   |     ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:20:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:22:1
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:22:1
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:22:1
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:22:16
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:22:36
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:22:19
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                   ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:22:39
   |
LL | fn mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                                       ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:24:1
   |
LL | fn ret_box<'a>() -> &'a Option<Box<u8>> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:24:1
   |
LL | fn ret_box<'a>() -> &'a Option<Box<u8>> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:24:1
   |
LL | fn ret_box<'a>() -> &'a Option<Box<u8>> {
   | ^

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:24:21
   |
LL | fn ret_box<'a>() -> &'a Option<Box<u8>> {
   |                     ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:26:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:26:5
   |
LL |     panic!()
   |     ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:26:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:29:5
   |
LL | pub fn pub_opt_string(a: &Option<String>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:29:5
   |
LL | pub fn pub_opt_string(a: &Option<String>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:29:23
   |
LL | pub fn pub_opt_string(a: &Option<String>) {}
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:29:26
   |
LL | pub fn pub_opt_string(a: &Option<String>) {}
   |                          ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:31:5
   |
LL | pub fn pub_mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:31:5
   |
LL | pub fn pub_mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:31:24
   |
LL | pub fn pub_mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                        ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:31:44
   |
LL | pub fn pub_mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:31:27
   |
LL | pub fn pub_mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                           ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:31:47
   |
LL | pub fn pub_mult_string(a: &Option<String>, b: &Option<Vec<u8>>) {}
   |                                               ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:34:1
   |
LL | / pub trait PubTrait {
LL | |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
LL | |
LL | |     fn pub_trait_ret(&self) -> &Option<Vec<u8>>;
LL | |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:35:5
   |
LL |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:35:5
   |
LL |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:35:23
   |
LL |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:35:29
   |
LL |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:35:22
   |
LL |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:35:32
   |
LL |     fn pub_trait_opt(&self, a: &Option<Vec<u8>>);
   |                                ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:37:5
   |
LL |     fn pub_trait_ret(&self) -> &Option<Vec<u8>>;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:37:5
   |
LL |     fn pub_trait_ret(&self) -> &Option<Vec<u8>>;
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:37:23
   |
LL |     fn pub_trait_ret(&self) -> &Option<Vec<u8>>;
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:37:22
   |
LL |     fn pub_trait_ret(&self) -> &Option<Vec<u8>>;
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:37:32
   |
LL |     fn pub_trait_ret(&self) -> &Option<Vec<u8>>;
   |                                ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:41:1
   |
LL | / trait PrivateTrait {
LL | |     fn trait_opt(&self, a: &Option<String>);
LL | |
LL | |     fn trait_ret(&self) -> &Option<String>;
LL | |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:41:1
   |
LL | trait PrivateTrait {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:42:5
   |
LL |     fn trait_opt(&self, a: &Option<String>);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:42:5
   |
LL |     fn trait_opt(&self, a: &Option<String>);
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:42:19
   |
LL |     fn trait_opt(&self, a: &Option<String>);
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:42:25
   |
LL |     fn trait_opt(&self, a: &Option<String>);
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:42:18
   |
LL |     fn trait_opt(&self, a: &Option<String>);
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:42:28
   |
LL |     fn trait_opt(&self, a: &Option<String>);
   |                            ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:44:5
   |
LL |     fn trait_ret(&self) -> &Option<String>;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:44:5
   |
LL |     fn trait_ret(&self) -> &Option<String>;
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:44:19
   |
LL |     fn trait_ret(&self) -> &Option<String>;
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:44:18
   |
LL |     fn trait_ret(&self) -> &Option<String>;
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:44:28
   |
LL |     fn trait_ret(&self) -> &Option<String>;
   |                            ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:50:1
   |
LL | impl PubStruct {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:51:9
   |
LL |     pub fn pub_opt_params(&self, a: &Option<()>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:51:9
   |
LL |     pub fn pub_opt_params(&self, a: &Option<()>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:51:28
   |
LL |     pub fn pub_opt_params(&self, a: &Option<()>) {}
   |                            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:51:34
   |
LL |     pub fn pub_opt_params(&self, a: &Option<()>) {}
   |                                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:51:27
   |
LL |     pub fn pub_opt_params(&self, a: &Option<()>) {}
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:51:37
   |
LL |     pub fn pub_opt_params(&self, a: &Option<()>) {}
   |                                     ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:53:9
   |
LL |     pub fn pub_opt_ret(&self) -> &Option<String> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:53:9
   |
LL |     pub fn pub_opt_ret(&self) -> &Option<String> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:53:25
   |
LL |     pub fn pub_opt_ret(&self) -> &Option<String> {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:53:24
   |
LL |     pub fn pub_opt_ret(&self) -> &Option<String> {
   |                        ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:53:34
   |
LL |     pub fn pub_opt_ret(&self) -> &Option<String> {
   |                                  ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:55:9
   |
LL |         panic!()
   |         ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:55:9
   |
LL |         panic!()
   |         ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:55:9
   |
LL |         panic!()
   |         ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:58:5
   |
LL |     fn private_opt_params(&self, a: &Option<()>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:58:5
   |
LL |     fn private_opt_params(&self, a: &Option<()>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:58:28
   |
LL |     fn private_opt_params(&self, a: &Option<()>) {}
   |                            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:58:34
   |
LL |     fn private_opt_params(&self, a: &Option<()>) {}
   |                                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:58:27
   |
LL |     fn private_opt_params(&self, a: &Option<()>) {}
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:58:37
   |
LL |     fn private_opt_params(&self, a: &Option<()>) {}
   |                                     ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:60:5
   |
LL |     fn private_opt_ret(&self) -> &Option<String> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:60:5
   |
LL |     fn private_opt_ret(&self) -> &Option<String> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:60:25
   |
LL |     fn private_opt_ret(&self) -> &Option<String> {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:60:24
   |
LL |     fn private_opt_ret(&self) -> &Option<String> {
   |                        ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:60:34
   |
LL |     fn private_opt_ret(&self) -> &Option<String> {
   |                                  ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:62:9
   |
LL |         panic!()
   |         ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:62:9
   |
LL |         panic!()
   |         ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:62:9
   |
LL |         panic!()
   |         ^^^^^^^^

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:67:1
   |
LL | fn mut_u8(a: &mut Option<u8>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:67:1
   |
LL | fn mut_u8(a: &mut Option<u8>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:67:1
   |
LL | fn mut_u8(a: &mut Option<u8>) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:67:11
   |
LL | fn mut_u8(a: &mut Option<u8>) {}
   |           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:67:14
   |
LL | fn mut_u8(a: &mut Option<u8>) {}
   |              ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:68:5
   |
LL | pub fn pub_mut_u8(a: &mut Option<String>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:68:5
   |
LL | pub fn pub_mut_u8(a: &mut Option<String>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:68:19
   |
LL | pub fn pub_mut_u8(a: &mut Option<String>) {}
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:68:22
   |
LL | pub fn pub_mut_u8(a: &mut Option<String>) {}
   |                      ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:71:1
   |
LL | fn mut_u8_ref(a: &mut &Option<u8>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:71:1
   |
LL | fn mut_u8_ref(a: &mut &Option<u8>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:71:1
   |
LL | fn mut_u8_ref(a: &mut &Option<u8>) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:71:15
   |
LL | fn mut_u8_ref(a: &mut &Option<u8>) {}
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:71:18
   |
LL | fn mut_u8_ref(a: &mut &Option<u8>) {}
   |                  ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:71:23
   |
LL | fn mut_u8_ref(a: &mut &Option<u8>) {}
   |                       ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:72:5
   |
LL | pub fn pub_mut_u8_ref(a: &mut &Option<String>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:72:5
   |
LL | pub fn pub_mut_u8_ref(a: &mut &Option<String>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option/ref_option.rs:72:23
   |
LL | pub fn pub_mut_u8_ref(a: &mut &Option<String>) {}
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:72:26
   |
LL | pub fn pub_mut_u8_ref(a: &mut &Option<String>) {}
   |                          ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:72:31
   |
LL | pub fn pub_mut_u8_ref(a: &mut &Option<String>) {}
   |                               ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:73:1
   |
LL | fn lambdas() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:73:1
   |
LL | fn lambdas() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:73:1
   |
LL | fn lambdas() {
   | ^

error: variable must be `mut`
  --> tests/ui/ref_option/ref_option.rs:75:9
   |
LL |     let x = |a: &Option<String>| {};
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:75:17
   |
LL |     let x = |a: &Option<String>| {};
   |                 ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/ref_option/ref_option.rs:76:9
   |
LL |     let x = |a: &Option<String>| -> &Option<String> { panic!() };
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:76:17
   |
LL |     let x = |a: &Option<String>| -> &Option<String> { panic!() };
   |                 ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option/ref_option.rs:76:37
   |
LL |     let x = |a: &Option<String>| -> &Option<String> { panic!() };
   |                                     ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:76:55
   |
LL |     let x = |a: &Option<String>| -> &Option<String> { panic!() };
   |                                                       ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:76:55
   |
LL |     let x = |a: &Option<String>| -> &Option<String> { panic!() };
   |                                                       ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:76:55
   |
LL |     let x = |a: &Option<String>| -> &Option<String> { panic!() };
   |                                                       ^^^^^^^^

error: item must be `pub`
  --> tests/ui/ref_option/ref_option.rs:79:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option/ref_option.rs:79:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option/ref_option.rs:79:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 118 previous errors

