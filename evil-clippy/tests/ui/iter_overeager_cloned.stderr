error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/iter_overeager_cloned.rs:9:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:9:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:9:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:10:9
   |
LL |     let vec = vec!["1".to_string(), "2".to_string(), "3".to_string()];
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:18:47
   |
LL |     let _: usize = vec.iter().filter(|x| x == &"2").cloned().count();
   |                                               ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:27:40
   |
LL |     let _ = vec.iter().filter(|x| x == &"2").cloned().nth(2);
   |                                        ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:43:13
   |
LL |         let f = |x: &String| x.starts_with('2');
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:43:21
   |
LL |         let f = |x: &String| x.starts_with('2');
   |                     ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:51:13
   |
LL |         let vec: Vec<(String, String)> = vec![];
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:52:13
   |
LL |         let f = move |x: &(String, String)| x.0.starts_with('2');
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:52:26
   |
LL |         let f = move |x: &(String, String)| x.0.starts_with('2');
   |                          ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/iter_overeager_cloned.rs:59:5
   |
LL |     fn test_move<'a>(
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:59:5
   |
LL |     fn test_move<'a>(
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:59:5
   |
LL |     fn test_move<'a>(
   |     ^

error: parameter must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:60:9
   |
LL |         iter: impl Iterator<Item = &'a (&'a u32, String)> + 'a,
   |         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:61:9
   |
LL |         target: String,
   |         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:60:36
   |
LL |         iter: impl Iterator<Item = &'a (&'a u32, String)> + 'a,
   |                                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:60:41
   |
LL |         iter: impl Iterator<Item = &'a (&'a u32, String)> + 'a,
   |                                         ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:62:32
   |
LL |     ) -> impl Iterator<Item = (&'a u32, String)> + 'a {
   |                                ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/iter_overeager_cloned.rs:63:42
   |
LL |         iter.cloned().filter(move |&(&a, ref b)| a == 1 && b == &target)
   |                                          ^^^^^

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:63:65
   |
LL |         iter.cloned().filter(move |&(&a, ref b)| a == 1 && b == &target)
   |                                                                 ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/iter_overeager_cloned.rs:69:9
   |
LL |         struct S<'a> {
   |         ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:70:16
   |
LL |             a: &'a u32,
   |                ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/iter_overeager_cloned.rs:68:18
   |
LL |         #[derive(Clone)]
   |                  ^

error: function must be `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:68:15
   |
LL |         #[derive(Clone)]
   |               ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:68:15
   |
LL |         #[derive(Clone)]
   |               ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:68:18
   |
LL |         #[derive(Clone)]
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:68:18
   |
LL |         #[derive(Clone)]
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:70:13
   |
LL |         #[derive(Clone)]
   |                  ----- in this derive macro expansion
LL |         struct S<'a> {
LL |             a: &'a u32,
   |             ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:71:13
   |
LL |         #[derive(Clone)]
   |                  ----- in this derive macro expansion
...
LL |             b: String,
   |             ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/iter_overeager_cloned.rs:74:9
   |
LL |         fn bar<'a>(iter: impl Iterator<Item = &'a S<'a>> + 'a, target: String) -> impl Iterator<Item = S<'a>> + 'a {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:74:9
   |
LL |         fn bar<'a>(iter: impl Iterator<Item = &'a S<'a>> + 'a, target: String) -> impl Iterator<Item = S<'a>> + 'a {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:74:9
   |
LL |         fn bar<'a>(iter: impl Iterator<Item = &'a S<'a>> + 'a, target: String) -> impl Iterator<Item = S<'a>> + 'a {
   |         ^

error: parameter must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:74:20
   |
LL |         fn bar<'a>(iter: impl Iterator<Item = &'a S<'a>> + 'a, target: String) -> impl Iterator<Item = S<'a>> + 'a {
   |                    ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:74:64
   |
LL |         fn bar<'a>(iter: impl Iterator<Item = &'a S<'a>> + 'a, target: String) -> impl Iterator<Item = S<'a>> + 'a {
   |                                                                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:74:47
   |
LL |         fn bar<'a>(iter: impl Iterator<Item = &'a S<'a>> + 'a, target: String) -> impl Iterator<Item = S<'a>> + 'a {
   |                                               ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:75:69
   |
LL |             iter.cloned().filter(move |S { a, b }| **a == 1 && b == &target)
   |                                                                     ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/iter_overeager_cloned.rs:103:1
   |
LL | fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:103:1
   |
LL | fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/iter_overeager_cloned.rs:103:1
   |
LL | fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {
   | ^

error: parameter must be `mut`
  --> tests/ui/iter_overeager_cloned.rs:103:19
   |
LL | fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/iter_overeager_cloned.rs:103:29
   |
LL | fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {
   |                             ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 41 previous errors

