error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: trait must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:4:1
   |
LL | / trait A {
LL | |     fn provided() {}
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:4:1
   |
LL | trait A {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:5:5
   |
LL |     fn provided() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:5:5
   |
LL |     fn provided() {}
   |     ^

error: trait must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:8:1
   |
LL | / trait B {
LL | |     fn required();
LL | |
LL | |     fn a(_: usize) -> usize {
...  |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:8:1
   |
LL | trait B {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:9:5
   |
LL |     fn required();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:9:5
   |
LL |     fn required();
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:11:5
   |
LL |     fn a(_: usize) -> usize {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:11:5
   |
LL |     fn a(_: usize) -> usize {
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:15:5
   |
LL |     fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:15:5
   |
LL |     fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {
   |     ^

error: parameter must be `mut`
  --> tests/ui/missing_trait_methods.rs:15:30
   |
LL |     fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {
   |                              ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/missing_trait_methods.rs:15:33
   |
LL |     fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {
   |                                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/missing_trait_methods.rs:15:43
   |
LL |     fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {
   |                                           ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:20:1
   |
LL | struct Partial;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:22:1
   |
LL | impl A for Partial {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:25:1
   |
LL | impl B for Partial {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:28:5
   |
LL |     fn required() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:28:5
   |
LL |     fn required() {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:30:5
   |
LL |     fn a(_: usize) -> usize {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:30:5
   |
LL |     fn a(_: usize) -> usize {
   |     ^

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:35:1
   |
LL | struct Complete;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:37:1
   |
LL | impl A for Complete {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:38:5
   |
LL |     fn provided() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:38:5
   |
LL |     fn provided() {}
   |     ^

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:41:1
   |
LL | impl B for Complete {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:42:5
   |
LL |     fn required() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:42:5
   |
LL |     fn required() {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:44:5
   |
LL |     fn a(_: usize) -> usize {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:44:5
   |
LL |     fn a(_: usize) -> usize {
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:48:5
   |
LL |     fn b<T: AsRef<[u8]>>(a: &T) -> &[u8] {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:48:5
   |
LL |     fn b<T: AsRef<[u8]>>(a: &T) -> &[u8] {
   |     ^

error: parameter must be `mut`
  --> tests/ui/missing_trait_methods.rs:48:26
   |
LL |     fn b<T: AsRef<[u8]>>(a: &T) -> &[u8] {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/missing_trait_methods.rs:48:29
   |
LL |     fn b<T: AsRef<[u8]>>(a: &T) -> &[u8] {
   |                             ^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/missing_trait_methods.rs:48:36
   |
LL |     fn b<T: AsRef<[u8]>>(a: &T) -> &[u8] {
   |                                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:53:1
   |
LL | / trait MissingMultiple {
LL | |     fn one() {}
LL | |     fn two() {}
LL | |     fn three() {}
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:53:1
   |
LL | trait MissingMultiple {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:54:5
   |
LL |     fn one() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:54:5
   |
LL |     fn one() {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:55:5
   |
LL |     fn two() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:55:5
   |
LL |     fn two() {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:56:5
   |
LL |     fn three() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:56:5
   |
LL |     fn three() {}
   |     ^

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:59:1
   |
LL | impl MissingMultiple for Partial {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/missing_trait_methods.rs:64:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_trait_methods.rs:64:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_trait_methods.rs:64:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 38 previous errors

