error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:8:1
   |
LL | const STATUS_BAD_REQUEST: u16 = 400;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:9:1
   |
LL | const STATUS_SERVER_ERROR: u16 = 500;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:11:1
   |
LL | struct Status {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:15:1
   |
LL | impl PartialEq<u16> for Status {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_comparisons.rs:16:5
   |
LL |     fn eq(&self, other: &u16) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_comparisons.rs:16:5
   |
LL |     fn eq(&self, other: &u16) -> bool {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:16:12
   |
LL |     fn eq(&self, other: &u16) -> bool {
   |            ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:16:18
   |
LL |     fn eq(&self, other: &u16) -> bool {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:16:11
   |
LL |     fn eq(&self, other: &u16) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:16:25
   |
LL |     fn eq(&self, other: &u16) -> bool {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:21:1
   |
LL | impl PartialOrd<u16> for Status {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_comparisons.rs:22:5
   |
LL |     fn partial_cmp(&self, other: &u16) -> Option<std::cmp::Ordering> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_comparisons.rs:22:5
   |
LL |     fn partial_cmp(&self, other: &u16) -> Option<std::cmp::Ordering> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:22:21
   |
LL |     fn partial_cmp(&self, other: &u16) -> Option<std::cmp::Ordering> {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:22:27
   |
LL |     fn partial_cmp(&self, other: &u16) -> Option<std::cmp::Ordering> {
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:22:20
   |
LL |     fn partial_cmp(&self, other: &u16) -> Option<std::cmp::Ordering> {
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:22:34
   |
LL |     fn partial_cmp(&self, other: &u16) -> Option<std::cmp::Ordering> {
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:27:1
   |
LL | impl PartialEq<Status> for u16 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_comparisons.rs:28:5
   |
LL |     fn eq(&self, other: &Status) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_comparisons.rs:28:5
   |
LL |     fn eq(&self, other: &Status) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:28:12
   |
LL |     fn eq(&self, other: &Status) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:28:18
   |
LL |     fn eq(&self, other: &Status) -> bool {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:28:11
   |
LL |     fn eq(&self, other: &Status) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:28:25
   |
LL |     fn eq(&self, other: &Status) -> bool {
   |                         ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:33:1
   |
LL | impl PartialOrd<Status> for u16 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_comparisons.rs:34:5
   |
LL |     fn partial_cmp(&self, other: &Status) -> Option<std::cmp::Ordering> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_comparisons.rs:34:5
   |
LL |     fn partial_cmp(&self, other: &Status) -> Option<std::cmp::Ordering> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:34:21
   |
LL |     fn partial_cmp(&self, other: &Status) -> Option<std::cmp::Ordering> {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/const_comparisons.rs:34:27
   |
LL |     fn partial_cmp(&self, other: &Status) -> Option<std::cmp::Ordering> {
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:34:20
   |
LL |     fn partial_cmp(&self, other: &Status) -> Option<std::cmp::Ordering> {
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:34:34
   |
LL |     fn partial_cmp(&self, other: &Status) -> Option<std::cmp::Ordering> {
   |                                  ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_comparisons.rs:35:26
   |
LL |         self.partial_cmp(&other.code)
   |                          ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_comparisons.rs:39:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_comparisons.rs:39:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_comparisons.rs:39:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_comparisons.rs:40:9
   |
LL |     let status_code = 500; // Value doesn't matter for the lint
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_comparisons.rs:41:9
   |
LL |     let status = Status { code: status_code };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_comparisons.rs:130:9
   |
LL |     let name = "Steve";
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_comparisons.rs:134:9
   |
LL |     let numbers = [1, 2];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_comparisons.rs:138:9
   |
LL |     let letter = 'a';
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_comparisons.rs:142:9
   |
LL |     let area = 42.0;
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 40 previous errors

