error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:11:1
   |
LL | extern "C" fn eh_personality() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:11:1
   |
LL | extern "C" fn eh_personality() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:11:1
   |
LL | extern "C" fn eh_personality() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:14:1
   |
LL | fn panic(info: &PanicInfo) -> ! {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:14:1
   |
LL | fn panic(info: &PanicInfo) -> ! {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:14:1
   |
LL | fn panic(info: &PanicInfo) -> ! {
   | ^

error: parameter must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:14:10
   |
LL | fn panic(info: &PanicInfo) -> ! {
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:14:16
   |
LL | fn panic(info: &PanicInfo) -> ! {
   |                ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:18:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:18:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:18:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:20:13
   |
LL |         let single_u64: &[u64] = &[0xDEAD_BEEF_DEAD_BEEF];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:20:25
   |
LL |         let single_u64: &[u64] = &[0xDEAD_BEEF_DEAD_BEEF];
   |                         ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:20:34
   |
LL |         let single_u64: &[u64] = &[0xDEAD_BEEF_DEAD_BEEF];
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:21:13
   |
LL |         let bools: &[bool] = unsafe { core::mem::transmute(single_u64) };
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:21:20
   |
LL |         let bools: &[bool] = unsafe { core::mem::transmute(single_u64) };
   |                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:24:13
   |
LL |         let a: &[u32] = &[0x12345678, 0x90ABCDEF, 0xFEDCBA09, 0x87654321];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:24:16
   |
LL |         let a: &[u32] = &[0x12345678, 0x90ABCDEF, 0xFEDCBA09, 0x87654321];
   |                ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:24:25
   |
LL |         let a: &[u32] = &[0x12345678, 0x90ABCDEF, 0xFEDCBA09, 0x87654321];
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:25:13
   |
LL |         let b: &[u8] = unsafe { core::mem::transmute(a) };
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:25:16
   |
LL |         let b: &[u8] = unsafe { core::mem::transmute(a) };
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:28:13
   |
LL |         let bytes = &[1u8, 2u8, 3u8, 4u8] as &[u8];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:28:21
   |
LL |         let bytes = &[1u8, 2u8, 3u8, 4u8] as &[u8];
   |                     ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:28:46
   |
LL |         let bytes = &[1u8, 2u8, 3u8, 4u8] as &[u8];
   |                                              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/transmute_ref_to_ref_no_std.rs:29:13
   |
LL |         let alt_slice: &[u32] = unsafe { core::mem::transmute(bytes) };
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/transmute_ref_to_ref_no_std.rs:29:24
   |
LL |         let alt_slice: &[u32] = unsafe { core::mem::transmute(bytes) };
   |                        ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: transmute from a reference to a reference
  --> tests/ui/transmute_ref_to_ref_no_std.rs:21:39
   |
LL |         let bools: &[bool] = unsafe { core::mem::transmute(single_u64) };
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(single_u64 as *const [u64] as *const [bool])`
   |
note: the lint level is defined here
  --> tests/ui/transmute_ref_to_ref_no_std.rs:3:9
   |
LL | #![deny(clippy::transmute_ptr_to_ptr)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: transmute from a reference to a reference
  --> tests/ui/transmute_ref_to_ref_no_std.rs:25:33
   |
LL |         let b: &[u8] = unsafe { core::mem::transmute(a) };
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(a as *const [u32] as *const [u8])`

error: transmute from a reference to a reference
  --> tests/ui/transmute_ref_to_ref_no_std.rs:29:42
   |
LL |         let alt_slice: &[u32] = unsafe { core::mem::transmute(bytes) };
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(bytes as *const [u8] as *const [u32])`

error: aborting due to 29 previous errors

