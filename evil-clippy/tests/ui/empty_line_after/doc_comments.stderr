error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:8:1
   |
LL | fn first_in_crate() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:8:1
   |
LL | fn first_in_crate() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:8:1
   |
LL | fn first_in_crate() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:10:1
   |
LL | mod m {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:16:5
   |
LL |     fn first_in_module() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:16:5
   |
LL |     fn first_in_module() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:16:5
   |
LL |     fn first_in_module() {}
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:19:1
   |
LL | mod some_mod {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:22:5
   |
LL |     mod some_inner_mod {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:23:9
   |
LL |         fn some_noop() {}
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:23:9
   |
LL |         fn some_noop() {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:23:9
   |
LL |         fn some_noop() {}
   |         ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:30:5
   |
LL |     fn indented() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:30:5
   |
LL |     fn indented() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:30:5
   |
LL |     fn indented() {}
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:36:1
   |
LL | fn with_doc_and_newline() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:36:1
   |
LL | fn with_doc_and_newline() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:36:1
   |
LL | fn with_doc_and_newline() {}
   | ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:41:1
   |
LL | fn with_no_newline_and_comment() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:41:1
   |
LL | fn with_no_newline_and_comment() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:41:1
   |
LL | fn with_no_newline_and_comment() {}
   | ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:52:1
   |
LL | fn three_attributes() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:52:1
   |
LL | fn three_attributes() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:52:1
   |
LL | fn three_attributes() {}
   | ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:54:1
   |
LL | mod misattributed {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:59:5
   |
LL |     fn new_code() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:59:5
   |
LL |     fn new_code() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:59:5
   |
LL |     fn new_code() {}
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:73:5
   |
LL |     struct Multiple;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:76:1
   |
LL | mod block_comments {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:82:5
   |
LL |     fn first_in_module() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:82:5
   |
LL |     fn first_in_module() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:82:5
   |
LL |     fn first_in_module() {}
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:93:5
   |
LL |     fn new_code() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:93:5
   |
LL |     fn new_code() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:93:5
   |
LL |     fn new_code() {}
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:100:5
   |
LL |     fn new_code2() {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:100:5
   |
LL |     fn new_code2() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:100:5
   |
LL |     fn new_code2() {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:108:5
   |
LL | pub fn function() -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:108:5
   |
LL | pub fn function() -> bool {
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:113:10
   |
LL | #[derive(Clone, Copy)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:113:7
   |
LL | #[derive(Clone, Copy)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:113:7
   |
LL | #[derive(Clone, Copy)]
   |       ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/empty_line_after/doc_comments.rs:113:10
   |
LL | #[derive(Clone, Copy)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/empty_line_after/doc_comments.rs:113:10
   |
LL | #[derive(Clone, Copy)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:113:17
   |
LL | #[derive(Clone, Copy)]
   |                 ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:127:1
   |
LL | struct LineComment;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:145:1
   |
LL | fn empty_line_in_cfg_attr() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:145:1
   |
LL | fn empty_line_in_cfg_attr() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:145:1
   |
LL | fn empty_line_in_cfg_attr() {}
   | ^

error: trait must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:147:1
   |
LL | / trait Foo {
LL | |     fn bar();
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:147:1
   |
LL | trait Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:148:5
   |
LL |     fn bar();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:148:5
   |
LL |     fn bar();
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:151:1
   |
LL | impl Foo for LineComment {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:155:5
   |
LL |     fn bar() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:155:5
   |
LL |     fn bar() {}
   |     ^

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:162:1
   |
LL | impl LineComment {} // or any other nameless item kind
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_line_after/doc_comments.rs:164:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:164:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_line_after/doc_comments.rs:164:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 49 previous errors

