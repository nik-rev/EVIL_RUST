error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:6:1
   |
LL | enum FileType {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:5:10
   |
LL | #[derive(Clone, Copy)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:5:7
   |
LL | #[derive(Clone, Copy)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:5:7
   |
LL | #[derive(Clone, Copy)]
   |       ^  ----- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:5:10
   |
LL | #[derive(Clone, Copy)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:5:10
   |
LL | #[derive(Clone, Copy)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:5:17
   |
LL | #[derive(Clone, Copy)]
   |                 ^

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:12:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:12:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:12:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:13:9
   |
LL |     let path = std::path::Path::new("x");
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:15:25
   |
LL |     let _ = check_files(&[(FileType::Account, path)]);
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:19:29
   |
LL |     let _ = check_files_ref(&[(FileType::Account, path)]);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:20:29
   |
LL |     let _ = check_files_mut(&[(FileType::Account, path)]);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:21:33
   |
LL |     let _ = check_files_ref_mut(&[(FileType::Account, path)]);
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:22:38
   |
LL |     let _ = check_files_self_and_arg(&[(FileType::Account, path)]);
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:23:38
   |
LL |     let _ = check_files_mut_path_buf(&[(FileType::Account, std::path::PathBuf::new())]);
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:30:1
   |
LL | fn check_files(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:30:1
   |
LL | fn check_files(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:30:1
   |
LL | fn check_files(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:30:16
   |
LL | fn check_files(files: &[(FileType, &std::path::Path)]) -> bool {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:30:23
   |
LL | fn check_files(files: &[(FileType, &std::path::Path)]) -> bool {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:30:36
   |
LL | fn check_files(files: &[(FileType, &std::path::Path)]) -> bool {
   |                                    ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:33:13
   |
LL |         let other = match get_file_path(&t) {
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:33:41
   |
LL |         let other = match get_file_path(&t) {
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:46:1
   |
LL | fn check_files_vec(files: Vec<(FileType, &std::path::Path)>) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:46:1
   |
LL | fn check_files_vec(files: Vec<(FileType, &std::path::Path)>) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:46:1
   |
LL | fn check_files_vec(files: Vec<(FileType, &std::path::Path)>) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:46:20
   |
LL | fn check_files_vec(files: Vec<(FileType, &std::path::Path)>) -> bool {
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:46:42
   |
LL | fn check_files_vec(files: Vec<(FileType, &std::path::Path)>) -> bool {
   |                                          ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:49:13
   |
LL |         let other = match get_file_path(&t) {
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:49:41
   |
LL |         let other = match get_file_path(&t) {
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:62:1
   |
LL | fn check_files_ref(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:62:1
   |
LL | fn check_files_ref(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:62:1
   |
LL | fn check_files_ref(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:62:20
   |
LL | fn check_files_ref(files: &[(FileType, &std::path::Path)]) -> bool {
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:62:27
   |
LL | fn check_files_ref(files: &[(FileType, &std::path::Path)]) -> bool {
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:62:40
   |
LL | fn check_files_ref(files: &[(FileType, &std::path::Path)]) -> bool {
   |                                        ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/unnecessary_iter_cloned.rs:63:10
   |
LL |     for (ref t, path) in files.iter().copied() {
   |          ^^^^^

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:64:13
   |
LL |         let other = match get_file_path(t) {
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:78:1
   |
LL | fn check_files_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:78:1
   |
LL | fn check_files_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:78:1
   |
LL | fn check_files_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:78:20
   |
LL | fn check_files_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:78:27
   |
LL | fn check_files_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:78:40
   |
LL | fn check_files_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   |                                        ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:81:13
   |
LL |         let other = match get_file_path(&t) {
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:81:41
   |
LL |         let other = match get_file_path(&t) {
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:94:1
   |
LL | fn check_files_ref_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:94:1
   |
LL | fn check_files_ref_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:94:1
   |
LL | fn check_files_ref_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:94:24
   |
LL | fn check_files_ref_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:94:31
   |
LL | fn check_files_ref_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:94:44
   |
LL | fn check_files_ref_mut(files: &[(FileType, &std::path::Path)]) -> bool {
   |                                            ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/unnecessary_iter_cloned.rs:95:10
   |
LL |     for (ref mut t, path) in files.iter().copied() {
   |          ^^^^^^^^^

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:97:13
   |
LL |         let other = match get_file_path(t) {
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:110:1
   |
LL | fn check_files_self_and_arg(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:110:1
   |
LL | fn check_files_self_and_arg(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:110:1
   |
LL | fn check_files_self_and_arg(files: &[(FileType, &std::path::Path)]) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:110:29
   |
LL | fn check_files_self_and_arg(files: &[(FileType, &std::path::Path)]) -> bool {
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:110:36
   |
LL | fn check_files_self_and_arg(files: &[(FileType, &std::path::Path)]) -> bool {
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:110:49
   |
LL | fn check_files_self_and_arg(files: &[(FileType, &std::path::Path)]) -> bool {
   |                                                 ^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:112:13
   |
LL |         let other = match get_file_path(&t) {
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:112:41
   |
LL |         let other = match get_file_path(&t) {
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:126:1
   |
LL | fn check_files_mut_path_buf(files: &[(FileType, std::path::PathBuf)]) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:126:1
   |
LL | fn check_files_mut_path_buf(files: &[(FileType, std::path::PathBuf)]) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:126:1
   |
LL | fn check_files_mut_path_buf(files: &[(FileType, std::path::PathBuf)]) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:126:29
   |
LL | fn check_files_mut_path_buf(files: &[(FileType, std::path::PathBuf)]) -> bool {
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:126:36
   |
LL | fn check_files_mut_path_buf(files: &[(FileType, std::path::PathBuf)]) -> bool {
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:129:13
   |
LL |         let other = match get_file_path(&t) {
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:129:41
   |
LL |         let other = match get_file_path(&t) {
   |                                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:142:1
   |
LL | fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::Error> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:142:1
   |
LL | fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::Error> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:142:1
   |
LL | fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::Error> {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:142:18
   |
LL | fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::Error> {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:142:30
   |
LL | fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::Error> {
   |                              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:149:1
   |
LL | fn check_mut_iteratee_and_modify_inner_variable() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:149:1
   |
LL | fn check_mut_iteratee_and_modify_inner_variable() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:149:1
   |
LL | fn check_mut_iteratee_and_modify_inner_variable() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:150:5
   |
LL |     struct Test {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:155:5
   |
LL |     impl Test {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:156:9
   |
LL |         fn list(&self) -> &[String] {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:156:9
   |
LL |         fn list(&self) -> &[String] {
   |         ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:156:18
   |
LL |         fn list(&self) -> &[String] {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:156:17
   |
LL |         fn list(&self) -> &[String] {
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:156:27
   |
LL |         fn list(&self) -> &[String] {
   |                           ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:157:13
   |
LL |             &self.list
   |             ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:176:1
   |
LL | mod issue_12821 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:177:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:177:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:177:5
   |
LL |     fn foo() {
   |     ^

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:178:13
   |
LL |         let v: Vec<_> = "hello".chars().collect();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:186:5
   |
LL |     fn bar() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:186:5
   |
LL |     fn bar() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:186:5
   |
LL |     fn bar() {
   |     ^

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:187:13
   |
LL |         let v: Vec<_> = "hello".chars().collect();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:191:17
   |
LL |             let ref_c = &c;
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:191:25
   |
LL |             let ref_c = &c;
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_iter_cloned.rs:196:5
   |
LL |     fn baz() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:196:5
   |
LL |     fn baz() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_iter_cloned.rs:196:5
   |
LL |     fn baz() {
   |     ^

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:197:13
   |
LL |         let v: Vec<_> = "hello".chars().enumerate().collect();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:201:17
   |
LL |             let ref_c = &c;
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:201:25
   |
LL |             let ref_c = &c;
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/unnecessary_iter_cloned.rs:202:17
   |
LL |             let ref_i = &i;
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_iter_cloned.rs:202:25
   |
LL |             let ref_i = &i;
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 95 previous errors

