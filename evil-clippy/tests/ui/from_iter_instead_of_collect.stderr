error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:7:1
   |
LL | struct Foo(Vec<bool>);
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:9:1
   |
LL | impl FromIterator<bool> for Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:10:5
   |
LL |     fn from_iter<T: IntoIterator<Item = bool>>(_: T) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:10:5
   |
LL |     fn from_iter<T: IntoIterator<Item = bool>>(_: T) -> Self {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:15:1
   |
LL | impl<'a> FromIterator<&'a bool> for Foo {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:15:23
   |
LL | impl<'a> FromIterator<&'a bool> for Foo {
   |                       ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:16:5
   |
LL |     fn from_iter<T: IntoIterator<Item = &'a bool>>(iter: T) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:16:5
   |
LL |     fn from_iter<T: IntoIterator<Item = &'a bool>>(iter: T) -> Self {
   |     ^

error: parameter must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:16:52
   |
LL |     fn from_iter<T: IntoIterator<Item = &'a bool>>(iter: T) -> Self {
   |                                                    ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:16:41
   |
LL |     fn from_iter<T: IntoIterator<Item = &'a bool>>(iter: T) -> Self {
   |                                         ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:22:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:22:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:22:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:23:9
   |
LL |     let iter_expr = std::iter::repeat(5).take(5);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:27:30
   |
LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());
   |                              ^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:32:9
   |
LL |     let a = vec![0, 1, 2];
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:33:5
   |
LL |     assert_eq!(a, Vec::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:33:5
   |
LL |     assert_eq!(a, Vec::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:33:5
   |
LL |     assert_eq!(a, Vec::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:33:5
   |
LL |     assert_eq!(a, Vec::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:33:5
   |
LL |     assert_eq!(a, Vec::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:35:5
   |
LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:35:5
   |
LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:35:5
   |
LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:35:5
   |
LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:35:5
   |
LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:53:9
   |
LL |     let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:54:9
   |
LL |     let bm = BTreeMap::from_iter(values.iter().cloned());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:58:16
   |
LL |     bar.insert(&4, &'e');
   |                ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:58:20
   |
LL |     bar.insert(&4, &'e');
   |                    ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:73:21
   |
LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:77:1
   |
LL | fn issue14581() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:77:1
   |
LL | fn issue14581() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:77:1
   |
LL | fn issue14581() {
   | ^

error: variable must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:78:9
   |
LL |     let nums = [0, 1, 2];
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:79:13
   |
LL |     let _ = &String::from_iter(nums.iter().map(|&num| char::from_u32(num).unwrap()));
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:83:1
   |
LL | fn test_implicit_generic_args(iter: impl Iterator<Item = &'static i32> + Copy) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:83:1
   |
LL | fn test_implicit_generic_args(iter: impl Iterator<Item = &'static i32> + Copy) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:83:1
   |
LL | fn test_implicit_generic_args(iter: impl Iterator<Item = &'static i32> + Copy) {
   | ^

error: parameter must be `mut`
  --> tests/ui/from_iter_instead_of_collect.rs:83:31
   |
LL | fn test_implicit_generic_args(iter: impl Iterator<Item = &'static i32> + Copy) {
   |                               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:83:58
   |
LL | fn test_implicit_generic_args(iter: impl Iterator<Item = &'static i32> + Copy) {
   |                                                          ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:84:5
   |
LL |     struct S<'l, T = i32, const A: usize = 3, const B: usize = 3> {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:85:13
   |
LL |         a: [&'l T; A],
   |             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:86:13
   |
LL |         b: [&'l T; B],
   |             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/from_iter_instead_of_collect.rs:89:5
   |
LL |     impl<'l, T, const A: usize, const B: usize> FromIterator<&'l T> for S<'l, T, A, B> {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:89:62
   |
LL |     impl<'l, T, const A: usize, const B: usize> FromIterator<&'l T> for S<'l, T, A, B> {
   |                                                              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:90:9
   |
LL |         fn from_iter<I: IntoIterator<Item = &'l T>>(_: I) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/from_iter_instead_of_collect.rs:90:9
   |
LL |         fn from_iter<I: IntoIterator<Item = &'l T>>(_: I) -> Self {
   |         ^

error: references are not allowed
  --> tests/ui/from_iter_instead_of_collect.rs:90:45
   |
LL |         fn from_iter<I: IntoIterator<Item = &'l T>>(_: I) -> Self {
   |                                             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 47 previous errors

