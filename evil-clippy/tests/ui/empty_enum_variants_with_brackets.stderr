error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:12:1
   |
LL | enum TestEnum {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:22:1
   |
LL | mod issue12551 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:23:5
   |
LL |     enum EvenOdd {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:32:5
   |
LL |     fn even_odd(x: i32) -> EvenOdd {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:32:5
   |
LL |     fn even_odd(x: i32) -> EvenOdd {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:32:5
   |
LL |     fn even_odd(x: i32) -> EvenOdd {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/empty_enum_variants_with_brackets.rs:32:17
   |
LL |     fn even_odd(x: i32) -> EvenOdd {
   |                 ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:36:5
   |
LL |     fn natural_number(x: i32) -> NaturalOrNot {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:36:5
   |
LL |     fn natural_number(x: i32) -> NaturalOrNot {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:36:5
   |
LL |     fn natural_number(x: i32) -> NaturalOrNot {
   |     ^

error: parameter must be `mut`
  --> tests/ui/empty_enum_variants_with_brackets.rs:36:23
   |
LL |     fn natural_number(x: i32) -> NaturalOrNot {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:42:5
   |
LL |     enum NaturalOrNot {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:51:5
   |
LL |     enum RedundantParenthesesFunctionCall {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:60:5
   |
LL |     fn redundant_parentheses_function_call() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:60:5
   |
LL |     fn redundant_parentheses_function_call() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:60:5
   |
LL |     fn redundant_parentheses_function_call() {
   |     ^

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:68:5
   |
LL |     fn redundant_parentheses_function_call_2() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:68:5
   |
LL |     fn redundant_parentheses_function_call_2() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:68:5
   |
LL |     fn redundant_parentheses_function_call_2() {
   |     ^

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:74:5
   |
LL |     enum RedundantParenthesesFunctionCall2 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:83:1
   |
LL | enum TestEnumWithFeatures {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:92:1
   |
LL | enum Foo {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:91:10
   |
LL | #[derive(Clone)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:91:7
   |
LL | #[derive(Clone)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:91:7
   |
LL | #[derive(Clone)]
   |       ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/empty_enum_variants_with_brackets.rs:91:10
   |
LL | #[derive(Clone)]
   |          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/empty_enum_variants_with_brackets.rs:91:10
   |
LL | #[derive(Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:98:10
   |
LL | #[derive(Clone)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:98:7
   |
LL | #[derive(Clone)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:98:7
   |
LL | #[derive(Clone)]
   |       ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/empty_enum_variants_with_brackets.rs:98:10
   |
LL | #[derive(Clone)]
   |          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/empty_enum_variants_with_brackets.rs:98:10
   |
LL | #[derive(Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/empty_enum_variants_with_brackets.rs:105:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:105:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/empty_enum_variants_with_brackets.rs:105:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 32 previous errors

