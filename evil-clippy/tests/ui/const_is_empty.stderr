error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:4:1
   |
LL | fn test_literal() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:4:1
   |
LL | fn test_literal() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:4:1
   |
LL | fn test_literal() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:13:1
   |
LL | fn test_byte_literal() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:13:1
   |
LL | fn test_byte_literal() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:13:1
   |
LL | fn test_byte_literal() {
   | ^

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:22:1
   |
LL | fn test_no_mut() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:22:1
   |
LL | fn test_no_mut() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:22:1
   |
LL | fn test_no_mut() {
   | ^

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:29:1
   |
LL | fn test_propagated() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:29:1
   |
LL | fn test_propagated() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:29:1
   |
LL | fn test_propagated() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:30:9
   |
LL |     let empty = "";
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:31:9
   |
LL |     let non_empty = "foobar";
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:32:9
   |
LL |     let empty2 = empty;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:33:9
   |
LL |     let non_empty2 = non_empty;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:42:1
   |
LL | const EMPTY_STR: &str = "";
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:42:18
   |
LL | const EMPTY_STR: &str = "";
   |                  ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:43:1
   |
LL | const NON_EMPTY_STR: &str = "foo";
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:43:22
   |
LL | const NON_EMPTY_STR: &str = "foo";
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:44:1
   |
LL | const EMPTY_BSTR: &[u8] = b"";
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:44:19
   |
LL | const EMPTY_BSTR: &[u8] = b"";
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:45:1
   |
LL | const NON_EMPTY_BSTR: &[u8] = b"foo";
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:45:23
   |
LL | const NON_EMPTY_BSTR: &[u8] = b"foo";
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:46:1
   |
LL | const EMPTY_U8_SLICE: &[u8] = &[];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:46:23
   |
LL | const EMPTY_U8_SLICE: &[u8] = &[];
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:46:31
   |
LL | const EMPTY_U8_SLICE: &[u8] = &[];
   |                               ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:47:1
   |
LL | const NON_EMPTY_U8_SLICE: &[u8] = &[1, 2];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:47:27
   |
LL | const NON_EMPTY_U8_SLICE: &[u8] = &[1, 2];
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:47:35
   |
LL | const NON_EMPTY_U8_SLICE: &[u8] = &[1, 2];
   |                                   ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:48:1
   |
LL | const EMPTY_SLICE: &[u32] = &[];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:48:20
   |
LL | const EMPTY_SLICE: &[u32] = &[];
   |                    ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:48:29
   |
LL | const EMPTY_SLICE: &[u32] = &[];
   |                             ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:49:1
   |
LL | const NON_EMPTY_SLICE: &[u32] = &[1, 2];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:49:24
   |
LL | const NON_EMPTY_SLICE: &[u32] = &[1, 2];
   |                        ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:49:33
   |
LL | const NON_EMPTY_SLICE: &[u32] = &[1, 2];
   |                                 ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:50:1
   |
LL | const NON_EMPTY_SLICE_REPEAT: &[u32] = &[1; 2];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:50:31
   |
LL | const NON_EMPTY_SLICE_REPEAT: &[u32] = &[1; 2];
   |                               ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:50:40
   |
LL | const NON_EMPTY_SLICE_REPEAT: &[u32] = &[1; 2];
   |                                        ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:51:1
   |
LL | const EMPTY_ARRAY: [u32; 0] = [];
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:52:1
   |
LL | const EMPTY_ARRAY_REPEAT: [u32; 0] = [1; 0];
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:53:1
   |
LL | const NON_EMPTY_ARRAY: [u32; 2] = [1, 2];
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:54:1
   |
LL | const NON_EMPTY_ARRAY_REPEAT: [u32; 2] = [1; 2];
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:55:1
   |
LL | const EMPTY_REF_ARRAY: &[u32; 0] = &[];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:55:24
   |
LL | const EMPTY_REF_ARRAY: &[u32; 0] = &[];
   |                        ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:55:36
   |
LL | const EMPTY_REF_ARRAY: &[u32; 0] = &[];
   |                                    ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:56:1
   |
LL | const NON_EMPTY_REF_ARRAY: &[u32; 3] = &[1, 2, 3];
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:56:28
   |
LL | const NON_EMPTY_REF_ARRAY: &[u32; 3] = &[1, 2, 3];
   |                            ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:56:40
   |
LL | const NON_EMPTY_REF_ARRAY: &[u32; 3] = &[1, 2, 3];
   |                                        ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:58:1
   |
LL | fn test_from_const() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:58:1
   |
LL | fn test_from_const() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:58:1
   |
LL | fn test_from_const() {
   | ^

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:105:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:105:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:105:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:106:9
   |
LL |     let value = "foobar";
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:110:9
   |
LL |     let x = value;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:121:1
   |
LL | fn str_from_arg(var: &str) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:121:1
   |
LL | fn str_from_arg(var: &str) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:121:1
   |
LL | fn str_from_arg(var: &str) {
   | ^

error: parameter must be `mut`
  --> tests/ui/const_is_empty.rs:121:17
   |
LL | fn str_from_arg(var: &str) {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/const_is_empty.rs:121:22
   |
LL | fn str_from_arg(var: &str) {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:126:1
   |
LL | fn update_str() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:126:1
   |
LL | fn update_str() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:126:1
   |
LL | fn update_str() {
   | ^

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:134:1
   |
LL | fn macros() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:134:1
   |
LL | fn macros() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:134:1
   |
LL | fn macros() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:136:9
   |
LL |     let file = include_str!("const_is_empty.rs");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:140:9
   |
LL |     let var = env!("PATH");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:145:1
   |
LL | fn conditional_value() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:145:1
   |
LL | fn conditional_value() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:145:1
   |
LL | fn conditional_value() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:146:9
   |
LL |     let value;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:158:1
   |
LL | fn cfg_conditioned() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:158:1
   |
LL | fn cfg_conditioned() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:158:1
   |
LL | fn cfg_conditioned() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:162:9
   |
LL |     let val = "foo";
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:168:1
   |
LL | fn not_cfg_conditioned() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:168:1
   |
LL | fn not_cfg_conditioned() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:168:1
   |
LL | fn not_cfg_conditioned() {
   | ^

error: variable must be `mut`
  --> tests/ui/const_is_empty.rs:169:9
   |
LL |     let val = "";
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:175:1
   |
LL | const fn const_rand() -> &'static str {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:175:7
   |
LL | const fn const_rand() -> &'static str {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:175:7
   |
LL | const fn const_rand() -> &'static str {
   |       ^

error: references are not allowed
  --> tests/ui/const_is_empty.rs:175:26
   |
LL | const fn const_rand() -> &'static str {
   |                          ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:179:1
   |
LL | fn const_expressions() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:179:1
   |
LL | fn const_expressions() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:179:1
   |
LL | fn const_expressions() {
   | ^

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:187:1
   |
LL | fn constant_from_external_crate() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:187:1
   |
LL | fn constant_from_external_crate() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:187:1
   |
LL | fn constant_from_external_crate() {
   | ^

error: item must be `pub`
  --> tests/ui/const_is_empty.rs:192:1
   |
LL | fn issue_13106() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/const_is_empty.rs:192:1
   |
LL | fn issue_13106() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/const_is_empty.rs:192:1
   |
LL | fn issue_13106() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 83 previous errors

