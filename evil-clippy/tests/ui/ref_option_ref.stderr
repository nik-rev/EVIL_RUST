error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: static must be `mut`
  --> tests/ui/ref_option_ref.rs:9:8
   |
LL | static THRESHOLD: i32 = 10;
   |        ^ help: make this static mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:9:1
   |
LL | static THRESHOLD: i32 = 10;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: static must be `mut`
  --> tests/ui/ref_option_ref.rs:10:8
   |
LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);
   |        ^ help: make this static mutable: `mut`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:10:1
   |
LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:10:23
   |
LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);
   |                       ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:10:31
   |
LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);
   |                               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:10:39
   |
LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);
   |                                       ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:10:45
   |
LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);
   |                                             ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:13:1
   |
LL | const CONST_THRESHOLD: &i32 = &10;
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:13:24
   |
LL | const CONST_THRESHOLD: &i32 = &10;
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:13:31
   |
LL | const CONST_THRESHOLD: &i32 = &10;
   |                               ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:14:1
   |
LL | const REF_CONST: &Option<&i32> = &Some(CONST_THRESHOLD);
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:14:18
   |
LL | const REF_CONST: &Option<&i32> = &Some(CONST_THRESHOLD);
   |                  ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:14:26
   |
LL | const REF_CONST: &Option<&i32> = &Some(CONST_THRESHOLD);
   |                          ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:14:34
   |
LL | const REF_CONST: &Option<&i32> = &Some(CONST_THRESHOLD);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:17:1
   |
LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:17:25
   |
LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:17:36
   |
LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:20:1
   |
LL | type RefOptRef<'a, T> = &'a Option<&'a T>;
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:20:25
   |
LL | type RefOptRef<'a, T> = &'a Option<&'a T>;
   |                         ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:20:36
   |
LL | type RefOptRef<'a, T> = &'a Option<&'a T>;
   |                                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:23:1
   |
LL | fn foo(data: &Option<&u32>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option_ref.rs:23:1
   |
LL | fn foo(data: &Option<&u32>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option_ref.rs:23:1
   |
LL | fn foo(data: &Option<&u32>) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/ref_option_ref.rs:23:8
   |
LL | fn foo(data: &Option<&u32>) {}
   |        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:23:14
   |
LL | fn foo(data: &Option<&u32>) {}
   |              ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:23:22
   |
LL | fn foo(data: &Option<&u32>) {}
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:26:1
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option_ref.rs:26:1
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option_ref.rs:26:1
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option_ref.rs:26:8
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   |        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:26:14
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   |              ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:26:23
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   |                       ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:26:31
   |
LL | fn bar(data: &u32) -> &Option<&u32> {
   |                               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:29:5
   |
LL |     &None
   |     ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:32:1
   |
LL | struct StructRef<'a> {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:33:11
   |
LL |     data: &'a Option<&'a u32>,
   |           ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:33:22
   |
LL |     data: &'a Option<&'a u32>,
   |                      ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:37:1
   |
LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:37:32
   |
LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);
   |                                ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:37:43
   |
LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);
   |                                           ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:40:1
   |
LL | enum EnumRef<'a> {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:42:14
   |
LL |     Variant2(&'a Option<&'a u32>),
   |              ^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:42:25
   |
LL |     Variant2(&'a Option<&'a u32>),
   |                         ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/ref_option_ref.rs:46:1
   |
LL | / trait RefOptTrait {
LL | |     type A;
LL | |     fn foo(&self, _: Self::A);
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:46:1
   |
LL | trait RefOptTrait {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option_ref.rs:48:5
   |
LL |     fn foo(&self, _: Self::A);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option_ref.rs:48:5
   |
LL |     fn foo(&self, _: Self::A);
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option_ref.rs:48:13
   |
LL |     fn foo(&self, _: Self::A);
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:48:12
   |
LL |     fn foo(&self, _: Self::A);
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:51:1
   |
LL | impl RefOptTrait for u32 {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:52:14
   |
LL |     type A = &'static Option<&'static Self>;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:52:30
   |
LL |     type A = &'static Option<&'static Self>;
   |                              ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/ref_option_ref.rs:55:5
   |
LL |     fn foo(&self, _: Self::A) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option_ref.rs:55:5
   |
LL |     fn foo(&self, _: Self::A) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/ref_option_ref.rs:55:13
   |
LL |     fn foo(&self, _: Self::A) {}
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:55:12
   |
LL |     fn foo(&self, _: Self::A) {}
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:58:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option_ref.rs:58:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option_ref.rs:58:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/ref_option_ref.rs:59:9
   |
LL |     let x: &Option<&u32> = &None;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:59:12
   |
LL |     let x: &Option<&u32> = &None;
   |            ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:59:20
   |
LL |     let x: &Option<&u32> = &None;
   |                    ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:59:28
   |
LL |     let x: &Option<&u32> = &None;
   |                            ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/ref_option_ref.rs:63:1
   |
LL | fn issue9682(arg: &Option<&mut String>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/ref_option_ref.rs:63:1
   |
LL | fn issue9682(arg: &Option<&mut String>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/ref_option_ref.rs:63:1
   |
LL | fn issue9682(arg: &Option<&mut String>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/ref_option_ref.rs:63:14
   |
LL | fn issue9682(arg: &Option<&mut String>) {
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:63:19
   |
LL | fn issue9682(arg: &Option<&mut String>) {
   |                   ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/ref_option_ref.rs:63:27
   |
LL | fn issue9682(arg: &Option<&mut String>) {
   |                           ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 68 previous errors

