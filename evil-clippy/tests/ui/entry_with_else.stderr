error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/entry_with_else.rs:7:1
   |
LL | macro_rules! m {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/entry_with_else.rs:11:1
   |
LL | fn foo() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/entry_with_else.rs:11:1
   |
LL | fn foo() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/entry_with_else.rs:11:1
   |
LL | fn foo() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/entry_with_else.rs:13:1
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/entry_with_else.rs:13:1
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/entry_with_else.rs:13:1
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   | ^

error: parameter must be `mut`
  --> tests/ui/entry_with_else.rs:13:52
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   |                                                    ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/entry_with_else.rs:13:75
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   |                                                                           ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/entry_with_else.rs:13:81
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   |                                                                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/entry_with_else.rs:13:87
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   |                                                                                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:13:55
   |
LL | fn insert_if_absent0<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, k: K, v: V, v2: V) {
   |                                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:14:24
   |
LL |     if !m.contains_key(&k) {
   |                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:21:23
   |
LL |     if m.contains_key(&k) {
   |                       ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:28:24
   |
LL |     if !m.contains_key(&k) {
   |                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:35:24
   |
LL |     if !m.contains_key(&k) {
   |                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:42:24
   |
LL |     if !m.contains_key(&k) {
   |                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:49:23
   |
LL |     if m.contains_key(&k) {
   |                       ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/entry_with_else.rs:56:23
   |
LL |     if m.contains_key(&k) {
   |                       ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/entry_with_else.rs:65:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/entry_with_else.rs:65:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/entry_with_else.rs:65:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 23 previous errors

