error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:7:1
   |
LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:7:1
   |
LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:7:1
   |
LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:7:62
   |
LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {
   |                                                              ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:7:71
   |
LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {
   |                                                                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:12:1
   |
LL | fn bad_bar<T, U>(arg0: T, arg1: U)
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:12:1
   |
LL | fn bad_bar<T, U>(arg0: T, arg1: U)
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:12:1
   |
LL | fn bad_bar<T, U>(arg0: T, arg1: U)
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:12:18
   |
LL | fn bad_bar<T, U>(arg0: T, arg1: U)
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:12:27
   |
LL | fn bad_bar<T, U>(arg0: T, arg1: U)
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:21:1
   |
LL | fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:21:1
   |
LL | fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:21:1
   |
LL | fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:21:47
   |
LL | fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {
   |                                               ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:21:56
   |
LL | fn good_bar<T: Clone + Copy, U: Clone + Copy>(arg0: T, arg1: U) {
   |                                                        ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:25:1
   |
LL | fn good_foo<T, U>(arg0: T, arg1: U)
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:25:1
   |
LL | fn good_foo<T, U>(arg0: T, arg1: U)
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:25:1
   |
LL | fn good_foo<T, U>(arg0: T, arg1: U)
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:25:19
   |
LL | fn good_foo<T, U>(arg0: T, arg1: U)
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:25:28
   |
LL | fn good_foo<T, U>(arg0: T, arg1: U)
   |                            ^ help: make this parameter mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:33:1
   |
LL | / trait GoodSelfTraitBound: Clone + Copy {
LL | |     fn f();
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:33:1
   |
LL | trait GoodSelfTraitBound: Clone + Copy {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:34:5
   |
LL |     fn f();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:34:5
   |
LL |     fn f();
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:37:1
   |
LL | / trait GoodSelfWhereClause {
LL | |     fn f()
LL | |     where
LL | |         Self: Clone + Copy;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:37:1
   |
LL | trait GoodSelfWhereClause {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:38:5
   |
LL |     fn f()
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:38:5
   |
LL |     fn f()
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:43:1
   |
LL | / trait BadSelfTraitBound: Clone + Clone + Clone {
LL | |
LL | |     fn f();
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:43:1
   |
LL | trait BadSelfTraitBound: Clone + Clone + Clone {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:45:5
   |
LL |     fn f();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:45:5
   |
LL |     fn f();
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:48:1
   |
LL | / trait BadSelfWhereClause {
LL | |     fn f()
LL | |     where
LL | |         Self: Clone + Clone + Clone;
LL | |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:48:1
   |
LL | trait BadSelfWhereClause {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:49:5
   |
LL |     fn f()
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:49:5
   |
LL |     fn f()
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:55:1
   |
LL | / trait GoodTraitBound<T: Clone + Copy, U: Clone + Copy> {
LL | |     fn f();
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:55:1
   |
LL | trait GoodTraitBound<T: Clone + Copy, U: Clone + Copy> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:56:5
   |
LL |     fn f();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:56:5
   |
LL |     fn f();
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:59:1
   |
LL | / trait GoodWhereClause<T, U> {
LL | |     fn f()
LL | |     where
LL | |         T: Clone + Copy,
LL | |         U: Clone + Copy;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:59:1
   |
LL | trait GoodWhereClause<T, U> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:60:5
   |
LL |     fn f()
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:60:5
   |
LL |     fn f()
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:66:1
   |
LL | / trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {
LL | |
LL | |     fn f();
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:66:1
   |
LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:68:5
   |
LL |     fn f();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:68:5
   |
LL |     fn f();
   |     ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:71:1
   |
LL | / trait BadWhereClause<T, U> {
LL | |     fn f()
LL | |     where
LL | |         T: Clone + Clone + Clone + Copy,
LL | |
LL | |         U: Clone + Copy;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:71:1
   |
LL | trait BadWhereClause<T, U> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:72:5
   |
LL |     fn f()
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:72:5
   |
LL |     fn f()
   |     ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:79:1
   |
LL | struct GoodStructBound<T: Clone + Copy, U: Clone + Copy> {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:84:1
   |
LL | impl<T: Clone + Copy, U: Clone + Copy> GoodTraitBound<T, U> for GoodStructBound<T, U> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:86:5
   |
LL |     fn f() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:86:5
   |
LL |     fn f() {}
   |     ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:89:1
   |
LL | struct GoodStructWhereClause;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:91:1
   |
LL | impl<T, U> GoodTraitBound<T, U> for GoodStructWhereClause
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:97:5
   |
LL |     fn f() {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:97:5
   |
LL |     fn f() {}
   |     ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:100:1
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:100:1
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:100:1
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:100:33
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   |                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:100:58
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   |                                                          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:100:79
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   |                                                                               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:100:85
   |
LL | fn no_error_separate_arg_bounds(program: impl AsRef<()>, dir: impl AsRef<()>, args: &[impl AsRef<()>]) {}
   |                                                                                     ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:102:1
   |
LL | trait GenericTrait<T> {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:102:1
   |
LL | trait GenericTrait<T> {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:104:1
   |
LL | fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:104:1
   |
LL | fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:104:1
   |
LL | fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:104:59
   |
LL | fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {
   |                                                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:108:1
   |
LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:108:1
   |
LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:108:1
   |
LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:108:78
   |
LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {
   |                                                                              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:113:1
   |
LL | mod foo {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:114:5
   |
LL |     pub trait Clone {}
   |     ^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:117:1
   |
LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:117:1
   |
LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:117:1
   |
LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:117:62
   |
LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {
   |                                                              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:122:1
   |
LL | fn good_trait_object(arg0: &(dyn Any + Send)) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:122:1
   |
LL | fn good_trait_object(arg0: &(dyn Any + Send)) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:122:1
   |
LL | fn good_trait_object(arg0: &(dyn Any + Send)) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:122:22
   |
LL | fn good_trait_object(arg0: &(dyn Any + Send)) {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:122:28
   |
LL | fn good_trait_object(arg0: &(dyn Any + Send)) {
   |                            ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:126:1
   |
LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:126:1
   |
LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:126:1
   |
LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:126:21
   |
LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:126:27
   |
LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:131:1
   |
LL | / trait Proj {
LL | |     type S;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:131:1
   |
LL | trait Proj {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:135:1
   |
LL | impl Proj for () {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:139:1
   |
LL | impl Proj for i32 {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:143:1
   |
LL | / trait Base<T> {
LL | |     fn is_base(&self);
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:143:1
   |
LL | trait Base<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:144:5
   |
LL |     fn is_base(&self);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:144:5
   |
LL |     fn is_base(&self);
   |     ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:144:17
   |
LL |     fn is_base(&self);
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:144:16
   |
LL |     fn is_base(&self);
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:147:1
   |
LL | / trait Derived<B: Proj>: Base<B::S> + Base<()> {
LL | |     fn is_derived(&self);
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:147:1
   |
LL | trait Derived<B: Proj>: Base<B::S> + Base<()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:148:5
   |
LL |     fn is_derived(&self);
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:148:5
   |
LL |     fn is_derived(&self);
   |     ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:148:20
   |
LL |     fn is_derived(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:148:19
   |
LL |     fn is_derived(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:151:1
   |
LL | fn f<P: Proj>(obj: &dyn Derived<P>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:151:1
   |
LL | fn f<P: Proj>(obj: &dyn Derived<P>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:151:1
   |
LL | fn f<P: Proj>(obj: &dyn Derived<P>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:151:15
   |
LL | fn f<P: Proj>(obj: &dyn Derived<P>) {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:151:20
   |
LL | fn f<P: Proj>(obj: &dyn Derived<P>) {
   |                    ^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:158:1
   |
LL | trait Value<const N: usize> {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:158:1
   |
LL | trait Value<const N: usize> {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:159:1
   |
LL | fn const_generic<T: Value<0> + Value<1>>() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:159:1
   |
LL | fn const_generic<T: Value<0> + Value<1>>() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:159:1
   |
LL | fn const_generic<T: Value<0> + Value<1>>() {}
   | ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:162:1
   |
LL | fn assoc_tys_generics<'a, 'b, T, U>()
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:162:1
   |
LL | fn assoc_tys_generics<'a, 'b, T, U>()
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:162:1
   |
LL | fn assoc_tys_generics<'a, 'b, T, U>()
   | ^

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:165:13
   |
LL |     U: From<&'a str> + From<&'b [u16]>,
   |             ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/trait_duplication_in_bounds.rs:165:29
   |
LL |     U: From<&'a str> + From<&'b [u16]>,
   |                             ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:171:1
   |
LL | trait ConstTrait {}
   | ^^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:171:1
   |
LL | trait ConstTrait {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:172:1
   |
LL | const fn const_trait_bounds_good<T: ConstTrait + ~const ConstTrait>() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:172:7
   |
LL | const fn const_trait_bounds_good<T: ConstTrait + ~const ConstTrait>() {}
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:172:7
   |
LL | const fn const_trait_bounds_good<T: ConstTrait + ~const ConstTrait>() {}
   |       ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:174:1
   |
LL | const fn const_trait_bounds_bad<T: ~const ConstTrait + ~const ConstTrait>() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:174:7
   |
LL | const fn const_trait_bounds_bad<T: ~const ConstTrait + ~const ConstTrait>() {}
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:174:7
   |
LL | const fn const_trait_bounds_bad<T: ~const ConstTrait + ~const ConstTrait>() {}
   |       ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:177:1
   |
LL | fn projections<T, U, V>()
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:177:1
   |
LL | fn projections<T, U, V>()
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:177:1
   |
LL | fn projections<T, U, V>()
   | ^

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:187:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:187:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:187:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:188:9
   |
LL |     let _x: fn(_) = f::<()>;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/trait_duplication_in_bounds.rs:189:9
   |
LL |     let _x: fn(_) = f::<i32>;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:193:1
   |
LL | fn assoc_tys_bounds<T>()
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:193:1
   |
LL | fn assoc_tys_bounds<T>()
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:193:1
   |
LL | fn assoc_tys_bounds<T>()
   | ^

error: trait must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:198:1
   |
LL | / trait AssocConstTrait {
LL | |     const ASSOC: usize;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:198:1
   |
LL | trait AssocConstTrait {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/trait_duplication_in_bounds.rs:201:1
   |
LL | fn assoc_const_args<T>()
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:201:1
   |
LL | fn assoc_const_args<T>()
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/trait_duplication_in_bounds.rs:201:1
   |
LL | fn assoc_const_args<T>()
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: these bounds contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:7:15
   |
LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`
   |
note: the lint level is defined here
  --> tests/ui/trait_duplication_in_bounds.rs:1:9
   |
LL | #![deny(clippy::trait_duplication_in_bounds)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: these where clauses contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:14:8
   |
LL |     T: Clone + Clone + Clone + Copy,
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`

error: these bounds contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:43:26
   |
LL | trait BadSelfTraitBound: Clone + Clone + Clone {
   |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`

error: these where clauses contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:51:15
   |
LL |         Self: Clone + Clone + Clone;
   |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`

error: these bounds contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:66:24
   |
LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`

error: these where clauses contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:74:12
   |
LL |         T: Clone + Clone + Clone + Copy,
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`

error: these bounds contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:108:19
   |
LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u64> + GenericTrait<u32>`

error: these bounds contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:117:22
   |
LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::clone::Clone + foo::Clone`

error: this trait bound is already specified in trait declaration
  --> tests/ui/trait_duplication_in_bounds.rs:126:33
   |
LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {
   |                                 ^^^^^^^^^^^^^^^^^ help: try: `Any + Send`

error: these bounds contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:174:36
   |
LL | const fn const_trait_bounds_bad<T: ~const ConstTrait + ~const ConstTrait>() {}
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `~const ConstTrait`

error: these where clauses contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:181:8
   |
LL |     T: IntoIterator<Item = U::Owned> + IntoIterator<Item = U::Owned>,
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `IntoIterator<Item = U::Owned>`

error: these where clauses contain repeated elements
  --> tests/ui/trait_duplication_in_bounds.rs:203:8
   |
LL |     T: AssocConstTrait<ASSOC = 0> + AssocConstTrait<ASSOC = 0>,
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `AssocConstTrait<ASSOC = 0>`

error: aborting due to 133 previous errors

