error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:5:5
   |
LL | pub fn complex_return_triggers_the_lint() -> i32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:5:5
   |
LL | pub fn complex_return_triggers_the_lint() -> i32 {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/significant_drop_tightening.rs:6:5
   |
LL |     fn foo() -> i32 {
   |     ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:6:5
   |
LL |     fn foo() -> i32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:6:5
   |
LL |     fn foo() -> i32 {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:9:9
   |
LL |     let mutex = Mutex::new(1);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:10:9
   |
LL |     let lock = mutex.lock().unwrap();
   |         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:17:5
   |
LL | pub fn issue_10413() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:17:5
   |
LL | pub fn issue_10413() {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:18:9
   |
LL |     let mutex = Mutex::new(Some(1));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:19:9
   |
LL |     let opt = Some(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:21:13
   |
LL |         let lock = mutex.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:29:5
   |
LL | pub fn issue_11128() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:29:5
   |
LL | pub fn issue_11128() {
   |     ^

error: item must be `pub`
  --> tests/ui/significant_drop_tightening.rs:32:5
   |
LL |     struct Foo {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/significant_drop_tightening.rs:37:5
   |
LL |     impl Drop for Foo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:38:9
   |
LL |         fn drop(&mut self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:38:9
   |
LL |         fn drop(&mut self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/significant_drop_tightening.rs:38:22
   |
LL |         fn drop(&mut self) {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/significant_drop_tightening.rs:38:17
   |
LL |         fn drop(&mut self) {
   |                 ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:40:21
   |
LL |                 let lock = self.mutex.lock().unwrap();
   |                     ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:41:21
   |
LL |                 let idx_opt = lock.iter().copied().find(|el| Some(el) == droppable.first());
   |                     ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:43:25
   |
LL |                     let local_droppable = vec![lock.first().copied().unwrap_or_default()];
   |                         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:52:5
   |
LL | pub fn issue_11160() -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:52:5
   |
LL | pub fn issue_11160() -> bool {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:53:9
   |
LL |     let mutex = Mutex::new(1i32);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:54:9
   |
LL |     let lock = mutex.lock().unwrap();
   |         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:59:5
   |
LL | pub fn issue_11189() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:59:5
   |
LL | pub fn issue_11189() {
   |     ^

error: item must be `pub`
  --> tests/ui/significant_drop_tightening.rs:60:5
   |
LL |     struct Number {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/significant_drop_tightening.rs:64:5
   |
LL |     fn do_something() -> Result<(), ()> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:64:5
   |
LL |     fn do_something() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:64:5
   |
LL |     fn do_something() -> Result<(), ()> {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:65:13
   |
LL |         let number = Mutex::new(Number { value: 1 });
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:66:13
   |
LL |         let number2 = Mutex::new(Number { value: 2 });
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:67:13
   |
LL |         let number3 = Mutex::new(Number { value: 3 });
   |             ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:79:5
   |
LL | pub fn path_return_can_be_ignored() -> i32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:79:5
   |
LL | pub fn path_return_can_be_ignored() -> i32 {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:80:9
   |
LL |     let mutex = Mutex::new(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:81:9
   |
LL |     let lock = mutex.lock().unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:82:9
   |
LL |     let rslt = *lock;
   |         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:87:5
   |
LL | pub fn post_bindings_can_be_ignored() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:87:5
   |
LL | pub fn post_bindings_can_be_ignored() {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:88:9
   |
LL |     let mutex = Mutex::new(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:89:9
   |
LL |     let lock = mutex.lock().unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:90:9
   |
LL |     let rslt = *lock;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:91:9
   |
LL |     let another = rslt;
   |         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:95:5
   |
LL | pub fn unnecessary_contention_with_multiple_owned_results() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:95:5
   |
LL | pub fn unnecessary_contention_with_multiple_owned_results() {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:97:13
   |
LL |         let mutex = Mutex::new(1i32);
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:98:13
   |
LL |         let lock = mutex.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:104:13
   |
LL |         let mutex = Mutex::new(1i32);
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:105:13
   |
LL |         let lock = mutex.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:107:13
   |
LL |         let rslt0 = lock.abs();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:108:13
   |
LL |         let rslt1 = lock.is_positive();
   |             ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:113:5
   |
LL | pub fn unnecessary_contention_with_single_owned_results() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:113:5
   |
LL | pub fn unnecessary_contention_with_single_owned_results() {
   |     ^

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:115:13
   |
LL |         let mutex = Mutex::new(1i32);
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:116:13
   |
LL |         let lock = mutex.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:120:13
   |
LL |         let mutex = Mutex::new(vec![1i32]);
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:126:13
   |
LL |         let mutex = Mutex::new(1i32);
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:127:13
   |
LL |         let lock = mutex.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:129:13
   |
LL |         let rslt0 = lock.abs();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/significant_drop_tightening.rs:133:13
   |
LL |         let mutex = Mutex::new(vec![1i32]);
   |             ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:142:5
   |
LL | pub fn do_heavy_computation_that_takes_time<T>(_: T) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:142:5
   |
LL | pub fn do_heavy_computation_that_takes_time<T>(_: T) {}
   |     ^

error: item must be `pub`
  --> tests/ui/significant_drop_tightening.rs:144:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/significant_drop_tightening.rs:144:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/significant_drop_tightening.rs:144:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 59 previous errors

