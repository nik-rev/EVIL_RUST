error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:4:1
   |
LL | struct Foo;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:10
   |
LL | #[derive(PartialEq, Hash)]
   |          ^

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:10
   |
LL | #[derive(PartialEq, Hash)]
   |          ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:7
   |
LL | #[derive(PartialEq, Hash)]
   |       ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:7
   |
LL | #[derive(PartialEq, Hash)]
   |       ^  --------- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:10
   |
LL | #[derive(PartialEq, Hash)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:10
   |
LL | #[derive(PartialEq, Hash)]
   |          ^

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:3:10
   |
LL | #[derive(PartialEq, Hash)]
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:3:10
   |
LL | #[derive(PartialEq, Hash)]
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:21
   |
LL | #[derive(PartialEq, Hash)]
   |                     ^

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:18
   |
LL | #[derive(PartialEq, Hash)]
   |                  ^  ---- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:18
   |
LL | #[derive(PartialEq, Hash)]
   |                  ^  ---- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:21
   |
LL | #[derive(PartialEq, Hash)]
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:3:21
   |
LL | #[derive(PartialEq, Hash)]
   |                     ^

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:3:21
   |
LL | #[derive(PartialEq, Hash)]
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:3:21
   |
LL | #[derive(PartialEq, Hash)]
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:6:1
   |
LL | impl PartialEq<u64> for Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:7:5
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:7:5
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:7:12
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:7:11
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:7:21
   |
LL |     fn eq(&self, _: &u64) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:15:1
   |
LL | struct Bar;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:12:10
   |
LL | #[derive(Hash)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:12:7
   |
LL | #[derive(Hash)]
   |       ^  ---- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:12:7
   |
LL | #[derive(Hash)]
   |       ^  ---- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:12:10
   |
LL | #[derive(Hash)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:12:10
   |
LL | #[derive(Hash)]
   |          ^

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:12:10
   |
LL | #[derive(Hash)]
   |          ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:12:10
   |
LL | #[derive(Hash)]
   |          ^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:17:1
   |
LL | impl PartialEq for Bar {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:18:5
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:18:5
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:18:12
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:18:11
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:18:21
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:26:1
   |
LL | struct Baz;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:23:10
   |
LL | #[derive(Hash)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:23:7
   |
LL | #[derive(Hash)]
   |       ^  ---- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:23:7
   |
LL | #[derive(Hash)]
   |       ^  ---- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:23:10
   |
LL | #[derive(Hash)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:23:10
   |
LL | #[derive(Hash)]
   |          ^

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:23:10
   |
LL | #[derive(Hash)]
   |          ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:23:10
   |
LL | #[derive(Hash)]
   |          ^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:28:1
   |
LL | impl PartialEq<Baz> for Baz {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:29:5
   |
LL |     fn eq(&self, _: &Baz) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:29:5
   |
LL |     fn eq(&self, _: &Baz) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:29:12
   |
LL |     fn eq(&self, _: &Baz) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:29:11
   |
LL |     fn eq(&self, _: &Baz) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:29:21
   |
LL |     fn eq(&self, _: &Baz) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:37:1
   |
LL | struct Bah;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:36:10
   |
LL | #[derive(PartialEq)]
   |          ^

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:36:10
   |
LL | #[derive(PartialEq)]
   |          ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:36:7
   |
LL | #[derive(PartialEq)]
   |       ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:36:7
   |
LL | #[derive(PartialEq)]
   |       ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:36:10
   |
LL | #[derive(PartialEq)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:36:10
   |
LL | #[derive(PartialEq)]
   |          ^

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:36:10
   |
LL | #[derive(PartialEq)]
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:36:10
   |
LL | #[derive(PartialEq)]
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:39:1
   |
LL | impl std::hash::Hash for Bah {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:40:5
   |
LL |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:40:5
   |
LL |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/derived_hash_with_manual_eq.rs:40:36
   |
LL |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}
   |                                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:40:35
   |
LL |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}
   |                                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/derived_hash_with_manual_eq.rs:40:45
   |
LL |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}
   |                                             ^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/derived_hash_with_manual_eq.rs:43:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:43:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/derived_hash_with_manual_eq.rs:43:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 62 previous errors

