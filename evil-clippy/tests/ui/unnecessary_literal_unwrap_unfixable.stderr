error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:5:1
   |
LL | fn unwrap_option_some() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:5:1
   |
LL | fn unwrap_option_some() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:5:1
   |
LL | fn unwrap_option_some() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:6:9
   |
LL |     let val = Some(1);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:7:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:10:9
   |
LL |     let _val2 = val.expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:14:1
   |
LL | fn unwrap_option_some_context() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:14:1
   |
LL | fn unwrap_option_some_context() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:14:1
   |
LL | fn unwrap_option_some_context() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:15:9
   |
LL |     let _val = Some::<usize>([1, 2, 3].iter().sum()).unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:18:9
   |
LL |     let _val = Some::<usize>([1, 2, 3].iter().sum()).expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:21:9
   |
LL |     let val = Some::<usize>([1, 2, 3].iter().sum());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:22:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:25:9
   |
LL |     let _val2 = val.expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:29:1
   |
LL | fn unwrap_option_none() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:29:1
   |
LL | fn unwrap_option_none() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:29:1
   |
LL | fn unwrap_option_none() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:30:9
   |
LL |     let val = None::<()>;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:31:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:34:9
   |
LL |     let _val2 = val.expect("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:37:9
   |
LL |     let _val3: u8 = None.unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:44:1
   |
LL | fn unwrap_result_ok() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:44:1
   |
LL | fn unwrap_result_ok() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:44:1
   |
LL | fn unwrap_result_ok() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:45:9
   |
LL |     let val = Ok::<_, ()>(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:46:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:49:9
   |
LL |     let _val2 = val.expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:52:9
   |
LL |     let _val2 = val.unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:55:9
   |
LL |     let _val2 = val.expect_err("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:59:1
   |
LL | fn unwrap_result_ok_context() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:59:1
   |
LL | fn unwrap_result_ok_context() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:59:1
   |
LL | fn unwrap_result_ok_context() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:60:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:63:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:66:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:69:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).expect_err("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:72:9
   |
LL |     let val = Ok::<usize, ()>([1, 2, 3].iter().sum());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:73:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:76:9
   |
LL |     let _val2 = val.expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:79:9
   |
LL |     let _val2 = val.unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:82:9
   |
LL |     let _val2 = val.expect_err("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:86:1
   |
LL | fn unwrap_result_err() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:86:1
   |
LL | fn unwrap_result_err() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:86:1
   |
LL | fn unwrap_result_err() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:87:9
   |
LL |     let val = Err::<(), _>(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:88:9
   |
LL |     let _val2 = val.unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:91:9
   |
LL |     let _val2 = val.expect_err("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:94:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:97:9
   |
LL |     let _val2 = val.expect("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:101:1
   |
LL | fn unwrap_result_err_context() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:101:1
   |
LL | fn unwrap_result_err_context() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:101:1
   |
LL | fn unwrap_result_err_context() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:102:9
   |
LL |     let _val = Err::<(), usize>([1, 2, 3].iter().sum()).unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:105:9
   |
LL |     let _val = Err::<(), usize>([1, 2, 3].iter().sum()).expect_err("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:108:9
   |
LL |     let _val = Err::<(), usize>([1, 2, 3].iter().sum()).unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:111:9
   |
LL |     let _val = Err::<(), usize>([1, 2, 3].iter().sum()).expect("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:114:9
   |
LL |     let val = Err::<(), usize>([1, 2, 3].iter().sum());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:115:9
   |
LL |     let _val2 = val.unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:118:9
   |
LL |     let _val2 = val.expect_err("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:121:9
   |
LL |     let _val2 = val.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:124:9
   |
LL |     let _val2 = val.expect("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:128:1
   |
LL | fn unwrap_methods_option() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:128:1
   |
LL | fn unwrap_methods_option() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:128:1
   |
LL | fn unwrap_methods_option() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:129:9
   |
LL |     let val = Some(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:130:9
   |
LL |     let _val2 = val.unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:133:9
   |
LL |     let _val2 = val.unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:136:9
   |
LL |     let _val2 = val.unwrap_or_else(|| 2);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:140:1
   |
LL | fn unwrap_methods_option_context() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:140:1
   |
LL | fn unwrap_methods_option_context() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:140:1
   |
LL | fn unwrap_methods_option_context() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:141:9
   |
LL |     let _val = Some::<usize>([1, 2, 3].iter().sum()).unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:144:9
   |
LL |     let _val = Some::<usize>([1, 2, 3].iter().sum()).unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:147:9
   |
LL |     let _val = Some::<usize>([1, 2, 3].iter().sum()).unwrap_or_else(|| 2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:150:9
   |
LL |     let val = Some::<usize>([1, 2, 3].iter().sum());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:151:9
   |
LL |     let _val2 = val.unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:154:9
   |
LL |     let _val2 = val.unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:157:9
   |
LL |     let _val2 = val.unwrap_or_else(|| 2);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:161:1
   |
LL | fn unwrap_methods_result() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:161:1
   |
LL | fn unwrap_methods_result() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:161:1
   |
LL | fn unwrap_methods_result() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:162:9
   |
LL |     let val = Ok::<_, ()>(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:163:9
   |
LL |     let _val2 = val.unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:166:9
   |
LL |     let _val2 = val.unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:169:9
   |
LL |     let _val2 = val.unwrap_or_else(|_| 2);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:173:1
   |
LL | fn unwrap_methods_result_context() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:173:1
   |
LL | fn unwrap_methods_result_context() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:173:1
   |
LL | fn unwrap_methods_result_context() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:174:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:177:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:180:9
   |
LL |     let _val = Ok::<usize, ()>([1, 2, 3].iter().sum()).unwrap_or_else(|_| 2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:183:9
   |
LL |     let val = Ok::<usize, ()>([1, 2, 3].iter().sum());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:184:9
   |
LL |     let _val2 = val.unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:187:9
   |
LL |     let _val2 = val.unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:190:9
   |
LL |     let _val2 = val.unwrap_or_else(|_| 2);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:194:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:194:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap_unfixable.rs:194:1
   |
LL | fn main() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 90 previous errors

