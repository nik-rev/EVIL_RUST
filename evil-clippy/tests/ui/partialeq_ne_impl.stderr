error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/partialeq_ne_impl.rs:3:1
   |
LL | struct Foo;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/partialeq_ne_impl.rs:5:1
   |
LL | impl PartialEq for Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:6:5
   |
LL |     fn eq(&self, _: &Foo) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:6:5
   |
LL |     fn eq(&self, _: &Foo) -> bool {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/partialeq_ne_impl.rs:6:12
   |
LL |     fn eq(&self, _: &Foo) -> bool {
   |            ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:6:11
   |
LL |     fn eq(&self, _: &Foo) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:6:21
   |
LL |     fn eq(&self, _: &Foo) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:9:5
   |
LL |     fn ne(&self, _: &Foo) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:9:5
   |
LL |     fn ne(&self, _: &Foo) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/partialeq_ne_impl.rs:9:12
   |
LL |     fn ne(&self, _: &Foo) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:9:11
   |
LL |     fn ne(&self, _: &Foo) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:9:21
   |
LL |     fn ne(&self, _: &Foo) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/partialeq_ne_impl.rs:16:1
   |
LL | struct Bar;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/partialeq_ne_impl.rs:18:1
   |
LL | impl PartialEq for Bar {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:19:5
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:19:5
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/partialeq_ne_impl.rs:19:12
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:19:11
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:19:21
   |
LL |     fn eq(&self, _: &Bar) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:23:5
   |
LL |     fn ne(&self, _: &Bar) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:23:5
   |
LL |     fn ne(&self, _: &Bar) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/partialeq_ne_impl.rs:23:12
   |
LL |     fn ne(&self, _: &Bar) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:23:11
   |
LL |     fn ne(&self, _: &Bar) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/partialeq_ne_impl.rs:23:21
   |
LL |     fn ne(&self, _: &Bar) -> bool {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/partialeq_ne_impl.rs:28:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:28:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/partialeq_ne_impl.rs:28:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 26 previous errors

