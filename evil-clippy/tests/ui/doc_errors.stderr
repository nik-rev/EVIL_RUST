error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:7:5
   |
LL | pub fn pub_fn_missing_errors_header() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:7:5
   |
LL | pub fn pub_fn_missing_errors_header() -> Result<(), ()> {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:13:11
   |
LL | pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:13:11
   |
LL | pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {
   |           ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:20:5
   |
LL | pub fn pub_fn_returning_io_result() -> io::Result<()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:20:5
   |
LL | pub fn pub_fn_returning_io_result() -> io::Result<()> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:27:11
   |
LL | pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:27:11
   |
LL | pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {
   |           ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:35:5
   |
LL | pub fn pub_fn_with_errors_header() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:35:5
   |
LL | pub fn pub_fn_with_errors_header() -> Result<(), ()> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:41:11
   |
LL | pub async fn async_pub_fn_with_errors_header() -> Result<(), ()> {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:41:11
   |
LL | pub async fn async_pub_fn_with_errors_header() -> Result<(), ()> {
   |           ^

error: item must be `pub`
  --> tests/ui/doc_errors.rs:46:1
   |
LL | fn priv_fn_missing_errors_header() -> Result<(), ()> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:46:1
   |
LL | fn priv_fn_missing_errors_header() -> Result<(), ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:46:1
   |
LL | fn priv_fn_missing_errors_header() -> Result<(), ()> {
   | ^

error: item must be `pub`
  --> tests/ui/doc_errors.rs:51:1
   |
LL | async fn async_priv_fn_missing_errors_header() -> Result<(), ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:51:7
   |
LL | async fn async_priv_fn_missing_errors_header() -> Result<(), ()> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:51:7
   |
LL | async fn async_priv_fn_missing_errors_header() -> Result<(), ()> {
   |       ^

error: item must be `pub`
  --> tests/ui/doc_errors.rs:57:1
   |
LL | impl Struct1 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:59:9
   |
LL |     pub fn pub_method_missing_errors_header() -> Result<(), ()> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:59:9
   |
LL |     pub fn pub_method_missing_errors_header() -> Result<(), ()> {
   |         ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:66:15
   |
LL |     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {
   |               ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:66:15
   |
LL |     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {
   |               ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:74:9
   |
LL |     pub fn pub_method_with_errors_header() -> Result<(), ()> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:74:9
   |
LL |     pub fn pub_method_with_errors_header() -> Result<(), ()> {
   |         ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:80:15
   |
LL |     pub async fn async_pub_method_with_errors_header() -> Result<(), ()> {
   |               ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:80:15
   |
LL |     pub async fn async_pub_method_with_errors_header() -> Result<(), ()> {
   |               ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:85:5
   |
LL |     fn priv_method_missing_errors_header() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:85:5
   |
LL |     fn priv_method_missing_errors_header() -> Result<(), ()> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:90:11
   |
LL |     async fn async_priv_method_missing_errors_header() -> Result<(), ()> {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:90:11
   |
LL |     async fn async_priv_method_missing_errors_header() -> Result<(), ()> {
   |           ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:98:5
   |
LL |     fn block_comment() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:98:5
   |
LL |     fn block_comment() -> Result<(), ()> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:106:5
   |
LL |     fn block_comment_leading_asterisks() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:106:5
   |
LL |     fn block_comment_leading_asterisks() -> Result<(), ()> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:111:5
   |
LL |     fn doc_hidden() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:111:5
   |
LL |     fn doc_hidden() -> Result<(), ()> {
   |     ^

error: trait must be `unsafe`
  --> tests/ui/doc_errors.rs:116:1
   |
LL | / pub trait Trait1 {
LL | |     /// This is not sufficiently documented.
LL | |     fn trait_method_missing_errors_header() -> Result<(), ()>;
...  |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:118:5
   |
LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:118:5
   |
LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:123:5
   |
LL |     fn trait_method_with_errors_header() -> Result<(), ()>;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:123:5
   |
LL |     fn trait_method_with_errors_header() -> Result<(), ()>;
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:126:5
   |
LL |     fn doc_hidden() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:126:5
   |
LL |     fn doc_hidden() -> Result<(), ()> {
   |     ^

error: item must be `pub`
  --> tests/ui/doc_errors.rs:131:1
   |
LL | impl Trait1 for Struct1 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:132:5
   |
LL |     fn trait_method_missing_errors_header() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:132:5
   |
LL |     fn trait_method_missing_errors_header() -> Result<(), ()> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:136:5
   |
LL |     fn trait_method_with_errors_header() -> Result<(), ()> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:136:5
   |
LL |     fn trait_method_with_errors_header() -> Result<(), ()> {
   |     ^

error: trait must be `unsafe`
  --> tests/ui/doc_errors.rs:142:1
   |
LL | / pub trait DocHidden {
LL | |     fn f() -> Result<(), ()>;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:143:5
   |
LL |     fn f() -> Result<(), ()>;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:143:5
   |
LL |     fn f() -> Result<(), ()>;
   |     ^

error: item must be `pub`
  --> tests/ui/doc_errors.rs:146:1
   |
LL | fn main() -> Result<(), ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/doc_errors.rs:146:1
   |
LL | fn main() -> Result<(), ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/doc_errors.rs:146:1
   |
LL | fn main() -> Result<(), ()> {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 35 previous errors

