error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:6:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:6:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:6:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:48:10
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |          ^

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:48:16
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                ^

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:48:13
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |             ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:48:13
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |             ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:48:16
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:48:16
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:48:23
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ^

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:48:20
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                    ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:48:20
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                    ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:48:23
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:48:23
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ^

error: references are not allowed
  --> tests/ui/assign_ops2.rs:48:23
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:48:23
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:49:17
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ----- in this derive macro expansion
LL | pub struct Wrap(i64);
   |                 ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:49:17
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                       ----- in this derive macro expansion
LL | pub struct Wrap(i64);
   |                 ^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:48:30
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                              ^

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:48:30
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:48:27
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                           ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:48:27
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                           ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:48:30
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:48:30
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                              ^

error: references are not allowed
  --> tests/ui/assign_ops2.rs:48:30
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:48:30
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:48:41
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                                         ^

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:48:38
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                                      ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:48:38
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                                      ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:48:41
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:48:41
   |
LL | #[derive(Copy, Clone, Debug, PartialEq, Eq)]
   |                                         ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:51:1
   |
LL | impl Mul<i64> for Wrap {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:54:5
   |
LL |     fn mul(self, rhs: i64) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:54:5
   |
LL |     fn mul(self, rhs: i64) -> Self {
   |     ^

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:54:12
   |
LL |     fn mul(self, rhs: i64) -> Self {
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:54:18
   |
LL |     fn mul(self, rhs: i64) -> Self {
   |                  ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:59:1
   |
LL | impl MulAssign<i64> for Wrap {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:60:5
   |
LL |     fn mul_assign(&mut self, rhs: i64) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:60:5
   |
LL |     fn mul_assign(&mut self, rhs: i64) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:60:24
   |
LL |     fn mul_assign(&mut self, rhs: i64) {
   |                        ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/assign_ops2.rs:60:30
   |
LL |     fn mul_assign(&mut self, rhs: i64) {
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/assign_ops2.rs:60:19
   |
LL |     fn mul_assign(&mut self, rhs: i64) {
   |                   ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/assign_ops2.rs:65:1
   |
LL | fn cow_add_assign() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/assign_ops2.rs:65:1
   |
LL | fn cow_add_assign() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/assign_ops2.rs:65:1
   |
LL | fn cow_add_assign() {
   | ^

error: variable must be `mut`
  --> tests/ui/assign_ops2.rs:68:9
   |
LL |     let cows = Cow::Borrowed("foo");
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 42 previous errors

