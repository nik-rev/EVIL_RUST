error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:4:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:4:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:4:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:5:9
   |
LL |     let v = vec![3, 2, 1, 0, -1, -2, -3];
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:6:9
   |
LL |     let y = &&42;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:6:13
   |
LL |     let y = &&42;
   |             ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:6:14
   |
LL |     let y = &&42;
   |              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:39:9
   |
LL |     let s1 = String::from("hello world");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:40:9
   |
LL |     let s2 = String::from("world");
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:45:32
   |
LL |     let _ = "hello world".find(&s2).is_none();
   |                                ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:47:32
   |
LL |     let _ = "hello world".find(&s2[2..]).is_none();
   |                                ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:52:21
   |
LL |     let _ = s1.find(&s2).is_none();
   |                     ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:54:21
   |
LL |     let _ = s1.find(&s2[2..]).is_none();
   |                     ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:59:26
   |
LL |     let _ = s1[2..].find(&s2).is_none();
   |                          ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:61:26
   |
LL |     let _ = s1[2..].find(&s2[2..]).is_none();
   |                          ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:66:1
   |
LL | mod issue7392 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:67:5
   |
LL |     struct Player {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:70:5
   |
LL |     fn filter() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:70:5
   |
LL |     fn filter() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:70:5
   |
LL |     fn filter() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:71:13
   |
LL |         let p = Player {
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:74:13
   |
LL |         let filter_hand = vec![5];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:84:5
   |
LL |     struct PlayerTuple {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:87:5
   |
LL |     fn filter_tuple() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:87:5
   |
LL |     fn filter_tuple() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:87:5
   |
LL |     fn filter_tuple() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:88:13
   |
LL |         let p = PlayerTuple {
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:91:13
   |
LL |         let filter_hand = vec![5];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:101:5
   |
LL |     fn field_projection() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:101:5
   |
LL |     fn field_projection() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:101:5
   |
LL |     fn field_projection() {
   |     ^

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:102:9
   |
LL |         struct Foo {
   |         ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:106:13
   |
LL |         let vfoo = vec![Foo { foo: 1, bar: 2 }];
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:110:13
   |
LL |         let vfoo = vec![(42, Foo { foo: 1, bar: 2 })];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:118:5
   |
LL |     fn index_projection() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:118:5
   |
LL |     fn index_projection() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:118:5
   |
LL |     fn index_projection() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:119:13
   |
LL |         let vfoo = vec![[0, 1, 2, 3]];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:125:5
   |
LL |     fn slice_projection() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:125:5
   |
LL |     fn slice_projection() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:125:5
   |
LL |     fn slice_projection() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:126:13
   |
LL |         let vfoo = vec![[0, 1, 2, 3, 0, 1, 2, 3]];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:131:5
   |
LL |     fn please(x: &u32) -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:131:5
   |
LL |     fn please(x: &u32) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:131:5
   |
LL |     fn please(x: &u32) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:131:15
   |
LL |     fn please(x: &u32) -> bool {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:131:18
   |
LL |     fn please(x: &u32) -> bool {
   |                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:135:5
   |
LL |     fn deref_enough(x: u32) -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:135:5
   |
LL |     fn deref_enough(x: u32) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:135:5
   |
LL |     fn deref_enough(x: u32) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:135:21
   |
LL |     fn deref_enough(x: u32) -> bool {
   |                     ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:139:5
   |
LL |     fn arg_no_deref(x: &&u32) -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:139:5
   |
LL |     fn arg_no_deref(x: &&u32) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:139:5
   |
LL |     fn arg_no_deref(x: &&u32) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:139:21
   |
LL |     fn arg_no_deref(x: &&u32) -> bool {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:139:24
   |
LL |     fn arg_no_deref(x: &&u32) -> bool {
   |                        ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:139:25
   |
LL |     fn arg_no_deref(x: &&u32) -> bool {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:143:5
   |
LL |     fn more_projections() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:143:5
   |
LL |     fn more_projections() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:143:5
   |
LL |     fn more_projections() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:144:13
   |
LL |         let x = 19;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:145:13
   |
LL |         let ppx: &u32 = &x;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:145:18
   |
LL |         let ppx: &u32 = &x;
   |                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:145:25
   |
LL |         let ppx: &u32 = &x;
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:146:43
   |
LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();
   |                                           ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:146:44
   |
LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();
   |                                            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:146:45
   |
LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();
   |                                             ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:151:13
   |
LL |         let v = vec![3, 2, 1, 0];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:154:35
   |
LL |         let _ = v.iter().find(|x: &&u32| deref_enough(**x)).is_none();
   |                                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:154:36
   |
LL |         let _ = v.iter().find(|x: &&u32| deref_enough(**x)).is_none();
   |                                    ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:161:35
   |
LL |         let _ = v.iter().find(|x: &&u32| arg_no_deref(x)).is_none();
   |                                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:161:36
   |
LL |         let _ = v.iter().find(|x: &&u32| arg_no_deref(x)).is_none();
   |                                    ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:165:5
   |
LL |     fn field_index_projection() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:165:5
   |
LL |     fn field_index_projection() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:165:5
   |
LL |     fn field_index_projection() {
   |     ^

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:166:9
   |
LL |         struct FooDouble {
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:169:9
   |
LL |         struct Foo {
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:172:9
   |
LL |         struct FooOuter {
   |         ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:176:13
   |
LL |         let vfoo = vec![FooOuter {
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:189:5
   |
LL |     fn index_field_projection() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:189:5
   |
LL |     fn index_field_projection() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:189:5
   |
LL |     fn index_field_projection() {
   |     ^

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:190:9
   |
LL |         struct Foo {
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:193:9
   |
LL |         struct FooOuter {
   |         ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:196:13
   |
LL |         let vfoo = vec![FooOuter {
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:203:5
   |
LL |     fn double_deref_index_projection() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:203:5
   |
LL |     fn double_deref_index_projection() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:203:5
   |
LL |     fn double_deref_index_projection() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:204:13
   |
LL |         let vfoo = vec![&&[0, 1, 2, 3]];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:204:25
   |
LL |         let vfoo = vec![&&[0, 1, 2, 3]];
   |                         ^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:204:26
   |
LL |         let vfoo = vec![&&[0, 1, 2, 3]];
   |                          ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:209:5
   |
LL |     fn method_call_by_ref() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:209:5
   |
LL |     fn method_call_by_ref() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:209:5
   |
LL |     fn method_call_by_ref() {
   |     ^

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:210:9
   |
LL |         struct Foo {
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:213:9
   |
LL |         impl Foo {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:214:17
   |
LL |             pub fn by_ref(&self, x: &u32) -> bool {
   |                 ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:214:17
   |
LL |             pub fn by_ref(&self, x: &u32) -> bool {
   |                 ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:214:28
   |
LL |             pub fn by_ref(&self, x: &u32) -> bool {
   |                            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:214:34
   |
LL |             pub fn by_ref(&self, x: &u32) -> bool {
   |                                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:214:27
   |
LL |             pub fn by_ref(&self, x: &u32) -> bool {
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:214:37
   |
LL |             pub fn by_ref(&self, x: &u32) -> bool {
   |                                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:218:13
   |
LL |         let vfoo = vec![Foo { bar: 1 }];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:219:47
   |
LL |         let _ = vfoo.iter().find(|v| v.by_ref(&v.bar)).is_none();
   |                                               ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:223:5
   |
LL |     fn ref_bindings() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:223:5
   |
LL |     fn ref_bindings() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:223:5
   |
LL |     fn ref_bindings() {
   |     ^

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:224:18
   |
LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)]
   |                  ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:224:20
   |
LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)]
   |                    ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:224:28
   |
LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)]
   |                            ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:224:30
   |
LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)]
   |                              ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:224:38
   |
LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)]
   |                                      ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:224:40
   |
LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)]
   |                                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/search_is_some_fixable_none.rs:227:28
   |
LL |             .find(|&&&(&x, ref y)| x == *y)
   |                            ^^^^^

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:231:5
   |
LL |     fn test_string_1(s: &str) -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:231:5
   |
LL |     fn test_string_1(s: &str) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:231:5
   |
LL |     fn test_string_1(s: &str) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:231:22
   |
LL |     fn test_string_1(s: &str) -> bool {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:231:25
   |
LL |     fn test_string_1(s: &str) -> bool {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:235:5
   |
LL |     fn test_u32_1(s: &u32) -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:235:5
   |
LL |     fn test_u32_1(s: &u32) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:235:5
   |
LL |     fn test_u32_1(s: &u32) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:235:19
   |
LL |     fn test_u32_1(s: &u32) -> bool {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:235:22
   |
LL |     fn test_u32_1(s: &u32) -> bool {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:239:5
   |
LL |     fn test_u32_2(s: u32) -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:239:5
   |
LL |     fn test_u32_2(s: u32) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:239:5
   |
LL |     fn test_u32_2(s: u32) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:239:19
   |
LL |     fn test_u32_2(s: u32) -> bool {
   |                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:243:5
   |
LL |     fn projection_in_args_test() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:243:5
   |
LL |     fn projection_in_args_test() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:243:5
   |
LL |     fn projection_in_args_test() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:245:13
   |
LL |         let lst = &[String::from("Hello"), String::from("world")];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:245:19
   |
LL |         let lst = &[String::from("Hello"), String::from("world")];
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:246:13
   |
LL |         let v: Vec<&[String]> = vec![lst];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:246:20
   |
LL |         let v: Vec<&[String]> = vec![lst];
   |                    ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:249:49
   |
LL |         let _ = v.iter().find(|s| test_string_1(&s[0])).is_none();
   |                                                 ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:253:9
   |
LL |         struct FieldProjection<'a> {
   |         ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:254:20
   |
LL |             field: &'a u32,
   |                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:256:13
   |
LL |         let field = 123456789;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:257:13
   |
LL |         let instance = FieldProjection { field: &field };
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:257:49
   |
LL |         let instance = FieldProjection { field: &field };
   |                                                 ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:258:13
   |
LL |         let v = vec![instance];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:268:1
   |
LL | mod issue_11910 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:269:5
   |
LL |     fn computations() -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:269:5
   |
LL |     fn computations() -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:269:5
   |
LL |     fn computations() -> u32 {
   |     ^

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:273:5
   |
LL |     struct Foo;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:274:5
   |
LL |     impl Foo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:275:9
   |
LL |         fn bar(&self, _: bool) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:275:9
   |
LL |         fn bar(&self, _: bool) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:275:17
   |
LL |         fn bar(&self, _: bool) {}
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/search_is_some_fixable_none.rs:275:16
   |
LL |         fn bar(&self, _: bool) {}
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:278:5
   |
LL |     fn test_normal_for_iter() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:278:5
   |
LL |     fn test_normal_for_iter() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:278:5
   |
LL |     fn test_normal_for_iter() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:279:13
   |
LL |         let v = vec![3, 2, 1, 0, -1, -2, -3];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:286:5
   |
LL |     fn test_then_for_iter() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:286:5
   |
LL |     fn test_then_for_iter() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:286:5
   |
LL |     fn test_then_for_iter() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:287:13
   |
LL |         let v = vec![3, 2, 1, 0, -1, -2, -3];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:292:5
   |
LL |     fn test_then_some_for_iter() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:292:5
   |
LL |     fn test_then_some_for_iter() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:292:5
   |
LL |     fn test_then_some_for_iter() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:293:13
   |
LL |         let v = vec![3, 2, 1, 0, -1, -2, -3];
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:298:5
   |
LL |     fn test_normal_for_str() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:298:5
   |
LL |     fn test_normal_for_str() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:298:5
   |
LL |     fn test_normal_for_str() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:299:13
   |
LL |         let s = "hello";
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:304:13
   |
LL |         let s = String::from("hello");
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:311:5
   |
LL |     fn test_then_for_str() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:311:5
   |
LL |     fn test_then_for_str() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:311:5
   |
LL |     fn test_then_for_str() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:312:13
   |
LL |         let s = "hello";
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:315:13
   |
LL |         let s = String::from("hello");
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/search_is_some_fixable_none.rs:320:5
   |
LL |     fn test_then_some_for_str() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:320:5
   |
LL |     fn test_then_some_for_str() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/search_is_some_fixable_none.rs:320:5
   |
LL |     fn test_then_some_for_str() {
   |     ^

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:321:13
   |
LL |         let s = "hello";
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/search_is_some_fixable_none.rs:324:13
   |
LL |         let s = String::from("hello");
   |             ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 155 previous errors

