error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/return_and_then.rs:3:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:3:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:3:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/return_and_then.rs:4:5
   |
LL |     fn test_opt_block(opt: Option<i32>) -> Option<i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:4:5
   |
LL |     fn test_opt_block(opt: Option<i32>) -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:4:5
   |
LL |     fn test_opt_block(opt: Option<i32>) -> Option<i32> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/return_and_then.rs:4:23
   |
LL |     fn test_opt_block(opt: Option<i32>) -> Option<i32> {
   |                       ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/return_and_then.rs:13:5
   |
LL |     fn test_opt_func(opt: Option<i32>) -> Option<i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:13:5
   |
LL |     fn test_opt_func(opt: Option<i32>) -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:13:5
   |
LL |     fn test_opt_func(opt: Option<i32>) -> Option<i32> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/return_and_then.rs:13:22
   |
LL |     fn test_opt_func(opt: Option<i32>) -> Option<i32> {
   |                      ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/return_and_then.rs:18:5
   |
LL |     fn test_call_chain() -> Option<i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:18:5
   |
LL |     fn test_call_chain() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:18:5
   |
LL |     fn test_call_chain() -> Option<i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/return_and_then.rs:23:5
   |
LL |     fn test_res_block(opt: Result<i32, i32>) -> Result<i32, i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:23:5
   |
LL |     fn test_res_block(opt: Result<i32, i32>) -> Result<i32, i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:23:5
   |
LL |     fn test_res_block(opt: Result<i32, i32>) -> Result<i32, i32> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/return_and_then.rs:23:23
   |
LL |     fn test_res_block(opt: Result<i32, i32>) -> Result<i32, i32> {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/return_and_then.rs:28:5
   |
LL |     fn test_res_func(opt: Result<i32, i32>) -> Result<i32, i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:28:5
   |
LL |     fn test_res_func(opt: Result<i32, i32>) -> Result<i32, i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:28:5
   |
LL |     fn test_res_func(opt: Result<i32, i32>) -> Result<i32, i32> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/return_and_then.rs:28:22
   |
LL |     fn test_res_func(opt: Result<i32, i32>) -> Result<i32, i32> {
   |                      ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/return_and_then.rs:33:5
   |
LL |     fn test_ref_only() -> Option<i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:33:5
   |
LL |     fn test_ref_only() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:33:5
   |
LL |     fn test_ref_only() -> Option<i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/return_and_then.rs:39:5
   |
LL |     fn test_tmp_only() -> Option<i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:39:5
   |
LL |     fn test_tmp_only() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:39:5
   |
LL |     fn test_tmp_only() -> Option<i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/return_and_then.rs:50:5
   |
LL |     fn test_tmp_ref() -> Option<String> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:50:5
   |
LL |     fn test_tmp_ref() -> Option<String> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:50:5
   |
LL |     fn test_tmp_ref() -> Option<String> {
   |     ^

error: item must be `pub`
  --> tests/ui/return_and_then.rs:57:5
   |
LL |     fn test_unconsumed_tmp() -> Option<i32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:57:5
   |
LL |     fn test_unconsumed_tmp() -> Option<i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:57:5
   |
LL |     fn test_unconsumed_tmp() -> Option<i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/return_and_then.rs:68:1
   |
LL | fn gen_option(n: i32) -> Option<i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/return_and_then.rs:68:1
   |
LL | fn gen_option(n: i32) -> Option<i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/return_and_then.rs:68:1
   |
LL | fn gen_option(n: i32) -> Option<i32> {
   | ^

error: parameter must be `mut`
  --> tests/ui/return_and_then.rs:68:15
   |
LL | fn gen_option(n: i32) -> Option<i32> {
   |               ^ help: make this parameter mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 31 previous errors

