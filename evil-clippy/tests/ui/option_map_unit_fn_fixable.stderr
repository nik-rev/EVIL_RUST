error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:5:1
   |
LL | fn do_nothing<T>(_: T) {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:5:1
   |
LL | fn do_nothing<T>(_: T) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:5:1
   |
LL | fn do_nothing<T>(_: T) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:7:1
   |
LL | fn diverge<T>(_: T) -> ! {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:7:1
   |
LL | fn diverge<T>(_: T) -> ! {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:7:1
   |
LL | fn diverge<T>(_: T) -> ! {
   | ^

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:8:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:8:5
   |
LL |     panic!()
   |     ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:8:5
   |
LL |     panic!()
   |     ^^^^^^^^

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:11:1
   |
LL | fn plus_one(value: usize) -> usize {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:11:1
   |
LL | fn plus_one(value: usize) -> usize {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:11:1
   |
LL | fn plus_one(value: usize) -> usize {
   | ^

error: parameter must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:11:13
   |
LL | fn plus_one(value: usize) -> usize {
   |             ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:15:1
   |
LL | fn option() -> Option<usize> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:15:1
   |
LL | fn option() -> Option<usize> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:15:1
   |
LL | fn option() -> Option<usize> {
   | ^

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:19:1
   |
LL | struct HasOption {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:23:1
   |
LL | impl HasOption {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:24:5
   |
LL |     fn do_option_nothing(&self, value: usize) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:24:5
   |
LL |     fn do_option_nothing(&self, value: usize) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:24:27
   |
LL |     fn do_option_nothing(&self, value: usize) {}
   |                           ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:24:33
   |
LL |     fn do_option_nothing(&self, value: usize) {}
   |                                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_map_unit_fn_fixable.rs:24:26
   |
LL |     fn do_option_nothing(&self, value: usize) {}
   |                          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:26:5
   |
LL |     fn do_option_plus_one(&self, value: usize) -> usize {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:26:5
   |
LL |     fn do_option_plus_one(&self, value: usize) -> usize {
   |     ^

error: parameter must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:26:28
   |
LL |     fn do_option_plus_one(&self, value: usize) -> usize {
   |                            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:26:34
   |
LL |     fn do_option_plus_one(&self, value: usize) -> usize {
   |                                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/option_map_unit_fn_fixable.rs:26:27
   |
LL |     fn do_option_plus_one(&self, value: usize) -> usize {
   |                           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:31:1
   |
LL | fn option_map_unit_fn() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:31:1
   |
LL | fn option_map_unit_fn() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:31:1
   |
LL | fn option_map_unit_fn() {
   | ^

error: variable must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:32:9
   |
LL |     let x = HasOption { field: Some(10) };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:46:9
   |
LL |     let captured = 10;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_map_unit_fn_fixable.rs:85:31
   |
LL |     x.field.map(|value| { let y = plus_one(value + captured); });
   |                               ^ help: make this variable mutable: `mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/option_map_unit_fn_fixable.rs:95:18
   |
LL |     x.field.map(|ref value| { do_nothing(value + captured) });
   |                  ^^^^^^^^^

error: item must be `pub`
  --> tests/ui/option_map_unit_fn_fixable.rs:105:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:105:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_map_unit_fn_fixable.rs:105:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 33 previous errors

