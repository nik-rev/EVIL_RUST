error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:9:1
   |
LL | mod outer_box {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:15:9
   |
LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:15:9
   |
LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}
   |         ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:15:25
   |
LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}
   |                         ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:18:9
   |
LL |     pub fn box_test7<T>(foo: Box<Arc<T>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:18:9
   |
LL |     pub fn box_test7<T>(foo: Box<Arc<T>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:18:25
   |
LL |     pub fn box_test7<T>(foo: Box<Arc<T>>) {}
   |                         ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:21:9
   |
LL |     pub fn box_test8() -> Box<Rc<SubT<usize>>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:21:9
   |
LL |     pub fn box_test8() -> Box<Rc<SubT<usize>>> {
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:27:9
   |
LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:27:9
   |
LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:27:25
   |
LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {
   |                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:35:1
   |
LL | mod outer_rc {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:41:9
   |
LL |     pub fn rc_test5(a: Rc<Box<bool>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:41:9
   |
LL |     pub fn rc_test5(a: Rc<Box<bool>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:41:21
   |
LL |     pub fn rc_test5(a: Rc<Box<bool>>) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:44:9
   |
LL |     pub fn rc_test7(a: Rc<Arc<bool>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:44:9
   |
LL |     pub fn rc_test7(a: Rc<Arc<bool>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:44:21
   |
LL |     pub fn rc_test7(a: Rc<Arc<bool>>) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:47:9
   |
LL |     pub fn rc_test8() -> Rc<Box<SubT<usize>>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:47:9
   |
LL |     pub fn rc_test8() -> Rc<Box<SubT<usize>>> {
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:53:9
   |
LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:53:9
   |
LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:53:24
   |
LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {
   |                        ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:61:1
   |
LL | mod outer_arc {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:67:9
   |
LL |     pub fn arc_test5(a: Arc<Box<bool>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:67:9
   |
LL |     pub fn arc_test5(a: Arc<Box<bool>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:67:22
   |
LL |     pub fn arc_test5(a: Arc<Box<bool>>) {}
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:70:9
   |
LL |     pub fn arc_test6(a: Arc<Rc<bool>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:70:9
   |
LL |     pub fn arc_test6(a: Arc<Rc<bool>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:70:22
   |
LL |     pub fn arc_test6(a: Arc<Rc<bool>>) {}
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:73:9
   |
LL |     pub fn arc_test8() -> Arc<Box<SubT<usize>>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:73:9
   |
LL |     pub fn arc_test8() -> Arc<Box<SubT<usize>>> {
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:79:9
   |
LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:79:9
   |
LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_allocation.rs:79:25
   |
LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {
   |                         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:88:1
   |
LL | mod box_dyn {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/redundant_allocation.rs:93:5
   |
LL |     pub trait T {}
   |     ^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:95:5
   |
LL |     struct S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:101:9
   |
LL |     pub fn test_box(_: Box<Box<dyn T>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:101:9
   |
LL |     pub fn test_box(_: Box<Box<dyn T>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:102:9
   |
LL |     pub fn test_rc(_: Rc<Box<dyn T>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:102:9
   |
LL |     pub fn test_rc(_: Rc<Box<dyn T>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:103:9
   |
LL |     pub fn test_arc(_: Arc<Box<dyn T>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:103:9
   |
LL |     pub fn test_arc(_: Arc<Box<dyn T>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:104:9
   |
LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:104:9
   |
LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}
   |         ^

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:109:1
   |
LL | mod box_fat_ptr {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:119:5
   |
LL |     struct S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:129:9
   |
LL |     pub fn test_box_str(_: Box<Box<str>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:129:9
   |
LL |     pub fn test_box_str(_: Box<Box<str>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:130:9
   |
LL |     pub fn test_rc_str(_: Rc<Box<str>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:130:9
   |
LL |     pub fn test_rc_str(_: Rc<Box<str>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:131:9
   |
LL |     pub fn test_arc_str(_: Arc<Box<str>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:131:9
   |
LL |     pub fn test_arc_str(_: Arc<Box<str>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:133:9
   |
LL |     pub fn test_box_slice(_: Box<Box<[usize]>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:133:9
   |
LL |     pub fn test_box_slice(_: Box<Box<[usize]>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:134:9
   |
LL |     pub fn test_box_path(_: Box<Box<Path>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:134:9
   |
LL |     pub fn test_box_path(_: Box<Box<Path>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:135:9
   |
LL |     pub fn test_box_custom(_: Box<Box<DynSized>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:135:9
   |
LL |     pub fn test_box_custom(_: Box<Box<DynSized>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:137:9
   |
LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:137:9
   |
LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:140:9
   |
LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:140:9
   |
LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:143:9
   |
LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:143:9
   |
LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:146:9
   |
LL |     pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:146:9
   |
LL |     pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}
   |         ^

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:151:1
   |
LL | fn type_in_closure() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:151:1
   |
LL | fn type_in_closure() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:151:1
   |
LL | fn type_in_closure() {
   | ^

error: references are not allowed
  --> tests/ui/redundant_allocation.rs:152:17
   |
LL |     let _ = |_: &mut Box<Box<dyn ToString>>| {};
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/redundant_allocation.rs:155:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_allocation.rs:155:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_allocation.rs:155:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 52 previous errors

