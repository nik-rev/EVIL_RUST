error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:5:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:5:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:5:1
   |
LL | fn main() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:7:1
   |
LL | / trait R {
LL | |     type Item;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:7:1
   |
LL | trait R {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:11:1
   |
LL | / trait Q {
LL | |     type Item;
LL | |     type Item2;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:11:1
   |
LL | trait Q {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:16:1
   |
LL | struct S;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:18:1
   |
LL | impl R for S {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:22:1
   |
LL | impl S {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:24:9
   |
LL |     pub fn new() -> impl R<Item = Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:24:9
   |
LL |     pub fn new() -> impl R<Item = Self> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:29:1
   |
LL | struct S2;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:31:1
   |
LL | impl R for S2 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:35:1
   |
LL | impl S2 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:37:9
   |
LL |     pub fn new(_: String) -> impl R<Item = Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:37:9
   |
LL |     pub fn new(_: String) -> impl R<Item = Self> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:42:1
   |
LL | struct S3;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:44:1
   |
LL | impl R for S3 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:48:1
   |
LL | impl S3 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:50:9
   |
LL |     pub fn new(_: String) -> impl R<Item = u32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:50:9
   |
LL |     pub fn new(_: String) -> impl R<Item = u32> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:57:1
   |
LL | struct S4;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:59:1
   |
LL | impl Q for S4 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:64:1
   |
LL | impl S4 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:66:9
   |
LL |     pub fn new(_: String) -> impl Q<Item = u32, Item2 = Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:66:9
   |
LL |     pub fn new(_: String) -> impl Q<Item = u32, Item2 = Self> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:71:1
   |
LL | struct T;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:73:1
   |
LL | impl T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:75:9
   |
LL |     pub fn new() -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:75:9
   |
LL |     pub fn new() -> Self {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:80:1
   |
LL | struct U;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:82:1
   |
LL | impl U {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:84:9
   |
LL |     pub fn new() -> u32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:84:9
   |
LL |     pub fn new() -> u32 {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:91:1
   |
LL | struct V;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:93:1
   |
LL | impl V {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:95:9
   |
LL |     pub fn new(_: String) -> u32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:95:9
   |
LL |     pub fn new(_: String) -> u32 {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:102:1
   |
LL | struct TupleReturnerOk;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:104:1
   |
LL | impl TupleReturnerOk {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:106:9
   |
LL |     pub fn new() -> (Self, u32) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:106:9
   |
LL |     pub fn new() -> (Self, u32) {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:111:1
   |
LL | struct TupleReturnerOk2;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:113:1
   |
LL | impl TupleReturnerOk2 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:115:9
   |
LL |     pub fn new() -> (u32, Self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:115:9
   |
LL |     pub fn new() -> (u32, Self) {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:120:1
   |
LL | struct TupleReturnerOk3;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:122:1
   |
LL | impl TupleReturnerOk3 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:124:9
   |
LL |     pub fn new() -> (Self, Self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:124:9
   |
LL |     pub fn new() -> (Self, Self) {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:129:1
   |
LL | struct TupleReturnerBad;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:131:1
   |
LL | impl TupleReturnerBad {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:133:9
   |
LL |     pub fn new() -> (u32, u32) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:133:9
   |
LL |     pub fn new() -> (u32, u32) {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:140:1
   |
LL | struct MutPointerReturnerOk;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:142:1
   |
LL | impl MutPointerReturnerOk {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:144:9
   |
LL |     pub fn new() -> *mut Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:144:9
   |
LL |     pub fn new() -> *mut Self {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:149:1
   |
LL | struct ConstPointerReturnerOk2;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:151:1
   |
LL | impl ConstPointerReturnerOk2 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:153:9
   |
LL |     pub fn new() -> *const Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:153:9
   |
LL |     pub fn new() -> *const Self {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:158:1
   |
LL | struct MutPointerReturnerBad;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:160:1
   |
LL | impl MutPointerReturnerBad {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:162:9
   |
LL |     pub fn new() -> *mut V {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:162:9
   |
LL |     pub fn new() -> *mut V {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:169:1
   |
LL | struct GenericReturnerOk;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:171:1
   |
LL | impl GenericReturnerOk {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:173:9
   |
LL |     pub fn new() -> Option<Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:173:9
   |
LL |     pub fn new() -> Option<Self> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:178:1
   |
LL | struct GenericReturnerBad;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:180:1
   |
LL | impl GenericReturnerBad {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:182:9
   |
LL |     pub fn new() -> Option<u32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:182:9
   |
LL |     pub fn new() -> Option<u32> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:189:1
   |
LL | struct NestedReturnerOk;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:191:1
   |
LL | impl NestedReturnerOk {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:193:9
   |
LL |     pub fn new() -> (Option<Self>, u32) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:193:9
   |
LL |     pub fn new() -> (Option<Self>, u32) {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:198:1
   |
LL | struct NestedReturnerOk2;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:200:1
   |
LL | impl NestedReturnerOk2 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:202:9
   |
LL |     pub fn new() -> ((Self, u32), u32) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:202:9
   |
LL |     pub fn new() -> ((Self, u32), u32) {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:207:1
   |
LL | struct NestedReturnerOk3;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:209:1
   |
LL | impl NestedReturnerOk3 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:211:9
   |
LL |     pub fn new() -> Option<(Self, u32)> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:211:9
   |
LL |     pub fn new() -> Option<(Self, u32)> {
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:216:1
   |
LL | struct WithLifetime<'a> {
   | ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/new_ret_no_self.rs:217:10
   |
LL |     cat: &'a str,
   |          ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:220:1
   |
LL | impl<'a> WithLifetime<'a> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:222:9
   |
LL |     pub fn new<'b: 'a>(s: &'b str) -> WithLifetime<'b> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:222:9
   |
LL |     pub fn new<'b: 'a>(s: &'b str) -> WithLifetime<'b> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:222:24
   |
LL |     pub fn new<'b: 'a>(s: &'b str) -> WithLifetime<'b> {
   |                        ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/new_ret_no_self.rs:222:27
   |
LL |     pub fn new<'b: 'a>(s: &'b str) -> WithLifetime<'b> {
   |                           ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:227:1
   |
LL | mod issue5435 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:228:5
   |
LL |     struct V;
   |     ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:230:5
   |
LL | /     pub trait TraitRetSelf {
LL | |         // should not trigger lint
LL | |         fn new() -> Self;
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:232:9
   |
LL |         fn new() -> Self;
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:232:9
   |
LL |         fn new() -> Self;
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:235:5
   |
LL | /     pub trait TraitRet {
LL | |         // should trigger lint as we are in trait definition
LL | |         fn new() -> String;
LL | |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:237:9
   |
LL |         fn new() -> String;
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:237:9
   |
LL |         fn new() -> String;
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:241:5
   |
LL |     impl TraitRet for StructRet {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:243:9
   |
LL |         fn new() -> String {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:243:9
   |
LL |         fn new() -> String {
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:248:5
   |
LL | /     pub trait TraitRet2 {
LL | |         // should trigger lint
LL | |         fn new(_: String) -> String;
LL | |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:250:9
   |
LL |         fn new(_: String) -> String;
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:250:9
   |
LL |         fn new(_: String) -> String;
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:254:5
   |
LL | /     trait TupleReturnerOk {
LL | |         // should not trigger lint
LL | |         fn new() -> (Self, u32)
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:254:5
   |
LL |     trait TupleReturnerOk {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:256:9
   |
LL |         fn new() -> (Self, u32)
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:256:9
   |
LL |         fn new() -> (Self, u32)
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:264:5
   |
LL | /     trait TupleReturnerOk2 {
LL | |         // should not trigger lint (it doesn't matter which element in the tuple is Self)
LL | |         fn new() -> (u32, Self)
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:264:5
   |
LL |     trait TupleReturnerOk2 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:266:9
   |
LL |         fn new() -> (u32, Self)
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:266:9
   |
LL |         fn new() -> (u32, Self)
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:274:5
   |
LL | /     trait TupleReturnerOk3 {
LL | |         // should not trigger lint (tuple can contain multiple Self)
LL | |         fn new() -> (Self, Self)
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:274:5
   |
LL |     trait TupleReturnerOk3 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:276:9
   |
LL |         fn new() -> (Self, Self)
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:276:9
   |
LL |         fn new() -> (Self, Self)
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:284:5
   |
LL | /     trait TupleReturnerBad {
LL | |         // should trigger lint
LL | |         fn new() -> (u32, u32) {
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:284:5
   |
LL |     trait TupleReturnerBad {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:286:9
   |
LL |         fn new() -> (u32, u32) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:286:9
   |
LL |         fn new() -> (u32, u32) {
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:293:5
   |
LL | /     trait MutPointerReturnerOk {
LL | |         // should not trigger lint
LL | |         fn new() -> *mut Self
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:293:5
   |
LL |     trait MutPointerReturnerOk {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:295:9
   |
LL |         fn new() -> *mut Self
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:295:9
   |
LL |         fn new() -> *mut Self
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:303:5
   |
LL | /     trait ConstPointerReturnerOk2 {
LL | |         // should not trigger lint
LL | |         fn new() -> *const Self
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:303:5
   |
LL |     trait ConstPointerReturnerOk2 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:305:9
   |
LL |         fn new() -> *const Self
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:305:9
   |
LL |         fn new() -> *const Self
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:313:5
   |
LL | /     trait MutPointerReturnerBad {
LL | |         // should trigger lint
LL | |         fn new() -> *mut V {
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:313:5
   |
LL |     trait MutPointerReturnerBad {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:315:9
   |
LL |         fn new() -> *mut V {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:315:9
   |
LL |         fn new() -> *mut V {
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:322:5
   |
LL | /     trait GenericReturnerOk {
LL | |         // should not trigger lint
LL | |         fn new() -> Option<Self>
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:322:5
   |
LL |     trait GenericReturnerOk {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:324:9
   |
LL |         fn new() -> Option<Self>
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:324:9
   |
LL |         fn new() -> Option<Self>
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:332:5
   |
LL | /     trait NestedReturnerOk {
LL | |         // should not trigger lint
LL | |         fn new() -> (Option<Self>, u32)
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:332:5
   |
LL |     trait NestedReturnerOk {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:334:9
   |
LL |         fn new() -> (Option<Self>, u32)
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:334:9
   |
LL |         fn new() -> (Option<Self>, u32)
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:342:5
   |
LL | /     trait NestedReturnerOk2 {
LL | |         // should not trigger lint
LL | |         fn new() -> ((Self, u32), u32)
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:342:5
   |
LL |     trait NestedReturnerOk2 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:344:9
   |
LL |         fn new() -> ((Self, u32), u32)
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:344:9
   |
LL |         fn new() -> ((Self, u32), u32)
   |         ^

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:352:5
   |
LL | /     trait NestedReturnerOk3 {
LL | |         // should not trigger lint
LL | |         fn new() -> Option<(Self, u32)>
LL | |         where
...  |
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:352:5
   |
LL |     trait NestedReturnerOk3 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:354:9
   |
LL |         fn new() -> Option<(Self, u32)>
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:354:9
   |
LL |         fn new() -> Option<(Self, u32)>
   |         ^

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:364:1
   |
LL | struct RetOtherSelf<T>(T);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:365:1
   |
LL | struct RetOtherSelfWrapper<T>(T);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:367:1
   |
LL | impl RetOtherSelf<T> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:368:5
   |
LL |     fn new(t: T) -> RetOtherSelf<RetOtherSelfWrapper<T>> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:368:5
   |
LL |     fn new(t: T) -> RetOtherSelf<RetOtherSelfWrapper<T>> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:368:12
   |
LL |     fn new(t: T) -> RetOtherSelf<RetOtherSelfWrapper<T>> {
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:373:1
   |
LL | mod issue7344 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:374:5
   |
LL |     struct RetImplTraitSelf<T>(T);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:376:5
   |
LL |     impl<T> RetImplTraitSelf<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:378:9
   |
LL |         fn new(t: T) -> impl Into<Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:378:9
   |
LL |         fn new(t: T) -> impl Into<Self> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:378:16
   |
LL |         fn new(t: T) -> impl Into<Self> {
   |                ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:383:5
   |
LL |     struct RetImplTraitNoSelf<T>(T);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:385:5
   |
LL |     impl<T> RetImplTraitNoSelf<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:387:9
   |
LL |         fn new(t: T) -> impl Into<i32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:387:9
   |
LL |         fn new(t: T) -> impl Into<i32> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:387:16
   |
LL |         fn new(t: T) -> impl Into<i32> {
   |                ^ help: make this parameter mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:394:5
   |
LL |     trait Trait2<T, U> {}
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:394:5
   |
LL |     trait Trait2<T, U> {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:395:5
   |
LL |     impl<T, U> Trait2<T, U> for () {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:397:5
   |
LL |     struct RetImplTraitSelf2<T>(T);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:399:5
   |
LL |     impl<T> RetImplTraitSelf2<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:401:9
   |
LL |         fn new(t: T) -> impl Trait2<(), Self> {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:401:9
   |
LL |         fn new(t: T) -> impl Trait2<(), Self> {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:401:16
   |
LL |         fn new(t: T) -> impl Trait2<(), Self> {}
   |                ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:404:5
   |
LL |     struct RetImplTraitNoSelf2<T>(T);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:406:5
   |
LL |     impl<T> RetImplTraitNoSelf2<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:408:9
   |
LL |         fn new(t: T) -> impl Trait2<(), i32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:408:9
   |
LL |         fn new(t: T) -> impl Trait2<(), i32> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:408:16
   |
LL |         fn new(t: T) -> impl Trait2<(), i32> {
   |                ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:413:5
   |
LL |     struct RetImplTraitSelfAdt<'a>(&'a str);
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/new_ret_no_self.rs:413:36
   |
LL |     struct RetImplTraitSelfAdt<'a>(&'a str);
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/new_ret_no_self.rs:415:5
   |
LL |     impl<'a> RetImplTraitSelfAdt<'a> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/new_ret_no_self.rs:417:9
   |
LL |         fn new<'b: 'a>(s: &'b str) -> impl Into<RetImplTraitSelfAdt<'b>> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/new_ret_no_self.rs:417:9
   |
LL |         fn new<'b: 'a>(s: &'b str) -> impl Into<RetImplTraitSelfAdt<'b>> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/new_ret_no_self.rs:417:24
   |
LL |         fn new<'b: 'a>(s: &'b str) -> impl Into<RetImplTraitSelfAdt<'b>> {
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/new_ret_no_self.rs:417:27
   |
LL |         fn new<'b: 'a>(s: &'b str) -> impl Into<RetImplTraitSelfAdt<'b>> {
   |                           ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 151 previous errors

