error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:14:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:14:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:14:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:15:9
   |
LL |     let _s = ["lorem", "ipsum"].join(" ").to_string();
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:18:9
   |
LL |     let s = String::from("foo");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:19:9
   |
LL |     let _s = s.clone();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:22:9
   |
LL |     let s = String::from("foo");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:23:9
   |
LL |     let _s = s.to_string();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:26:9
   |
LL |     let s = String::from("foo");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:27:9
   |
LL |     let _s = s.to_owned();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:30:9
   |
LL |     let _s = Path::new("/a/b/").join("c").to_owned();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:33:9
   |
LL |     let _s = Path::new("/a/b/").join("c").to_path_buf();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:36:9
   |
LL |     let _s = OsString::new().to_owned();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:39:9
   |
LL |     let _s = OsString::new().to_os_string();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:44:9
   |
LL |     let _s = String::new().to_string();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:48:9
   |
LL |     let _s = String::new().to_string();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:50:9
   |
LL |     let tup = (String::from("foo"),);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:51:9
   |
LL |     let _t = tup.0.clone();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:54:9
   |
LL |     let tup_ref = &(String::from("foo"),);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:54:19
   |
LL |     let tup_ref = &(String::from("foo"),);
   |                   ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:55:9
   |
LL |     let _s = tup_ref.0.clone(); // this `.clone()` cannot be removed
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:58:13
   |
LL |         let x = String::new();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:59:13
   |
LL |         let y = &x;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:59:17
   |
LL |         let y = &x;
   |                 ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:61:13
   |
LL |         let _x = x.clone(); // ok; `x` is borrowed by `y`
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:66:9
   |
LL |     let x = (String::new(),);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:82:1
   |
LL | struct Alpha;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:81:10
   |
LL | #[derive(Clone)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:81:7
   |
LL | #[derive(Clone)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:81:7
   |
LL | #[derive(Clone)]
   |       ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:81:10
   |
LL | #[derive(Clone)]
   |          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:81:10
   |
LL | #[derive(Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:83:1
   |
LL | fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:83:1
   |
LL | fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:83:1
   |
LL | fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {
   | ^

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:83:16
   |
LL | fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:83:26
   |
LL | fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {
   |                          ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:88:1
   |
LL | fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:88:1
   |
LL | fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:88:1
   |
LL | fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {
   | ^

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:88:23
   |
LL | fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:92:1
   |
LL | struct TypeWithDrop {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:96:1
   |
LL | impl Drop for TypeWithDrop {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:97:5
   |
LL |     fn drop(&mut self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:97:5
   |
LL |     fn drop(&mut self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:97:18
   |
LL |     fn drop(&mut self) {}
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:97:13
   |
LL |     fn drop(&mut self) {}
   |             ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:100:1
   |
LL | fn cannot_move_from_type_with_drop() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:100:1
   |
LL | fn cannot_move_from_type_with_drop() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:100:1
   |
LL | fn cannot_move_from_type_with_drop() -> String {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:101:9
   |
LL |     let s = TypeWithDrop { x: String::new() };
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:105:1
   |
LL | fn borrower_propagation() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:105:1
   |
LL | fn borrower_propagation() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:105:1
   |
LL | fn borrower_propagation() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:106:9
   |
LL |     let s = String::new();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:107:9
   |
LL |     let t = String::new();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:110:9
   |
LL |         fn b() -> bool {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:110:9
   |
LL |         fn b() -> bool {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:110:9
   |
LL |         fn b() -> bool {
   |         ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:113:13
   |
LL |         let _u = if b() { &s } else { &t };
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:113:27
   |
LL |         let _u = if b() { &s } else { &t };
   |                           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:113:39
   |
LL |         let _u = if b() { &s } else { &t };
   |                                       ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:116:13
   |
LL |         let _s = s.clone();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:117:13
   |
LL |         let _t = t.clone();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:121:13
   |
LL |         let _u = || s.len();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:122:13
   |
LL |         let _v = [&t; 32];
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:122:19
   |
LL |         let _v = [&t; 32];
   |                   ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:123:13
   |
LL |         let _s = s.clone(); // ok
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:124:13
   |
LL |         let _t = t.clone(); // ok
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:128:13
   |
LL |         let _u = {
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:129:17
   |
LL |             let u = Some(&s);
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:129:26
   |
LL |             let u = Some(&s);
   |                          ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:133:13
   |
LL |         let _s = s.clone(); // ok
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:138:13
   |
LL |         let _u = id(id(&s));
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:138:24
   |
LL |         let _u = id(id(&s));
   |                        ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:139:13
   |
LL |         let _s = s.clone(); // ok, `u` borrows `s`
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:142:9
   |
LL |     let _s = s.clone();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:144:9
   |
LL |     let _t = t.clone();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:148:5
   |
LL |     struct Foo {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:147:14
   |
LL |     #[derive(Clone)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:147:11
   |
LL |     #[derive(Clone)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:147:11
   |
LL |     #[derive(Clone)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:147:14
   |
LL |     #[derive(Clone)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:147:14
   |
LL |     #[derive(Clone)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:149:9
   |
LL |     #[derive(Clone)]
   |              ----- in this derive macro expansion
LL |     struct Foo {
LL |         x: usize,
   |         ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:153:13
   |
LL |         let f = Foo { x: 123 };
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:154:13
   |
LL |         let _x = Some(f.x);
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:155:13
   |
LL |         let _f = f.clone();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:160:13
   |
LL |         let f = Foo { x: 123 };
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:161:13
   |
LL |         let _x = &f.x;
   |             ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:161:18
   |
LL |         let _x = &f.x;
   |                  ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:162:13
   |
LL |         let _f = f.clone(); // ok
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:166:1
   |
LL | fn not_consumed() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:166:1
   |
LL | fn not_consumed() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:166:1
   |
LL | fn not_consumed() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:167:9
   |
LL |     let x = std::path::PathBuf::from("home");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:168:9
   |
LL |     let y = x.clone().join("matthias");
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:178:5
   |
LL |     assert_eq!(s, "bar");
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/redundant_clone.rs:178:5
   |
LL |     assert_eq!(s, "bar");
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:178:5
   |
LL |     assert_eq!(s, "bar");
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/redundant_clone.rs:178:5
   |
LL |     assert_eq!(s, "bar");
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/redundant_clone.rs:178:5
   |
LL |     assert_eq!(s, "bar");
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:180:9
   |
LL |     let t = Some(s);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:191:1
   |
LL | fn issue_5405() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:191:1
   |
LL | fn issue_5405() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:191:1
   |
LL | fn issue_5405() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:192:9
   |
LL |     let a: [String; 1] = [String::from("foo")];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:193:9
   |
LL |     let _b: String = a[0].clone();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:195:9
   |
LL |     let c: [usize; 2] = [2, 3];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:196:9
   |
LL |     let _d: usize = c[1].clone();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:199:1
   |
LL | fn manually_drop() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:199:1
   |
LL | fn manually_drop() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:199:1
   |
LL | fn manually_drop() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:203:9
   |
LL |     let a = ManuallyDrop::new(Arc::new("Hello!".to_owned()));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:206:9
   |
LL |     let p: *const String = Arc::into_raw(ManuallyDrop::into_inner(a));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:213:1
   |
LL | fn clone_then_move_cloned() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:213:1
   |
LL | fn clone_then_move_cloned() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:213:1
   |
LL | fn clone_then_move_cloned() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:215:9
   |
LL |     let x = Some(String::new());
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:217:5
   |
LL |     assert_eq!(x.clone(), None, "not equal {}", x.unwrap());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/redundant_clone.rs:217:5
   |
LL |     assert_eq!(x.clone(), None, "not equal {}", x.unwrap());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:217:5
   |
LL |     assert_eq!(x.clone(), None, "not equal {}", x.unwrap());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/redundant_clone.rs:217:5
   |
LL |     assert_eq!(x.clone(), None, "not equal {}", x.unwrap());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/redundant_clone.rs:217:5
   |
LL |     assert_eq!(x.clone(), None, "not equal {}", x.unwrap());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:220:5
   |
LL |     fn foo<F: Fn()>(_: &Alpha, _: F) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:220:5
   |
LL |     fn foo<F: Fn()>(_: &Alpha, _: F) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:220:5
   |
LL |     fn foo<F: Fn()>(_: &Alpha, _: F) {}
   |     ^

error: references are not allowed
  --> tests/ui/redundant_clone.rs:220:24
   |
LL |     fn foo<F: Fn()>(_: &Alpha, _: F) {}
   |                        ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:221:9
   |
LL |     let x = Alpha;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:223:9
   |
LL |     foo(&x.clone(), move || {
   |         ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:229:5
   |
LL |     struct S(String);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:230:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:231:9
   |
LL |         fn m(&mut self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:231:9
   |
LL |         fn m(&mut self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:231:19
   |
LL |         fn m(&mut self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:231:14
   |
LL |         fn m(&mut self) {}
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:237:1
   |
LL | fn hashmap_neg() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:237:1
   |
LL | fn hashmap_neg() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:237:1
   |
LL | fn hashmap_neg() {
   | ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:242:9
   |
LL |     let p = PathBuf::from("/");
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:244:24
   |
LL |     let mut h: HashMap<&str, &str> = HashMap::new();
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:244:30
   |
LL |     let mut h: HashMap<&str, &str> = HashMap::new();
   |                              ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:253:1
   |
LL | fn false_negative_5707() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:253:1
   |
LL | fn false_negative_5707() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:253:1
   |
LL | fn false_negative_5707() {
   | ^

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:254:5
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:254:5
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:254:5
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:254:12
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:254:24
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:254:16
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |                ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:254:28
   |
LL |     fn foo(_x: &Alpha, _y: &mut Alpha) {}
   |                            ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:256:9
   |
LL |     let x = Alpha;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:258:9
   |
LL |     foo(&x, &mut y);
   |         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:258:13
   |
LL |     foo(&x, &mut y);
   |             ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:259:9
   |
LL |     let _z = x.clone(); // pr 7346 can't lint on `x`
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:263:1
   |
LL | mod issue10074 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:265:5
   |
LL |     enum MyEnum {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:264:14
   |
LL |     #[derive(Debug, Clone)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:264:11
   |
LL |     #[derive(Debug, Clone)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:264:11
   |
LL |     #[derive(Debug, Clone)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:264:14
   |
LL |     #[derive(Debug, Clone)]
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:264:14
   |
LL |     #[derive(Debug, Clone)]
   |              ^

error: references are not allowed
  --> tests/ui/redundant_clone.rs:264:14
   |
LL |     #[derive(Debug, Clone)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:264:14
   |
LL |     #[derive(Debug, Clone)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:264:21
   |
LL |     #[derive(Debug, Clone)]
   |                     ^

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:264:18
   |
LL |     #[derive(Debug, Clone)]
   |                  ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:264:18
   |
LL |     #[derive(Debug, Clone)]
   |                  ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:264:21
   |
LL |     #[derive(Debug, Clone)]
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/redundant_clone.rs:264:21
   |
LL |     #[derive(Debug, Clone)]
   |                     ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:269:5
   |
LL |     fn false_positive_on_as() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:269:5
   |
LL |     fn false_positive_on_as() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:269:5
   |
LL |     fn false_positive_on_as() {
   |     ^

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:270:13
   |
LL |         let e = MyEnum::A;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:271:13
   |
LL |         let v = e.clone() as u16;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:278:1
   |
LL | mod issue13900 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:281:5
   |
LL |     fn do_something(f: impl Display + Clone) -> String {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:281:5
   |
LL |     fn do_something(f: impl Display + Clone) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:281:5
   |
LL |     fn do_something(f: impl Display + Clone) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/redundant_clone.rs:281:21
   |
LL |     fn do_something(f: impl Display + Clone) -> String {
   |                     ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/redundant_clone.rs:282:13
   |
LL |         let g = f.clone();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/redundant_clone.rs:286:5
   |
LL |     fn regression() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/redundant_clone.rs:286:5
   |
LL |     fn regression() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/redundant_clone.rs:286:5
   |
LL |     fn regression() {
   |     ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 165 previous errors

