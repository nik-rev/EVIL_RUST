error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:3:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:3:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:3:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:26:29
   |
LL |     let _ = "hello".replace(&x.f(), &x.f());
   |                             ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:26:37
   |
LL |     let _ = "hello".replace(&x.f(), &x.f());
   |                                     ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:29:29
   |
LL |     let _ = "hello".replace(&x.f(), &x.ff());
   |                             ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:29:37
   |
LL |     let _ = "hello".replace(&x.f(), &x.ff());
   |                                     ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:31:29
   |
LL |     let _ = "hello".replace(&y(), &y());
   |                             ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:31:35
   |
LL |     let _ = "hello".replace(&y(), &y());
   |                                   ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:34:29
   |
LL |     let _ = "hello".replace(&y(), &z());
   |                             ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:34:35
   |
LL |     let _ = "hello".replace(&y(), &z());
   |                                   ^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:40:1
   |
LL | struct X {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:39:10
   |
LL | #[derive(Default)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:39:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:39:7
   |
LL | #[derive(Default)]
   |       ^  ------- in this derive macro expansion

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:42:1
   |
LL | impl X {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:43:5
   |
LL |     fn f(&mut self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:43:5
   |
LL |     fn f(&mut self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/no_effect_replace.rs:43:15
   |
LL |     fn f(&mut self) -> String {
   |               ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:43:10
   |
LL |     fn f(&mut self) -> String {
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:47:5
   |
LL |     fn ff(&mut self) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:47:5
   |
LL |     fn ff(&mut self) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/no_effect_replace.rs:47:16
   |
LL |     fn ff(&mut self) -> String {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:47:11
   |
LL |     fn ff(&mut self) -> String {
   |           ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:52:1
   |
LL | fn y() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:52:1
   |
LL | fn y() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:52:1
   |
LL | fn y() -> String {
   | ^

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:56:1
   |
LL | fn z() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:56:1
   |
LL | fn z() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:56:1
   |
LL | fn z() -> String {
   | ^

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:60:1
   |
LL | struct Replaceme;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/no_effect_replace.rs:61:1
   |
LL | impl Replaceme {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/no_effect_replace.rs:62:9
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/no_effect_replace.rs:62:9
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/no_effect_replace.rs:62:25
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |                         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/no_effect_replace.rs:62:31
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |                               ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/no_effect_replace.rs:62:40
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |                                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:62:20
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |                    ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:62:34
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/no_effect_replace.rs:62:43
   |
LL |     pub fn replace(&mut self, a: &str, b: &str) -> Self {
   |                                           ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 37 previous errors

