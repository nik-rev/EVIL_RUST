error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:6:1
   |
LL | fn fut() -> impl Future<Output = i32> {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:6:1
   |
LL | fn fut() -> impl Future<Output = i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:6:1
   |
LL | fn fut() -> impl Future<Output = i32> {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:12:1
   |
LL | fn fut2() ->impl Future<Output = i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:12:1
   |
LL | fn fut2() ->impl Future<Output = i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:12:1
   |
LL | fn fut2() ->impl Future<Output = i32> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:18:1
   |
LL | fn fut3()-> impl Future<Output = i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:18:1
   |
LL | fn fut3()-> impl Future<Output = i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:18:1
   |
LL | fn fut3()-> impl Future<Output = i32> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:23:1
   |
LL | fn empty_fut() -> impl Future<Output = ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:23:1
   |
LL | fn empty_fut() -> impl Future<Output = ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:23:1
   |
LL | fn empty_fut() -> impl Future<Output = ()> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:29:1
   |
LL | fn empty_fut2() ->impl Future<Output = ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:29:1
   |
LL | fn empty_fut2() ->impl Future<Output = ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:29:1
   |
LL | fn empty_fut2() ->impl Future<Output = ()> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:35:1
   |
LL | fn empty_fut3()-> impl Future<Output = ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:35:1
   |
LL | fn empty_fut3()-> impl Future<Output = ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:35:1
   |
LL | fn empty_fut3()-> impl Future<Output = ()> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:40:1
   |
LL | fn core_fut() -> impl core::future::Future<Output = i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:40:1
   |
LL | fn core_fut() -> impl core::future::Future<Output = i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:40:1
   |
LL | fn core_fut() -> impl core::future::Future<Output = i32> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:46:1
   |
LL | fn has_other_stmts() -> impl core::future::Future<Output = i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:46:1
   |
LL | fn has_other_stmts() -> impl core::future::Future<Output = i32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:46:1
   |
LL | fn has_other_stmts() -> impl core::future::Future<Output = i32> {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:52:1
   |
LL | fn not_fut() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:52:1
   |
LL | fn not_fut() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:52:1
   |
LL | fn not_fut() -> i32 {
   | ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:57:1
   |
LL | async fn already_async() -> impl Future<Output = i32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:57:7
   |
LL | async fn already_async() -> impl Future<Output = i32> {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:57:7
   |
LL | async fn already_async() -> impl Future<Output = i32> {
   |       ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:61:1
   |
LL | struct S;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:62:1
   |
LL | impl S {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:63:5
   |
LL |     fn inh_fut() -> impl Future<Output = i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:63:5
   |
LL |     fn inh_fut() -> impl Future<Output = i32> {
   |     ^

error: variable must be `mut`
  --> tests/ui/manual_async_fn.rs:67:17
   |
LL |             let a = 42;
   |                 ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/manual_async_fn.rs:68:17
   |
LL |             let b = 21;
   |                 ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_async_fn.rs:70:21
   |
LL |                 let c = 21;
   |                     ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_async_fn.rs:71:21
   |
LL |                 let d = 42;
   |                     ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:81:5
   |
LL |     fn not_fut(&self) -> i32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:81:5
   |
LL |     fn not_fut(&self) -> i32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/manual_async_fn.rs:81:17
   |
LL |     fn not_fut(&self) -> i32 {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:81:16
   |
LL |     fn not_fut(&self) -> i32 {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:86:5
   |
LL |     fn has_other_stmts() -> impl core::future::Future<Output = i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:86:5
   |
LL |     fn has_other_stmts() -> impl core::future::Future<Output = i32> {
   |     ^

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:92:11
   |
LL |     async fn already_async(&self) -> impl Future<Output = i32> {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:92:11
   |
LL |     async fn already_async(&self) -> impl Future<Output = i32> {
   |           ^

error: parameter must be `mut`
  --> tests/ui/manual_async_fn.rs:92:29
   |
LL |     async fn already_async(&self) -> impl Future<Output = i32> {
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:92:28
   |
LL |     async fn already_async(&self) -> impl Future<Output = i32> {
   |                            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:99:1
   |
LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:99:1
   |
LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:99:1
   |
LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {
   | ^

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:99:14
   |
LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {
   |              ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:105:1
   |
LL | fn elided_not_bound(_: &i32) -> impl Future<Output = i32> + use<> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:105:1
   |
LL | fn elided_not_bound(_: &i32) -> impl Future<Output = i32> + use<> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:105:1
   |
LL | fn elided_not_bound(_: &i32) -> impl Future<Output = i32> + use<> {
   | ^

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:105:24
   |
LL | fn elided_not_bound(_: &i32) -> impl Future<Output = i32> + use<> {
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:110:1
   |
LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:110:1
   |
LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:110:1
   |
LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {
   | ^

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:110:24
   |
LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {
   |                        ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:110:36
   |
LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:117:1
   |
LL | fn explicit_not_bound<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + use<> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:117:1
   |
LL | fn explicit_not_bound<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + use<> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:117:1
   |
LL | fn explicit_not_bound<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + use<> {
   | ^

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:117:34
   |
LL | fn explicit_not_bound<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + use<> {
   |                                  ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:117:46
   |
LL | fn explicit_not_bound<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + use<> {
   |                                              ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:122:1
   |
LL | mod issue_5765 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:125:5
   |
LL |     struct A;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:126:5
   |
LL |     impl A {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:127:9
   |
LL |         fn f(&self) -> impl Future<Output = ()> + use<> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:127:9
   |
LL |         fn f(&self) -> impl Future<Output = ()> + use<> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_async_fn.rs:127:15
   |
LL |         fn f(&self) -> impl Future<Output = ()> + use<> {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_async_fn.rs:127:14
   |
LL |         fn f(&self) -> impl Future<Output = ()> + use<> {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:132:5
   |
LL |     fn test() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:132:5
   |
LL |     fn test() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:132:5
   |
LL |     fn test() {
   |     ^

error: variable must be `mut`
  --> tests/ui/manual_async_fn.rs:133:13
   |
LL |         let _future = {
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_async_fn.rs:134:17
   |
LL |             let a = A;
   |                 ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:140:5
   |
LL | pub fn issue_10450() -> impl Future<Output = i32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:140:5
   |
LL | pub fn issue_10450() -> impl Future<Output = i32> {
   |     ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:145:1
   |
LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {
   | ^^^^^^^^^^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:145:12
   |
LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {
   |            ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:145:12
   |
LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {
   |            ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:150:1
   |
LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> {
   | ^^^^^^^^^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:150:11
   |
LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:150:11
   |
LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> {
   |           ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:155:1
   |
LL | macro_rules! issue_12407 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:166:13
   |
LL |               $v $($($overrides)*)? fn $name$(<$($params)*>)?(
   |               ^ help: make this item public: `pub`
...
LL | / issue_12407! {
LL | |     fn _hello() -> impl Future<Output = ()> = async {};
LL | |     fn non_async() = println!("hello");
LL | |     fn foo() = non_async();
LL | | }
   | |_- in this macro invocation
   |
   = note: this error originates in the macro `issue_12407` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:176:5
   |
LL |     fn _hello() -> impl Future<Output = ()> = async {};
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:176:5
   |
LL |     fn _hello() -> impl Future<Output = ()> = async {};
   |     ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:166:13
   |
LL |               $v $($($overrides)*)? fn $name$(<$($params)*>)?(
   |               ^ help: make this item public: `pub`
...
LL | / issue_12407! {
LL | |     fn _hello() -> impl Future<Output = ()> = async {};
LL | |     fn non_async() = println!("hello");
LL | |     fn foo() = non_async();
LL | | }
   | |_- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `issue_12407` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:177:5
   |
LL |     fn non_async() = println!("hello");
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:177:5
   |
LL |     fn non_async() = println!("hello");
   |     ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:166:13
   |
LL |               $v $($($overrides)*)? fn $name$(<$($params)*>)?(
   |               ^ help: make this item public: `pub`
...
LL | / issue_12407! {
LL | |     fn _hello() -> impl Future<Output = ()> = async {};
LL | |     fn non_async() = println!("hello");
LL | |     fn foo() = non_async();
LL | | }
   | |_- in this macro invocation
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `issue_12407` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:178:5
   |
LL |     fn foo() = non_async();
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:178:5
   |
LL |     fn foo() = non_async();
   |     ^

error: item must be `pub`
  --> tests/ui/manual_async_fn.rs:181:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_async_fn.rs:181:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_async_fn.rs:181:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 76 previous errors

