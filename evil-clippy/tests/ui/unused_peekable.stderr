error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:6:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:6:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:6:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:12:1
   |
LL | fn invalid() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:12:1
   |
LL | fn invalid() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:12:1
   |
LL | fn invalid() {
   | ^

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:13:9
   |
LL |     let peekable = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:17:9
   |
LL |     let old_local = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:18:9
   |
LL |     let new_local = old_local;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:23:9
   |
LL |     let by_mut_ref = &mut by_mut_ref_test;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:23:22
   |
LL |     let by_mut_ref = &mut by_mut_ref_test;
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:27:5
   |
LL |     fn returns_peekable() -> Peekable<Empty<u32>> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:27:5
   |
LL |     fn returns_peekable() -> Peekable<Empty<u32>> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:27:5
   |
LL |     fn returns_peekable() -> Peekable<Empty<u32>> {
   |     ^

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:31:9
   |
LL |     let peekable_from_fn = returns_peekable();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:41:5
   |
LL |     fn takes_ref(_peek: &Peekable<Empty<u32>>) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:41:5
   |
LL |     fn takes_ref(_peek: &Peekable<Empty<u32>>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:41:5
   |
LL |     fn takes_ref(_peek: &Peekable<Empty<u32>>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/unused_peekable.rs:41:18
   |
LL |     fn takes_ref(_peek: &Peekable<Empty<u32>>) {}
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:41:25
   |
LL |     fn takes_ref(_peek: &Peekable<Empty<u32>>) {}
   |                         ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:42:9
   |
LL |     let passed_along_ref = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:45:15
   |
LL |     takes_ref(&passed_along_ref);
   |               ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:49:9
   |
LL |     let _by_ref = by_ref_test.by_ref();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:58:1
   |
LL | fn valid() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:58:1
   |
LL | fn valid() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:58:1
   |
LL | fn valid() {
   | ^

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:59:5
   |
LL |     fn takes_peekable(_peek: Peekable<Empty<u32>>) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:59:5
   |
LL |     fn takes_peekable(_peek: Peekable<Empty<u32>>) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:59:5
   |
LL |     fn takes_peekable(_peek: Peekable<Empty<u32>>) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/unused_peekable.rs:59:23
   |
LL |     fn takes_peekable(_peek: Peekable<Empty<u32>>) {}
   |                       ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:62:9
   |
LL |     let passed_along = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:66:5
   |
LL |     struct PeekableConsumer;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:67:5
   |
LL |     impl PeekableConsumer {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:68:9
   |
LL |         fn consume(&self, _: Peekable<Empty<u32>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:68:9
   |
LL |         fn consume(&self, _: Peekable<Empty<u32>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/unused_peekable.rs:68:21
   |
LL |         fn consume(&self, _: Peekable<Empty<u32>>) {}
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:68:20
   |
LL |         fn consume(&self, _: Peekable<Empty<u32>>) {}
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:69:9
   |
LL |         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:69:9
   |
LL |         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/unused_peekable.rs:69:29
   |
LL |         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:69:28
   |
LL |         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}
   |                            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:69:38
   |
LL |         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:70:9
   |
LL |         fn consume_assoc(_: Peekable<Empty<u32>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:70:9
   |
LL |         fn consume_assoc(_: Peekable<Empty<u32>>) {}
   |         ^

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:71:9
   |
LL |         fn consume_assoc_mut_ref(_: &mut Peekable<Empty<u32>>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:71:9
   |
LL |         fn consume_assoc_mut_ref(_: &mut Peekable<Empty<u32>>) {}
   |         ^

error: references are not allowed
  --> tests/ui/unused_peekable.rs:71:37
   |
LL |         fn consume_assoc_mut_ref(_: &mut Peekable<Empty<u32>>) {}
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:73:9
   |
LL |     let peekable_consumer = PeekableConsumer;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:75:9
   |
LL |     let peekable = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:79:39
   |
LL |     peekable_consumer.consume_mut_ref(&mut peekable);
   |                                       ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:81:9
   |
LL |     let peekable = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:85:45
   |
LL |     PeekableConsumer::consume_assoc_mut_ref(&mut peekable);
   |                                             ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:102:45
   |
LL |         peekable_with_next_if_eq.next_if_eq(&3);
   |                                             ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:106:9
   |
LL |     let call_peek = |p: &mut Peekable<Empty<u32>>| {
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:106:25
   |
LL |     let call_peek = |p: &mut Peekable<Empty<u32>>| {
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:109:15
   |
LL |     call_peek(&mut peekable_in_closure);
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:112:5
   |
LL |     macro_rules! make_me_a_peekable_please {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:118:9
   |
LL |     let _unsuspecting_macro_user = make_me_a_peekable_please!();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:121:5
   |
LL |     fn return_an_iter() -> impl Iterator<Item = u32> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:121:5
   |
LL |     fn return_an_iter() -> impl Iterator<Item = u32> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:121:5
   |
LL |     fn return_an_iter() -> impl Iterator<Item = u32> {
   |     ^

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:125:9
   |
LL |     let _unsuspecting_user = return_an_iter();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:128:5
   |
LL |     macro_rules! peek_iter {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:139:9
   |
LL |     let by_mut_ref = &mut by_mut_ref_test;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:139:22
   |
LL |     let by_mut_ref = &mut by_mut_ref_test;
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:144:9
   |
LL |     let by_ref = &by_ref_test;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:144:18
   |
LL |     let by_ref = &by_ref_test;
   |                  ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:148:5
   |
LL |     struct PeekableWrapper {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:152:9
   |
LL |     let struct_test = std::iter::empty::<u32>().peekable();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:157:9
   |
LL |     let peeked_val = by_ref_test.by_ref().peek();
   |         ^ help: make this variable mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/unused_peekable.rs:170:5
   |
LL |     trait PeekTrait {}
   |     ^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:170:5
   |
LL |     trait PeekTrait {}
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:171:5
   |
LL |     impl<I> PeekTrait for Peekable<I> where I: Iterator {}
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:174:9
   |
LL |     let _dyn = &mut peekable as &mut dyn PeekTrait;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:174:16
   |
LL |     let _dyn = &mut peekable as &mut dyn PeekTrait;
   |                ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:174:33
   |
LL |     let _dyn = &mut peekable as &mut dyn PeekTrait;
   |                                 ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:176:5
   |
LL |     fn takes_dyn(_: &mut dyn PeekTrait) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:176:5
   |
LL |     fn takes_dyn(_: &mut dyn PeekTrait) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:176:5
   |
LL |     fn takes_dyn(_: &mut dyn PeekTrait) {}
   |     ^

error: references are not allowed
  --> tests/ui/unused_peekable.rs:176:21
   |
LL |     fn takes_dyn(_: &mut dyn PeekTrait) {}
   |                     ^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/unused_peekable.rs:178:15
   |
LL |     takes_dyn(&mut peekable);
   |               ^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/unused_peekable.rs:181:1
   |
LL | fn allow_works() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unused_peekable.rs:181:1
   |
LL | fn allow_works() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unused_peekable.rs:181:1
   |
LL | fn allow_works() {
   | ^

error: variable must be `mut`
  --> tests/ui/unused_peekable.rs:183:9
   |
LL |     let iter = [1, 2, 3].iter().peekable();
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 76 previous errors

