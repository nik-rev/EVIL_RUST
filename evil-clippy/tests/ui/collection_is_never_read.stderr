error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:6:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:6:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:6:1
   |
LL | fn main() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:8:1
   |
LL | fn not_a_collection() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:8:1
   |
LL | fn not_a_collection() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:8:1
   |
LL | fn not_a_collection() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:14:1
   |
LL | fn no_access_at_all() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:14:1
   |
LL | fn no_access_at_all() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:14:1
   |
LL | fn no_access_at_all() {
   | ^

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:16:9
   |
LL |     let x = vec![1, 2, 3]; // Ok
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:19:1
   |
LL | fn write_without_read() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:19:1
   |
LL | fn write_without_read() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:19:1
   |
LL | fn write_without_read() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:27:1
   |
LL | fn read_without_write() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:27:1
   |
LL | fn read_without_write() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:27:1
   |
LL | fn read_without_write() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:32:1
   |
LL | fn write_and_read() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:32:1
   |
LL | fn write_and_read() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:32:1
   |
LL | fn write_and_read() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:38:1
   |
LL | fn write_after_read() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:38:1
   |
LL | fn write_after_read() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:38:1
   |
LL | fn write_after_read() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:45:1
   |
LL | fn write_before_reassign() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:45:1
   |
LL | fn write_before_reassign() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:45:1
   |
LL | fn write_before_reassign() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:53:1
   |
LL | fn read_in_closure() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:53:1
   |
LL | fn read_in_closure() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:53:1
   |
LL | fn read_in_closure() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:61:1
   |
LL | fn write_in_closure() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:61:1
   |
LL | fn write_in_closure() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:61:1
   |
LL | fn write_in_closure() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:70:1
   |
LL | fn read_in_format() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:70:1
   |
LL | fn read_in_format() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:70:1
   |
LL | fn read_in_format() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:76:1
   |
LL | fn shadowing_1() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:76:1
   |
LL | fn shadowing_1() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:76:1
   |
LL | fn shadowing_1() {
   | ^

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:77:9
   |
LL |     let x = HashMap::<usize, usize>::new(); // Ok
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:85:1
   |
LL | fn shadowing_2() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:85:1
   |
LL | fn shadowing_2() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:85:1
   |
LL | fn shadowing_2() {
   | ^

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:90:9
   |
LL |     let x = HashMap::<usize, usize>::new(); // Ok
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:95:1
   |
LL | fn fake_read_1() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:95:1
   |
LL | fn fake_read_1() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:95:1
   |
LL | fn fake_read_1() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:103:1
   |
LL | fn fake_read_2() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:103:1
   |
LL | fn fake_read_2() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:103:1
   |
LL | fn fake_read_2() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:111:1
   |
LL | fn assignment() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:111:1
   |
LL | fn assignment() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:111:1
   |
LL | fn assignment() {
   | ^

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:115:9
   |
LL |     let y = vec![4, 5, 6]; // Ok
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:120:1
   |
LL | fn self_assignment() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:120:1
   |
LL | fn self_assignment() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:120:1
   |
LL | fn self_assignment() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:127:1
   |
LL | fn method_argument_but_not_target() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:127:1
   |
LL | fn method_argument_but_not_target() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:127:1
   |
LL | fn method_argument_but_not_target() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:128:5
   |
LL |     struct MyStruct;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:129:5
   |
LL |     impl MyStruct {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:130:9
   |
LL |         fn my_method(&self, _argument: &[usize]) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:130:9
   |
LL |         fn my_method(&self, _argument: &[usize]) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:130:23
   |
LL |         fn my_method(&self, _argument: &[usize]) {}
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:130:29
   |
LL |         fn my_method(&self, _argument: &[usize]) {}
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:130:22
   |
LL |         fn my_method(&self, _argument: &[usize]) {}
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:130:40
   |
LL |         fn my_method(&self, _argument: &[usize]) {}
   |                                        ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:132:9
   |
LL |     let my_struct = MyStruct;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:136:25
   |
LL |     my_struct.my_method(&x);
   |                         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:139:1
   |
LL | fn insert_is_not_a_read() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:139:1
   |
LL | fn insert_is_not_a_read() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:139:1
   |
LL | fn insert_is_not_a_read() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:146:1
   |
LL | fn insert_is_a_read() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:146:1
   |
LL | fn insert_is_a_read() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:146:1
   |
LL | fn insert_is_a_read() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:153:1
   |
LL | fn not_read_if_return_value_not_used() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:153:1
   |
LL | fn not_read_if_return_value_not_used() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:153:1
   |
LL | fn not_read_if_return_value_not_used() {
   | ^

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:156:9
   |
LL |     let x = vec![1, 2, 3];
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:162:1
   |
LL | fn extension_traits() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:162:1
   |
LL | fn extension_traits() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:162:1
   |
LL | fn extension_traits() {
   | ^

error: trait must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:163:5
   |
LL | /     trait VecExt<T> {
LL | |         fn method_with_side_effect(&self);
LL | |         fn method_without_side_effect(&self);
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:163:5
   |
LL |     trait VecExt<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:164:9
   |
LL |         fn method_with_side_effect(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:164:9
   |
LL |         fn method_with_side_effect(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:164:37
   |
LL |         fn method_with_side_effect(&self);
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:164:36
   |
LL |         fn method_with_side_effect(&self);
   |                                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:165:9
   |
LL |         fn method_without_side_effect(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:165:9
   |
LL |         fn method_without_side_effect(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:165:40
   |
LL |         fn method_without_side_effect(&self);
   |                                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:165:39
   |
LL |         fn method_without_side_effect(&self);
   |                                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:168:5
   |
LL |     impl<T> VecExt<T> for Vec<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:169:9
   |
LL |         fn method_with_side_effect(&self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:169:9
   |
LL |         fn method_with_side_effect(&self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:169:37
   |
LL |         fn method_with_side_effect(&self) {
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:169:36
   |
LL |         fn method_with_side_effect(&self) {
   |                                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:172:9
   |
LL |         fn method_without_side_effect(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:172:9
   |
LL |         fn method_without_side_effect(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:172:40
   |
LL |         fn method_without_side_effect(&self) {}
   |                                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:172:39
   |
LL |         fn method_without_side_effect(&self) {}
   |                                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:175:9
   |
LL |     let x = vec![1, 2, 3]; // Ok
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:178:9
   |
LL |     let y = vec![1, 2, 3]; // Ok (false negative)
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:182:1
   |
LL | fn function_argument() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:182:1
   |
LL | fn function_argument() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:182:1
   |
LL | fn function_argument() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:184:5
   |
LL |     fn foo<T>(v: &Vec<T>) -> usize {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:184:5
   |
LL |     fn foo<T>(v: &Vec<T>) -> usize {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:184:5
   |
LL |     fn foo<T>(v: &Vec<T>) -> usize {
   |     ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:184:15
   |
LL |     fn foo<T>(v: &Vec<T>) -> usize {
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:184:18
   |
LL |     fn foo<T>(v: &Vec<T>) -> usize {
   |                  ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/collection_is_never_read.rs:188:9
   |
LL |     let x = vec![1, 2, 3]; // Ok
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:189:9
   |
LL |     foo(&x);
   |         ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:192:1
   |
LL | fn supported_types() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:192:1
   |
LL | fn supported_types() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:192:1
   |
LL | fn supported_types() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:245:1
   |
LL | fn issue11783() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:245:1
   |
LL | fn issue11783() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:245:1
   |
LL | fn issue11783() {
   | ^

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:246:5
   |
LL |     struct Sender;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/collection_is_never_read.rs:247:5
   |
LL |     impl Sender {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/collection_is_never_read.rs:248:9
   |
LL |         fn send(&self, msg: String) -> Result<(), ()> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/collection_is_never_read.rs:248:9
   |
LL |         fn send(&self, msg: String) -> Result<(), ()> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:248:18
   |
LL |         fn send(&self, msg: String) -> Result<(), ()> {
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/collection_is_never_read.rs:248:24
   |
LL |         fn send(&self, msg: String) -> Result<(), ()> {
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/collection_is_never_read.rs:248:17
   |
LL |         fn send(&self, msg: String) -> Result<(), ()> {
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 97 previous errors

