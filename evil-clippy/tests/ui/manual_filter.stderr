error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_filter.rs:4:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_filter.rs:4:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_filter.rs:4:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/manual_filter.rs:53:9
   |
LL |     let y = Some(4);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/manual_filter.rs:81:14
   |
LL |         Some(ref x) => {
   |              ^^^^^
   |
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/manual_filter.rs:82:20
   |
LL |             if x > &0 {
   |                    ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/manual_filter.rs:91:9
   |
LL |     let external_cond = true;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_filter.rs:111:11
   |
LL |     match &Some(8) {
   |           ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_filter.rs:135:5
   |
LL |     const fn f1() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_filter.rs:135:11
   |
LL |     const fn f1() {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_filter.rs:135:11
   |
LL |     const fn f1() {
   |           ^

error: item must be `pub`
  --> tests/ui/manual_filter.rs:192:5
   |
LL |     unsafe fn f(x: u32) -> bool {
   |     ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/manual_filter.rs:192:17
   |
LL |     unsafe fn f(x: u32) -> bool {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_filter.rs:235:5
   |
LL |     struct NamedTuple {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/manual_filter.rs:268:9
   |
LL |     let result = if let Some(a) = maybe_some() {
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_filter.rs:278:9
   |
LL |     let allowed_integers = vec![3, 4, 5, 6];
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_filter.rs:282:42
   |
LL |             if allowed_integers.contains(&x) {
   |                                          ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_filter.rs:293:1
   |
LL | fn maybe_some() -> Option<u32> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_filter.rs:293:1
   |
LL | fn maybe_some() -> Option<u32> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_filter.rs:293:1
   |
LL | fn maybe_some() -> Option<u32> {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 21 previous errors

