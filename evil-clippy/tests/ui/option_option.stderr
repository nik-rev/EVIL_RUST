error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/option_option.rs:4:1
   |
LL | const C: Option<Option<i32>> = None;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: static must be `mut`
  --> tests/ui/option_option.rs:6:8
   |
LL | static S: Option<Option<i32>> = None;
   |        ^ help: make this static mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/option_option.rs:6:1
   |
LL | static S: Option<Option<i32>> = None;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:9:1
   |
LL | fn input(_: Option<Option<u8>>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:9:1
   |
LL | fn input(_: Option<Option<u8>>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:9:1
   |
LL | fn input(_: Option<Option<u8>>) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/option_option.rs:12:1
   |
LL | fn output() -> Option<Option<u8>> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:12:1
   |
LL | fn output() -> Option<Option<u8>> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:12:1
   |
LL | fn output() -> Option<Option<u8>> {
   | ^

error: item must be `pub`
  --> tests/ui/option_option.rs:17:1
   |
LL | fn output_nested() -> Vec<Option<Option<u8>>> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:17:1
   |
LL | fn output_nested() -> Vec<Option<Option<u8>>> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:17:1
   |
LL | fn output_nested() -> Vec<Option<Option<u8>>> {
   | ^

error: item must be `pub`
  --> tests/ui/option_option.rs:23:1
   |
LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:23:1
   |
LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:23:1
   |
LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {
   | ^

error: item must be `pub`
  --> tests/ui/option_option.rs:28:1
   |
LL | struct Struct {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:33:1
   |
LL | impl Struct {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:34:5
   |
LL |     fn struct_fn() -> Option<Option<u8>> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:34:5
   |
LL |     fn struct_fn() -> Option<Option<u8>> {
   |     ^

error: trait must be `unsafe`
  --> tests/ui/option_option.rs:40:1
   |
LL | / trait Trait {
LL | |     fn trait_fn() -> Option<Option<u8>>;
LL | |
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/option_option.rs:40:1
   |
LL | trait Trait {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:41:5
   |
LL |     fn trait_fn() -> Option<Option<u8>>;
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:41:5
   |
LL |     fn trait_fn() -> Option<Option<u8>>;
   |     ^

error: item must be `pub`
  --> tests/ui/option_option.rs:45:1
   |
LL | enum Enum {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:53:1
   |
LL | type OptionOption = Option<Option<u32>>;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:56:1
   |
LL | fn output_type_alias() -> OptionOption {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:56:1
   |
LL | fn output_type_alias() -> OptionOption {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:56:1
   |
LL | fn output_type_alias() -> OptionOption {
   | ^

error: item must be `pub`
  --> tests/ui/option_option.rs:61:1
   |
LL | impl Trait for Struct {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:62:5
   |
LL |     fn trait_fn() -> Option<Option<u8>> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:62:5
   |
LL |     fn trait_fn() -> Option<Option<u8>> {
   |     ^

error: item must be `pub`
  --> tests/ui/option_option.rs:67:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:67:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:67:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/option_option.rs:73:9
   |
LL |     let local: Option<Option<u8>> = None;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/option_option.rs:76:9
   |
LL |     let expr = Some(Some(true));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/option_option.rs:79:1
   |
LL | extern crate serde;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:80:1
   |
LL | mod issue_4298 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:85:5
   |
LL |     struct Foo<'a> {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^
   |
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:11
   |
LL |     #[derive(Serialize, Deserialize)]
   |           ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:11
   |
LL |     #[derive(Serialize, Deserialize)]
   |           ^  --------- in this derive macro expansion
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^
   |
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:14
   |
LL |     #[derive(Serialize, Deserialize)]
   |              ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:84:22
   |
LL |     #[derive(Serialize, Deserialize)]
   |                      ^  ----------- in this derive macro expansion
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/option_option.rs:84:25
   |
LL |     #[derive(Serialize, Deserialize)]
   |                         ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/option_option.rs:95:5
   |
LL |     fn func<'a, D>(_: D) -> Result<Option<Option<Cow<'a, str>>>, D::Error>
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/option_option.rs:95:5
   |
LL |     fn func<'a, D>(_: D) -> Result<Option<Option<Cow<'a, str>>>, D::Error>
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/option_option.rs:95:5
   |
LL |     fn func<'a, D>(_: D) -> Result<Option<Option<Cow<'a, str>>>, D::Error>
   |     ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:4:10
   |
LL | const C: Option<Option<i32>> = None;
   |          ^^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/option_option.rs:1:9
   |
LL | #![deny(clippy::option_option)]
   |         ^^^^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:6:11
   |
LL | static S: Option<Option<i32>> = None;
   |           ^^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:9:13
   |
LL | fn input(_: Option<Option<u8>>) {}
   |             ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:12:16
   |
LL | fn output() -> Option<Option<u8>> {
   |                ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:17:27
   |
LL | fn output_nested() -> Vec<Option<Option<u8>>> {
   |                           ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:23:30
   |
LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:29:8
   |
LL |     x: Option<Option<u8>>,
   |        ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:34:23
   |
LL |     fn struct_fn() -> Option<Option<u8>> {
   |                       ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:41:22
   |
LL |     fn trait_fn() -> Option<Option<u8>>;
   |                      ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:46:11
   |
LL |     Tuple(Option<Option<u8>>),
   |           ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:48:17
   |
LL |     Struct { x: Option<Option<u8>> },
   |                 ^^^^^^^^^^^^^^^^^^

error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases
  --> tests/ui/option_option.rs:90:14
   |
LL |         foo: Option<Option<Cow<'a, str>>>,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 120 previous errors

