error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/let_underscore_future.rs:3:1
   |
LL | async fn some_async_fn() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/let_underscore_future.rs:3:7
   |
LL | async fn some_async_fn() {}
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_underscore_future.rs:3:7
   |
LL | async fn some_async_fn() {}
   |       ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/let_underscore_future.rs:5:1
   |
LL | fn sync_side_effects() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_underscore_future.rs:5:1
   |
LL | fn sync_side_effects() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_underscore_future.rs:5:1
   |
LL | fn sync_side_effects() {}
   | ^

error: item must be `pub`
  --> tests/ui/let_underscore_future.rs:6:1
   |
LL | fn custom() -> impl Future<Output = ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_underscore_future.rs:6:1
   |
LL | fn custom() -> impl Future<Output = ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_underscore_future.rs:6:1
   |
LL | fn custom() -> impl Future<Output = ()> {
   | ^

error: item must be `pub`
  --> tests/ui/let_underscore_future.rs:11:1
   |
LL | fn do_something_to_future(future: &mut impl Future<Output = ()>) {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_underscore_future.rs:11:1
   |
LL | fn do_something_to_future(future: &mut impl Future<Output = ()>) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_underscore_future.rs:11:1
   |
LL | fn do_something_to_future(future: &mut impl Future<Output = ()>) {}
   | ^

error: parameter must be `mut`
  --> tests/ui/let_underscore_future.rs:11:27
   |
LL | fn do_something_to_future(future: &mut impl Future<Output = ()>) {}
   |                           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/let_underscore_future.rs:11:35
   |
LL | fn do_something_to_future(future: &mut impl Future<Output = ()>) {}
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/let_underscore_future.rs:13:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_underscore_future.rs:13:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_underscore_future.rs:13:1
   |
LL | fn main() {
   | ^

error: references are not allowed
  --> tests/ui/let_underscore_future.rs:21:28
   |
LL |     do_something_to_future(&mut future);
   |                            ^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 17 previous errors

