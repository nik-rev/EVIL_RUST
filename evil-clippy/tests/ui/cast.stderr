error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/cast.rs:22:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:22:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:22:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/cast.rs:24:9
   |
LL |     let x0 = 1i32;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:28:9
   |
LL |     let x1 = 1i64;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:35:9
   |
LL |     let x2 = 1u32;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:39:9
   |
LL |     let x3 = 1u64;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:76:13
   |
LL |         let _x: i8 = 1i32 as _;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:231:9
   |
LL |     let x: i64 = 5;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:234:9
   |
LL |     let s = x.signum();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:248:13
   |
LL |         let x = 999999u64;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:257:5
   |
LL |     enum E1 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:256:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:256:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:256:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:256:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:256:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/cast.rs:256:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:262:5
   |
LL |     impl E1 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:263:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:263:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:263:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:270:5
   |
LL |     enum E2 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:269:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:269:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:269:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:269:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:269:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:269:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:274:5
   |
LL |     impl E2 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:275:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:275:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:275:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:290:5
   |
LL |     enum E3 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:289:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:289:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:289:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:289:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:289:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:289:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:295:5
   |
LL |     impl E3 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:296:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:296:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:296:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:303:5
   |
LL |     enum E4 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:302:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:302:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:302:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:302:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:302:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:302:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:307:5
   |
LL |     impl E4 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:308:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:308:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:308:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:315:5
   |
LL |     enum E5 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:314:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:314:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:314:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:314:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:314:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:314:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:319:5
   |
LL |     impl E5 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:320:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:320:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:320:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:336:5
   |
LL |     enum E6 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:334:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:334:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:334:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:334:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:334:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:334:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:340:5
   |
LL |     impl E6 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:341:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:341:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:341:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:356:5
   |
LL |     enum E7 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:354:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:354:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:354:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:354:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:354:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:354:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:360:5
   |
LL |     impl E7 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:361:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:361:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:361:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:374:5
   |
LL |     enum E8 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:372:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:372:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:372:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:372:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:372:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:372:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:380:5
   |
LL |     impl E8 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:381:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:381:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:381:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:389:5
   |
LL |     enum E9 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:387:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:387:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:387:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:387:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:387:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:387:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:393:5
   |
LL |     impl E9 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:394:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:394:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:394:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:404:5
   |
LL |     enum E10 {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:402:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/cast.rs:402:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:402:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/cast.rs:402:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cast.rs:402:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cast.rs:402:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/cast.rs:408:5
   |
LL |     impl E10 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:409:9
   |
LL |         fn test(self) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:409:9
   |
LL |         fn test(self) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:409:17
   |
LL |         fn test(self) {
   |                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:421:1
   |
LL | fn avoid_subtract_overflow(q: u32) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:421:1
   |
LL | fn avoid_subtract_overflow(q: u32) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:421:1
   |
LL | fn avoid_subtract_overflow(q: u32) {
   | ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:421:28
   |
LL | fn avoid_subtract_overflow(q: u32) {
   |                            ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:422:9
   |
LL |     let c = (q >> 16) as u8;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:427:9
   |
LL |     let c = (q / 1000) as u8;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:433:1
   |
LL | fn issue11426() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:433:1
   |
LL | fn issue11426() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:433:1
   |
LL | fn issue11426() {
   | ^

error: references are not allowed
  --> tests/ui/cast.rs:434:6
   |
LL |     (&42u8 >> 0xa9008fb6c9d81e42_0e25730562a601c8_u128) as usize;
   |      ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/cast.rs:437:1
   |
LL | fn issue11642() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:437:1
   |
LL | fn issue11642() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:437:1
   |
LL | fn issue11642() {
   | ^

error: item must be `pub`
  --> tests/ui/cast.rs:438:5
   |
LL |     fn square(x: i16) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:438:5
   |
LL |     fn square(x: i16) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:438:5
   |
LL |     fn square(x: i16) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:438:15
   |
LL |     fn square(x: i16) -> u32 {
   |               ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:439:13
   |
LL |         let x = x as i32;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:446:9
   |
LL |     let _a = |x: i32| -> u32 { (x * x * x * x) as u32 };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:466:9
   |
LL |     let x: i32 = 10;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:472:9
   |
LL |     let y: i16 = -2;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cast.rs:491:9
   |
LL |     let z: i16 = 2;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:498:5
   |
LL |     fn foo(a: i32, b: i32, c: i32) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:498:5
   |
LL |     fn foo(a: i32, b: i32, c: i32) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:498:5
   |
LL |     fn foo(a: i32, b: i32, c: i32) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/cast.rs:498:12
   |
LL |     fn foo(a: i32, b: i32, c: i32) -> u32 {
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/cast.rs:498:20
   |
LL |     fn foo(a: i32, b: i32, c: i32) -> u32 {
   |                    ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/cast.rs:498:28
   |
LL |     fn foo(a: i32, b: i32, c: i32) -> u32 {
   |                            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:531:1
   |
LL | fn issue11738() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:531:1
   |
LL | fn issue11738() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:531:1
   |
LL | fn issue11738() {
   | ^

error: item must be `pub`
  --> tests/ui/cast.rs:532:5
   |
LL |     macro_rules! m {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cast.rs:549:1
   |
LL | fn issue12506() -> usize {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:549:1
   |
LL | fn issue12506() -> usize {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:549:1
   |
LL | fn issue12506() -> usize {
   | ^

error: variable must be `mut`
  --> tests/ui/cast.rs:550:9
   |
LL |     let bar: Result<Option<i64>, u32> = Ok(Some(10));
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cast.rs:556:1
   |
LL | fn issue12721() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:556:1
   |
LL | fn issue12721() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:556:1
   |
LL | fn issue12721() {
   | ^

error: item must be `pub`
  --> tests/ui/cast.rs:557:5
   |
LL |     fn x() -> u64 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cast.rs:557:5
   |
LL |     fn x() -> u64 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cast.rs:557:5
   |
LL |     fn x() -> u64 {
   |     ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 137 previous errors

