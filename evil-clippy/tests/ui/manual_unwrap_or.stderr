error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:9:1
   |
LL | fn option_unwrap_or() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:9:1
   |
LL | fn option_unwrap_or() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:9:1
   |
LL | fn option_unwrap_or() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:74:5
   |
LL |     struct NonCopyable;
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/manual_unwrap_or.rs:86:9
   |
LL |     let option: Option<&str> = None;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:86:24
   |
LL |     let option: Option<&str> = None;
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:89:17
   |
LL |         None => &format!("{} {}!", "hello", "world"),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:124:1
   |
LL | fn result_unwrap_or() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:124:1
   |
LL | fn result_unwrap_or() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:124:1
   |
LL | fn result_unwrap_or() {
   | ^

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:126:21
   |
LL |     match Ok::<i32, &str>(1) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/manual_unwrap_or.rs:133:9
   |
LL |     let a = Ok::<i32, &str>(1);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:133:23
   |
LL |     let a = Ok::<i32, &str>(1);
   |                       ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:141:32
   |
LL |     match Ok(1) as Result<i32, &str> {
   |                                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:148:5
   |
LL |     struct S;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:149:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:150:9
   |
LL |         fn method(self) -> Option<i32> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:150:9
   |
LL |         fn method(self) -> Option<i32> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:150:19
   |
LL |         fn method(self) -> Option<i32> {
   |                   ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/manual_unwrap_or.rs:154:9
   |
LL |     let s = S {};
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:162:21
   |
LL |     match Ok::<i32, &str>(1) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:169:21
   |
LL |     match Ok::<i32, &str>(1) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:177:21
   |
LL |     match Ok::<i32, &str>(1) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:188:16
   |
LL |     match Ok::<&str, &str>("Bob") {
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:188:22
   |
LL |     match Ok::<&str, &str>("Bob") {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:195:21
   |
LL |     match Ok::<i32, &str>(1) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:199:21
   |
LL |     match Ok::<i32, &str>(1) {
   |                     ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:204:25
   |
LL |         match Ok::<i32, &str>(j) {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:208:25
   |
LL |         match Ok::<i32, &str>(j) {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:215:16
   |
LL |     match Ok::<&str, &str>("Alice") {
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:215:22
   |
LL |     match Ok::<&str, &str>("Alice") {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:219:16
   |
LL |     match Ok::<&str, &str>("Alice") {
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:219:22
   |
LL |     match Ok::<&str, &str>("Alice") {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:258:1
   |
LL | const fn const_fn_option_unwrap_or() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:258:7
   |
LL | const fn const_fn_option_unwrap_or() {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:258:7
   |
LL | const fn const_fn_option_unwrap_or() {
   |       ^

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:265:1
   |
LL | const fn const_fn_result_unwrap_or() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:265:7
   |
LL | const fn const_fn_result_unwrap_or() {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:265:7
   |
LL | const fn const_fn_result_unwrap_or() {
   |       ^

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:266:16
   |
LL |     match Ok::<&str, &str>("Alice") {
   |                ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:266:22
   |
LL |     match Ok::<&str, &str>("Alice") {
   |                      ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:272:1
   |
LL | mod issue6965 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:273:5
   |
LL |     macro_rules! some_macro {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:279:5
   |
LL |     fn test() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:279:5
   |
LL |     fn test() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:279:5
   |
LL |     fn test() {
   |     ^

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:289:1
   |
LL | fn format_name(name: Option<&Rc<str>>) -> &str {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:289:1
   |
LL | fn format_name(name: Option<&Rc<str>>) -> &str {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:289:1
   |
LL | fn format_name(name: Option<&Rc<str>>) -> &str {
   | ^

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:289:16
   |
LL | fn format_name(name: Option<&Rc<str>>) -> &str {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:289:29
   |
LL | fn format_name(name: Option<&Rc<str>>) -> &str {
   |                             ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:289:43
   |
LL | fn format_name(name: Option<&Rc<str>>) -> &str {
   |                                           ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:296:1
   |
LL | fn implicit_deref_ref() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:296:1
   |
LL | fn implicit_deref_ref() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:296:1
   |
LL | fn implicit_deref_ref() {
   | ^

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:297:12
   |
LL |     let _: &str = match Some(&"bye") {
   |            ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:297:30
   |
LL |     let _: &str = match Some(&"bye") {
   |                              ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:303:1
   |
LL | mod issue_13018 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:306:5
   |
LL |     type RefName = i32;
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:307:9
   |
LL |     pub fn get(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:307:9
   |
LL |     pub fn get(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:307:16
   |
LL |     pub fn get(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:307:54
   |
LL |     pub fn get(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                                                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:307:23
   |
LL |     pub fn get(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:307:68
   |
LL |     pub fn get(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                                                                    ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:308:40
   |
LL |         if let Some(names) = index.get(&id) { names } else { &[] }
   |                                        ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:308:62
   |
LL |         if let Some(names) = index.get(&id) { names } else { &[] }
   |                                                              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:311:9
   |
LL |     pub fn get_match(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:311:9
   |
LL |     pub fn get_match(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |         ^

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:311:22
   |
LL |     pub fn get_match(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                      ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:311:60
   |
LL |     pub fn get_match(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                                                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:311:29
   |
LL |     pub fn get_match(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:311:74
   |
LL |     pub fn get_match(index: &HashMap<usize, Vec<RefName>>, id: usize) -> &[RefName] {
   |                                                                          ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:312:25
   |
LL |         match index.get(&id) {
   |                         ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/manual_unwrap_or.rs:314:21
   |
LL |             None => &[],
   |                     ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:319:1
   |
LL | fn implicit_deref(v: Vec<String>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:319:1
   |
LL | fn implicit_deref(v: Vec<String>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:319:1
   |
LL | fn implicit_deref(v: Vec<String>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/manual_unwrap_or.rs:319:19
   |
LL | fn implicit_deref(v: Vec<String>) {
   |                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:323:1
   |
LL | fn allowed_manual_unwrap_or_zero() -> u32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:323:1
   |
LL | fn allowed_manual_unwrap_or_zero() -> u32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:323:1
   |
LL | fn allowed_manual_unwrap_or_zero() -> u32 {
   | ^

error: item must be `pub`
  --> tests/ui/manual_unwrap_or.rs:332:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/manual_unwrap_or.rs:332:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/manual_unwrap_or.rs:332:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 76 previous errors

