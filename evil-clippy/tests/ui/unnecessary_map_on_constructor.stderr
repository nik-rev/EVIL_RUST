error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:6:1
   |
LL | fn fun(t: i32) -> i32 {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:6:1
   |
LL | fn fun(t: i32) -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:6:1
   |
LL | fn fun(t: i32) -> i32 {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:6:8
   |
LL | fn fun(t: i32) -> i32 {
   |        ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:10:1
   |
LL | fn notfun(e: SimpleError) -> SimpleError {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:10:1
   |
LL | fn notfun(e: SimpleError) -> SimpleError {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:10:1
   |
LL | fn notfun(e: SimpleError) -> SimpleError {
   | ^

error: parameter must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:10:11
   |
LL | fn notfun(e: SimpleError) -> SimpleError {
   |           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:13:1
   |
LL | macro_rules! expands_to_fun {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:20:1
   |
LL | struct SimpleError {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:19:10
   |
LL | #[derive(Copy, Clone)]
   |          ^

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:19:16
   |
LL | #[derive(Copy, Clone)]
   |                ^

error: function must be `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:19:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:19:13
   |
LL | #[derive(Copy, Clone)]
   |             ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:19:16
   |
LL | #[derive(Copy, Clone)]
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/unnecessary_map_on_constructor.rs:19:16
   |
LL | #[derive(Copy, Clone)]
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:22:1
   |
LL | type SimpleResult = std::result::Result<i32, SimpleError>;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/unnecessary_map_on_constructor.rs:24:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:24:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_map_on_constructor.rs:24:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:25:9
   |
LL |     let x: i32 = 4;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:27:9
   |
LL |     let err = SimpleError {};
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:28:9
   |
LL |     let a = Some(x);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:29:9
   |
LL |     let b: SimpleResult = Ok(x);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:30:9
   |
LL |     let c: SimpleResult = Err(err);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:32:9
   |
LL |     let a = Some(x).map(fun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:34:9
   |
LL |     let b: SimpleResult = Ok(x).map(fun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:36:9
   |
LL |     let c: SimpleResult = Err(err).map_err(notfun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:39:9
   |
LL |     let a = Option::Some(x).map(fun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:41:9
   |
LL |     let b: SimpleResult = SimpleResult::Ok(x).map(fun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:43:9
   |
LL |     let c: SimpleResult = SimpleResult::Err(err).map_err(notfun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:45:9
   |
LL |     let b: std::result::Result<i32, SimpleError> = Ok(x).map(fun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:47:9
   |
LL |     let c: std::result::Result<i32, SimpleError> = Err(err).map_err(notfun);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:50:9
   |
LL |     let a = Some(fun(x));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:51:9
   |
LL |     let b: SimpleResult = Ok(fun(x));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_map_on_constructor.rs:52:9
   |
LL |     let c: SimpleResult = Err(notfun(err));
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 36 previous errors

