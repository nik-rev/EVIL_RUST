error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:11:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:11:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:11:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:12:5
   |
LL |     const Z: u32 = 0;
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:13:9
   |
LL |     let u: u32 = 42;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:50:9
   |
LL |     let i: i8 = 0;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:60:9
   |
LL |     let b = false;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:77:10
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |          ^

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:77:10
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |          ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:77:7
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |       ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:77:7
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |       ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:77:10
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:77:10
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |          ^

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:77:10
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:77:10
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |          ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:77:21
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                     ^

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:77:18
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                  ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:77:18
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                  ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:77:21
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:77:21
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                     ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:77:25
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ^

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:77:22
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                      ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:77:22
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                      ^  ---------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:77:25
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:77:25
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ^

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:77:25
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:77:25
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:78:14
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ---------- in this derive macro expansion
LL | pub struct U(u64);
   |              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:78:14
   |
LL | #[derive(PartialEq, Eq, PartialOrd)]
   |                         ---------- in this derive macro expansion
LL | pub struct U(u64);
   |              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:80:1
   |
LL | impl PartialEq<u32> for U {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:81:5
   |
LL |     fn eq(&self, other: &u32) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:81:5
   |
LL |     fn eq(&self, other: &u32) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:81:12
   |
LL |     fn eq(&self, other: &u32) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:81:18
   |
LL |     fn eq(&self, other: &u32) -> bool {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:81:11
   |
LL |     fn eq(&self, other: &u32) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:81:25
   |
LL |     fn eq(&self, other: &u32) -> bool {
   |                         ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:82:17
   |
LL |         self.eq(&U(u64::from(*other)))
   |                 ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/absurd-extreme-comparisons.rs:85:1
   |
LL | impl PartialOrd<u32> for U {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:86:5
   |
LL |     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:86:5
   |
LL |     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:86:21
   |
LL |     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:86:27
   |
LL |     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:86:20
   |
LL |     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {
   |                    ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:86:34
   |
LL |     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {
   |                                  ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/absurd-extreme-comparisons.rs:87:26
   |
LL |         self.partial_cmp(&U(u64::from(*other)))
   |                          ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:91:5
   |
LL | pub fn foo(val: U) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:91:5
   |
LL | pub fn foo(val: U) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:91:12
   |
LL | pub fn foo(val: U) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:95:5
   |
LL | pub fn bar(len: u64) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/absurd-extreme-comparisons.rs:95:5
   |
LL | pub fn bar(len: u64) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/absurd-extreme-comparisons.rs:95:12
   |
LL | pub fn bar(len: u64) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 47 previous errors

