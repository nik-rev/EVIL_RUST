error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:4:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:4:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:4:1
   |
LL | fn main() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:7:1
   |
LL | struct Foo;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:6:10
   |
LL | #[derive(Clone, Copy)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:6:7
   |
LL | #[derive(Clone, Copy)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:6:7
   |
LL | #[derive(Clone, Copy)]
   |       ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:6:10
   |
LL | #[derive(Clone, Copy)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:6:10
   |
LL | #[derive(Clone, Copy)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:6:17
   |
LL | #[derive(Clone, Copy)]
   |                 ^

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:9:1
   |
LL | impl Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:10:5
   |
LL |     fn as_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:10:5
   |
LL |     fn as_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:10:15
   |
LL |     fn as_i32(self) {}
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:11:5
   |
LL |     fn as_u32(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:11:5
   |
LL |     fn as_u32(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:11:16
   |
LL |     fn as_u32(&self) {}
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:11:15
   |
LL |     fn as_u32(&self) {}
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:12:5
   |
LL |     fn into_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:12:5
   |
LL |     fn into_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:12:17
   |
LL |     fn into_i32(self) {}
   |                 ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:13:5
   |
LL |     fn is_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:13:5
   |
LL |     fn is_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:13:15
   |
LL |     fn is_i32(self) {}
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:14:5
   |
LL |     fn is_u32(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:14:5
   |
LL |     fn is_u32(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:14:16
   |
LL |     fn is_u32(&self) {}
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:14:15
   |
LL |     fn is_u32(&self) {}
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:15:5
   |
LL |     fn to_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:15:5
   |
LL |     fn to_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:15:15
   |
LL |     fn to_i32(self) {}
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:16:5
   |
LL |     fn from_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:16:5
   |
LL |     fn from_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:16:17
   |
LL |     fn from_i32(self) {}
   |                 ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:19:9
   |
LL |     pub fn as_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:19:9
   |
LL |     pub fn as_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:19:19
   |
LL |     pub fn as_i64(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:20:9
   |
LL |     pub fn into_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:20:9
   |
LL |     pub fn into_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:20:21
   |
LL |     pub fn into_i64(self) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:21:9
   |
LL |     pub fn is_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:21:9
   |
LL |     pub fn is_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:21:19
   |
LL |     pub fn is_i64(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:22:9
   |
LL |     pub fn to_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:22:9
   |
LL |     pub fn to_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:22:19
   |
LL |     pub fn to_i64(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:23:9
   |
LL |     pub fn from_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:23:9
   |
LL |     pub fn from_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:23:21
   |
LL |     pub fn from_i64(self) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:28:9
   |
LL |     pub fn from_cake(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:28:9
   |
LL |     pub fn from_cake(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:28:22
   |
LL |     pub fn from_cake(self) {}
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:30:5
   |
LL |     fn as_x<F: AsRef<Self>>(_: F) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:30:5
   |
LL |     fn as_x<F: AsRef<Self>>(_: F) {}
   |     ^

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:31:5
   |
LL |     fn as_y<F: AsRef<Foo>>(_: F) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:31:5
   |
LL |     fn as_y<F: AsRef<Foo>>(_: F) {}
   |     ^

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:34:1
   |
LL | struct Bar;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:36:1
   |
LL | impl Bar {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:37:5
   |
LL |     fn as_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:37:5
   |
LL |     fn as_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:37:15
   |
LL |     fn as_i32(self) {}
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:40:5
   |
LL |     fn as_u32(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:40:5
   |
LL |     fn as_u32(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:40:16
   |
LL |     fn as_u32(&self) {}
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:40:15
   |
LL |     fn as_u32(&self) {}
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:41:5
   |
LL |     fn into_i32(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:41:5
   |
LL |     fn into_i32(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:41:18
   |
LL |     fn into_i32(&self) {}
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:41:17
   |
LL |     fn into_i32(&self) {}
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:44:5
   |
LL |     fn into_u32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:44:5
   |
LL |     fn into_u32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:44:17
   |
LL |     fn into_u32(self) {}
   |                 ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:45:5
   |
LL |     fn is_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:45:5
   |
LL |     fn is_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:45:15
   |
LL |     fn is_i32(self) {}
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:48:5
   |
LL |     fn is_u32(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:48:5
   |
LL |     fn is_u32(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:48:16
   |
LL |     fn is_u32(&self) {}
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:48:15
   |
LL |     fn is_u32(&self) {}
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:49:5
   |
LL |     fn to_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:49:5
   |
LL |     fn to_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:49:15
   |
LL |     fn to_i32(self) {}
   |               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:52:5
   |
LL |     fn to_u32(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:52:5
   |
LL |     fn to_u32(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:52:16
   |
LL |     fn to_u32(&self) {}
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:52:15
   |
LL |     fn to_u32(&self) {}
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:53:5
   |
LL |     fn from_i32(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:53:5
   |
LL |     fn from_i32(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:53:17
   |
LL |     fn from_i32(self) {}
   |                 ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:56:9
   |
LL |     pub fn as_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:56:9
   |
LL |     pub fn as_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:56:19
   |
LL |     pub fn as_i64(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:59:9
   |
LL |     pub fn into_i64(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:59:9
   |
LL |     pub fn into_i64(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:59:22
   |
LL |     pub fn into_i64(&self) {}
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:59:21
   |
LL |     pub fn into_i64(&self) {}
   |                     ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:62:9
   |
LL |     pub fn is_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:62:9
   |
LL |     pub fn is_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:62:19
   |
LL |     pub fn is_i64(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:65:9
   |
LL |     pub fn to_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:65:9
   |
LL |     pub fn to_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:65:19
   |
LL |     pub fn to_i64(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:68:9
   |
LL |     pub fn from_i64(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:68:9
   |
LL |     pub fn from_i64(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:68:21
   |
LL |     pub fn from_i64(self) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:72:5
   |
LL |     fn as_(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:72:5
   |
LL |     fn as_(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:72:12
   |
LL |     fn as_(self) {}
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:73:5
   |
LL |     fn into_(&self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:73:5
   |
LL |     fn into_(&self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:73:15
   |
LL |     fn into_(&self) {}
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:73:14
   |
LL |     fn into_(&self) {}
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:74:5
   |
LL |     fn is_(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:74:5
   |
LL |     fn is_(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:74:12
   |
LL |     fn is_(self) {}
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:75:5
   |
LL |     fn to_(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:75:5
   |
LL |     fn to_(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:75:12
   |
LL |     fn to_(self) {}
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:76:5
   |
LL |     fn from_(self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:76:5
   |
LL |     fn from_(self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:76:14
   |
LL |     fn from_(self) {}
   |              ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:77:5
   |
LL |     fn to_mut(&mut self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:77:5
   |
LL |     fn to_mut(&mut self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:77:20
   |
LL |     fn to_mut(&mut self) {}
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:77:15
   |
LL |     fn to_mut(&mut self) {}
   |               ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:82:1
   |
LL | mod issue4293 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:86:5
   |
LL |     struct T;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:88:5
   |
LL |     impl T {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:89:9
   |
LL |         fn into_s1(self: Box<Self>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:89:9
   |
LL |         fn into_s1(self: Box<Self>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:89:20
   |
LL |         fn into_s1(self: Box<Self>) {}
   |                    ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:90:9
   |
LL |         fn into_s2(self: Rc<Self>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:90:9
   |
LL |         fn into_s2(self: Rc<Self>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:90:20
   |
LL |         fn into_s2(self: Rc<Self>) {}
   |                    ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:91:9
   |
LL |         fn into_s3(self: Arc<Self>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:91:9
   |
LL |         fn into_s3(self: Arc<Self>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:91:20
   |
LL |         fn into_s3(self: Arc<Self>) {}
   |                    ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:93:9
   |
LL |         fn into_t1(self: Box<T>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:93:9
   |
LL |         fn into_t1(self: Box<T>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:93:20
   |
LL |         fn into_t1(self: Box<T>) {}
   |                    ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:94:9
   |
LL |         fn into_t2(self: Rc<T>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:94:9
   |
LL |         fn into_t2(self: Rc<T>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:94:20
   |
LL |         fn into_t2(self: Rc<T>) {}
   |                    ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:95:9
   |
LL |         fn into_t3(self: Arc<T>) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:95:9
   |
LL |         fn into_t3(self: Arc<T>) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:95:20
   |
LL |         fn into_t3(self: Arc<T>) {}
   |                    ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:100:1
   |
LL | mod issue4037 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:104:5
   |
LL |     impl Foo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:105:19
   |
LL |         pub async fn into_bar(self) -> Bar {
   |                   ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:105:19
   |
LL |         pub async fn into_bar(self) -> Bar {
   |                   ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:105:31
   |
LL |         pub async fn into_bar(self) -> Bar {
   |                               ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:112:1
   |
LL | mod issue6307 {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:113:5
   |
LL | /     trait T: Sized {
LL | |         fn as_i32(self) {}
...  |
LL | |         fn to_mut(&mut self) {}
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:113:5
   |
LL |     trait T: Sized {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:114:9
   |
LL |         fn as_i32(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:114:9
   |
LL |         fn as_i32(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:114:19
   |
LL |         fn as_i32(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:117:9
   |
LL |         fn as_u32(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:117:9
   |
LL |         fn as_u32(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:117:20
   |
LL |         fn as_u32(&self) {}
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:117:19
   |
LL |         fn as_u32(&self) {}
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:118:9
   |
LL |         fn into_i32(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:118:9
   |
LL |         fn into_i32(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:118:21
   |
LL |         fn into_i32(self) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:119:9
   |
LL |         fn into_i32_ref(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:119:9
   |
LL |         fn into_i32_ref(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:119:26
   |
LL |         fn into_i32_ref(&self) {}
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:119:25
   |
LL |         fn into_i32_ref(&self) {}
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:122:9
   |
LL |         fn into_u32(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:122:9
   |
LL |         fn into_u32(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:122:21
   |
LL |         fn into_u32(self) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:123:9
   |
LL |         fn is_i32(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:123:9
   |
LL |         fn is_i32(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:123:19
   |
LL |         fn is_i32(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:126:9
   |
LL |         fn is_u32(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:126:9
   |
LL |         fn is_u32(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:126:20
   |
LL |         fn is_u32(&self) {}
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:126:19
   |
LL |         fn is_u32(&self) {}
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:127:9
   |
LL |         fn to_i32(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:127:9
   |
LL |         fn to_i32(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:127:19
   |
LL |         fn to_i32(self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:128:9
   |
LL |         fn to_u32(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:128:9
   |
LL |         fn to_u32(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:128:20
   |
LL |         fn to_u32(&self) {}
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:128:19
   |
LL |         fn to_u32(&self) {}
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:129:9
   |
LL |         fn from_i32(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:129:9
   |
LL |         fn from_i32(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:129:21
   |
LL |         fn from_i32(self) {}
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:134:9
   |
LL |         fn from_cake(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:134:9
   |
LL |         fn from_cake(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:134:22
   |
LL |         fn from_cake(self) {}
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:137:9
   |
LL |         fn as_(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:137:9
   |
LL |         fn as_(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:137:16
   |
LL |         fn as_(self) {}
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:138:9
   |
LL |         fn into_(&self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:138:9
   |
LL |         fn into_(&self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:138:19
   |
LL |         fn into_(&self) {}
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:138:18
   |
LL |         fn into_(&self) {}
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:139:9
   |
LL |         fn is_(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:139:9
   |
LL |         fn is_(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:139:16
   |
LL |         fn is_(self) {}
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:140:9
   |
LL |         fn to_(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:140:9
   |
LL |         fn to_(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:140:16
   |
LL |         fn to_(self) {}
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:141:9
   |
LL |         fn from_(self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:141:9
   |
LL |         fn from_(self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:141:18
   |
LL |         fn from_(self) {}
   |                  ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:142:9
   |
LL |         fn to_mut(&mut self) {}
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:142:9
   |
LL |         fn to_mut(&mut self) {}
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:142:24
   |
LL |         fn to_mut(&mut self) {}
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:142:19
   |
LL |         fn to_mut(&mut self) {}
   |                   ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: trait must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:145:5
   |
LL | /     trait U {
LL | |         fn as_i32(self);
...  |
LL | |         fn to_mut(&mut self);
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:145:5
   |
LL |     trait U {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:146:9
   |
LL |         fn as_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:146:9
   |
LL |         fn as_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:146:19
   |
LL |         fn as_i32(self);
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:149:9
   |
LL |         fn as_u32(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:149:9
   |
LL |         fn as_u32(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:149:20
   |
LL |         fn as_u32(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:149:19
   |
LL |         fn as_u32(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:150:9
   |
LL |         fn into_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:150:9
   |
LL |         fn into_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:150:21
   |
LL |         fn into_i32(self);
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:151:9
   |
LL |         fn into_i32_ref(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:151:9
   |
LL |         fn into_i32_ref(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:151:26
   |
LL |         fn into_i32_ref(&self);
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:151:25
   |
LL |         fn into_i32_ref(&self);
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:154:9
   |
LL |         fn into_u32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:154:9
   |
LL |         fn into_u32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:154:21
   |
LL |         fn into_u32(self);
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:155:9
   |
LL |         fn is_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:155:9
   |
LL |         fn is_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:155:19
   |
LL |         fn is_i32(self);
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:158:9
   |
LL |         fn is_u32(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:158:9
   |
LL |         fn is_u32(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:158:20
   |
LL |         fn is_u32(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:158:19
   |
LL |         fn is_u32(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:159:9
   |
LL |         fn to_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:159:9
   |
LL |         fn to_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:159:19
   |
LL |         fn to_i32(self);
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:160:9
   |
LL |         fn to_u32(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:160:9
   |
LL |         fn to_u32(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:160:20
   |
LL |         fn to_u32(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:160:19
   |
LL |         fn to_u32(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:161:9
   |
LL |         fn from_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:161:9
   |
LL |         fn from_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:161:21
   |
LL |         fn from_i32(self);
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:166:9
   |
LL |         fn from_cake(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:166:9
   |
LL |         fn from_cake(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:166:22
   |
LL |         fn from_cake(self);
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:169:9
   |
LL |         fn as_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:169:9
   |
LL |         fn as_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:169:16
   |
LL |         fn as_(self);
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:170:9
   |
LL |         fn into_(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:170:9
   |
LL |         fn into_(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:170:19
   |
LL |         fn into_(&self);
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:170:18
   |
LL |         fn into_(&self);
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:171:9
   |
LL |         fn is_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:171:9
   |
LL |         fn is_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:171:16
   |
LL |         fn is_(self);
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:172:9
   |
LL |         fn to_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:172:9
   |
LL |         fn to_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:172:16
   |
LL |         fn to_(self);
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:173:9
   |
LL |         fn from_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:173:9
   |
LL |         fn from_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:173:18
   |
LL |         fn from_(self);
   |                  ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:174:9
   |
LL |         fn to_mut(&mut self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:174:9
   |
LL |         fn to_mut(&mut self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:174:24
   |
LL |         fn to_mut(&mut self);
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:174:19
   |
LL |         fn to_mut(&mut self);
   |                   ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: trait must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:177:5
   |
LL | /     trait C: Copy {
LL | |         fn as_i32(self);
LL | |         fn as_u32(&self);
LL | |         fn into_i32(self);
...  |
LL | |         fn to_mut(&mut self);
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:177:5
   |
LL |     trait C: Copy {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:178:9
   |
LL |         fn as_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:178:9
   |
LL |         fn as_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:178:19
   |
LL |         fn as_i32(self);
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:179:9
   |
LL |         fn as_u32(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:179:9
   |
LL |         fn as_u32(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:179:20
   |
LL |         fn as_u32(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:179:19
   |
LL |         fn as_u32(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:180:9
   |
LL |         fn into_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:180:9
   |
LL |         fn into_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:180:21
   |
LL |         fn into_i32(self);
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:181:9
   |
LL |         fn into_i32_ref(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:181:9
   |
LL |         fn into_i32_ref(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:181:26
   |
LL |         fn into_i32_ref(&self);
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:181:25
   |
LL |         fn into_i32_ref(&self);
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:184:9
   |
LL |         fn into_u32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:184:9
   |
LL |         fn into_u32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:184:21
   |
LL |         fn into_u32(self);
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:185:9
   |
LL |         fn is_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:185:9
   |
LL |         fn is_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:185:19
   |
LL |         fn is_i32(self);
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:186:9
   |
LL |         fn is_u32(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:186:9
   |
LL |         fn is_u32(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:186:20
   |
LL |         fn is_u32(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:186:19
   |
LL |         fn is_u32(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:187:9
   |
LL |         fn to_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:187:9
   |
LL |         fn to_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:187:19
   |
LL |         fn to_i32(self);
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:188:9
   |
LL |         fn to_u32(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:188:9
   |
LL |         fn to_u32(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:188:20
   |
LL |         fn to_u32(&self);
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:188:19
   |
LL |         fn to_u32(&self);
   |                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:189:9
   |
LL |         fn from_i32(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:189:9
   |
LL |         fn from_i32(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:189:21
   |
LL |         fn from_i32(self);
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:194:9
   |
LL |         fn from_cake(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:194:9
   |
LL |         fn from_cake(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:194:22
   |
LL |         fn from_cake(self);
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:197:9
   |
LL |         fn as_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:197:9
   |
LL |         fn as_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:197:16
   |
LL |         fn as_(self);
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:198:9
   |
LL |         fn into_(&self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:198:9
   |
LL |         fn into_(&self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:198:19
   |
LL |         fn into_(&self);
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:198:18
   |
LL |         fn into_(&self);
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:199:9
   |
LL |         fn is_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:199:9
   |
LL |         fn is_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:199:16
   |
LL |         fn is_(self);
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:200:9
   |
LL |         fn to_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:200:9
   |
LL |         fn to_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:200:16
   |
LL |         fn to_(self);
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:201:9
   |
LL |         fn from_(self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:201:9
   |
LL |         fn from_(self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:201:18
   |
LL |         fn from_(self);
   |                  ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:202:9
   |
LL |         fn to_mut(&mut self);
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:202:9
   |
LL |         fn to_mut(&mut self);
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:202:24
   |
LL |         fn to_mut(&mut self);
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:202:19
   |
LL |         fn to_mut(&mut self);
   |                   ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:206:1
   |
LL | mod issue6727 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:208:5
   |
LL |     struct FooCopy;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:207:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:207:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:207:11
   |
LL |     #[derive(Clone, Copy)]
   |           ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:207:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:207:14
   |
LL |     #[derive(Clone, Copy)]
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:207:21
   |
LL |     #[derive(Clone, Copy)]
   |                     ^

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:210:5
   |
LL |     impl FooCopy {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:211:9
   |
LL |         fn to_u64(self) -> u64 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:211:9
   |
LL |         fn to_u64(self) -> u64 {
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:211:19
   |
LL |         fn to_u64(self) -> u64 {
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:215:9
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:215:9
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:215:23
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:215:22
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:222:5
   |
LL |     struct FooNoCopy;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:224:5
   |
LL |     impl FooNoCopy {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:226:9
   |
LL |         fn to_u64(self) -> u64 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:226:9
   |
LL |         fn to_u64(self) -> u64 {
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:226:19
   |
LL |         fn to_u64(self) -> u64 {
   |                   ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:231:9
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:231:9
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:231:23
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:231:22
   |
LL |         fn to_u64_v2(&self) -> u64 {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:238:5
   |
LL |     struct S;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/wrong_self_convention.rs:240:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:242:9
   |
LL |         fn is_forty_two(x: u32) -> bool {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:242:9
   |
LL |         fn is_forty_two(x: u32) -> bool {
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:242:25
   |
LL |         fn is_forty_two(x: u32) -> bool {
   |                         ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/wrong_self_convention.rs:247:9
   |
LL |         fn is_test_code(&self) -> bool {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/wrong_self_convention.rs:247:9
   |
LL |         fn is_test_code(&self) -> bool {
   |         ^

error: parameter must be `mut`
  --> tests/ui/wrong_self_convention.rs:247:26
   |
LL |         fn is_test_code(&self) -> bool {
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/wrong_self_convention.rs:247:25
   |
LL |         fn is_test_code(&self) -> bool {
   |                         ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 265 previous errors

