error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:12:1
   |
LL | fn test(foo: ()) {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:12:1
   |
LL | fn test(foo: ()) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:12:1
   |
LL | fn test(foo: ()) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/disallowed_names.rs:12:9
   |
LL | fn test(foo: ()) {}
   |         ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:15:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:15:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:15:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:16:9
   |
LL |     let foo = 42;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:19:9
   |
LL |     let baz = 42;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:22:9
   |
LL |     let quux = 42;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:28:9
   |
LL |     let bar = 42;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:30:9
   |
LL |     let food = 42;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:31:9
   |
LL |     let foodstuffs = 42;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:32:9
   |
LL |     let bazaar = 42;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:43:1
   |
LL | fn issue_1647(mut foo: u8) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:43:1
   |
LL | fn issue_1647(mut foo: u8) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:43:1
   |
LL | fn issue_1647(mut foo: u8) {
   | ^

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:53:1
   |
LL | fn issue_1647_ref() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:53:1
   |
LL | fn issue_1647_ref() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:53:1
   |
LL | fn issue_1647_ref() {
   | ^

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:54:13
   |
LL |     let ref baz = 0;
   |             ^ help: make this variable mutable: `mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/disallowed_names.rs:54:9
   |
LL |     let ref baz = 0;
   |         ^^^^^^^
   |
   = note: requested on the command line with `-D clippy::reference-used`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/disallowed_names.rs:57:17
   |
LL |     if let Some(ref quux) = Some(42) {}
   |                 ^^^^^^^^

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:61:1
   |
LL | fn issue_1647_ref_mut() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:61:1
   |
LL | fn issue_1647_ref_mut() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:61:1
   |
LL | fn issue_1647_ref_mut() {
   | ^

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/disallowed_names.rs:62:9
   |
LL |     let ref mut baz = 0;
   |         ^^^^^^^^^^^

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/disallowed_names.rs:65:17
   |
LL |     if let Some(ref mut quux) = Some(42) {}
   |                 ^^^^^^^^^^^^

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:70:1
   |
LL | mod tests {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:71:5
   |
LL |     fn issue_7305() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:71:5
   |
LL |     fn issue_7305() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:71:5
   |
LL |     fn issue_7305() {
   |     ^

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:73:13
   |
LL |         let foo = 0;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:76:9
   |
LL |         fn nested() {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:76:9
   |
LL |         fn nested() {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:76:9
   |
LL |         fn nested() {
   |         ^

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:77:17
   |
LL |             let foo = 0;
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:83:1
   |
LL | #[test]
   | ------- in this procedural macro expansion
LL | fn test_with_disallowed_name() {
   | ^

error: item must be `pub`
  --> tests/ui/disallowed_names.rs:83:1
   |
LL | fn test_with_disallowed_name() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/disallowed_names.rs:83:1
   |
LL | fn test_with_disallowed_name() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/disallowed_names.rs:83:1
   |
LL | fn test_with_disallowed_name() {
   | ^

error: variable must be `mut`
  --> tests/ui/disallowed_names.rs:84:9
   |
LL |     let foo = 0;
   |         ^ help: make this variable mutable: `mut`

error: function must be `unsafe`
   |
   = help: make this function unsafe: `unsafe`

error: references are not allowed
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/disallowed_names.rs:83:1
   |
LL |   #[test]
   |   ------- in this procedural macro expansion
LL | / fn test_with_disallowed_name() {
LL | |     let foo = 0;
LL | | }
   | |_^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 41 previous errors

