error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:4:1
   |
LL | fn square_is_lower_64(x: &u32) -> bool {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/infinite_iter.rs:4:1
   |
LL | fn square_is_lower_64(x: &u32) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/infinite_iter.rs:4:1
   |
LL | fn square_is_lower_64(x: &u32) -> bool {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/infinite_iter.rs:4:23
   |
LL | fn square_is_lower_64(x: &u32) -> bool {
   |                       ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/infinite_iter.rs:4:26
   |
LL | fn square_is_lower_64(x: &u32) -> bool {
   |                          ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:10:1
   |
LL | fn infinite_iters() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/infinite_iter.rs:10:1
   |
LL | fn infinite_iters() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/infinite_iter.rs:10:1
   |
LL | fn infinite_iters() {
   | ^

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:51:1
   |
LL | fn potential_infinite_iters() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/infinite_iter.rs:51:1
   |
LL | fn potential_infinite_iters() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/infinite_iter.rs:51:1
   |
LL | fn potential_infinite_iters() {
   | ^

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:90:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/infinite_iter.rs:90:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/infinite_iter.rs:90:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:95:1
   |
LL | mod finite_collect {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:98:5
   |
LL |     struct C;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:99:5
   |
LL |     impl FromIterator<i32> for C {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/infinite_iter.rs:100:9
   |
LL |         fn from_iter<I: IntoIterator<Item = i32>>(iter: I) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/infinite_iter.rs:100:9
   |
LL |         fn from_iter<I: IntoIterator<Item = i32>>(iter: I) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/infinite_iter.rs:100:51
   |
LL |         fn from_iter<I: IntoIterator<Item = i32>>(iter: I) -> Self {
   |                                                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/infinite_iter.rs:105:5
   |
LL |     fn check_collect() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/infinite_iter.rs:105:5
   |
LL |     fn check_collect() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/infinite_iter.rs:105:5
   |
LL |     fn check_collect() {
   |     ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: infinite iteration detected
  --> tests/ui/infinite_iter.rs:11:5
   |
LL |     repeat(0_u8).collect::<Vec<_>>();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/infinite_iter.rs:9:8
   |
LL | #[deny(clippy::infinite_iter)]
   |        ^^^^^^^^^^^^^^^^^^^^^

error: infinite iteration detected
  --> tests/ui/infinite_iter.rs:15:5
   |
LL |     (0..8_u32).take_while(square_is_lower_64).cycle().count();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: infinite iteration detected
  --> tests/ui/infinite_iter.rs:19:5
   |
LL |     (0..8_u64).chain(0..).max();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: infinite iteration detected
  --> tests/ui/infinite_iter.rs:28:5
   |
LL | /     (0..8_u32)
LL | |
LL | |         .rev()
LL | |         .cycle()
LL | |         .map(|x| x + 1_u32)
LL | |         .for_each(|x| println!("{}", x));
   | |________________________________________^

error: infinite iteration detected
  --> tests/ui/infinite_iter.rs:37:5
   |
LL |     (0_usize..).flat_map(|x| 0..x).product::<usize>();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: infinite iteration detected
  --> tests/ui/infinite_iter.rs:41:5
   |
LL |     (0_u64..).filter(|x| x % 2 == 0).last();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:53:5
   |
LL |     (0..).zip((0..).take_while(square_is_lower_64)).count();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/infinite_iter.rs:50:8
   |
LL | #[deny(clippy::maybe_infinite_iter)]
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:57:5
   |
LL |     repeat(42).take_while(|x| *x == 42).chain(0..42).max();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:61:5
   |
LL | /     (1..)
LL | |
LL | |         .scan(0, |state, x| {
LL | |             *state += x;
LL | |             Some(*state)
LL | |         })
LL | |         .min();
   | |______________^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:69:5
   |
LL |     (0..).find(|x| *x == 24);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:73:5
   |
LL |     (0..).position(|x| x == 24);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:77:5
   |
LL |     (0..).any(|x| x == 24);
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: possible infinite iteration detected
  --> tests/ui/infinite_iter.rs:81:5
   |
LL |     (0..).all(|x| x == 24);
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 34 previous errors

