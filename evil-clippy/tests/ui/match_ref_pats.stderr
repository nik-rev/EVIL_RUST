error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:5:1
   |
LL | fn ref_pats() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/match_ref_pats.rs:5:1
   |
LL | fn ref_pats() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_ref_pats.rs:5:1
   |
LL | fn ref_pats() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/match_ref_pats.rs:7:13
   |
LL |         let v = &Some(0);
   |             ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:7:17
   |
LL |         let v = &Some(0);
   |                 ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: variable must be `mut`
  --> tests/ui/match_ref_pats.rs:19:9
   |
LL |     let tup = &(1, 2);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:19:15
   |
LL |     let tup = &(1, 2);
   |               ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/match_ref_pats.rs:25:9
   |
LL |     let w = Some(0);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:26:11
   |
LL |     match &w {
   |           ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/match_ref_pats.rs:32:9
   |
LL |     let w = Some(0);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/match_ref_pats.rs:38:9
   |
LL |     let a = &Some(0);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:38:13
   |
LL |     let a = &Some(0);
   |             ^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/match_ref_pats.rs:44:9
   |
LL |     let b = Some(0);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:45:20
   |
LL |     if let &None = &b {
   |                    ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:51:1
   |
LL | mod ice_3719 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:52:5
   |
LL |     macro_rules! foo_variant(
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:56:5
   |
LL |     enum Foo {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:61:5
   |
LL |     impl Foo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_ref_pats.rs:62:9
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_ref_pats.rs:62:9
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/match_ref_pats.rs:62:16
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:62:35
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |                                   ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:64:27
   |
LL |                 0 => Some(&Foo::A),
   |                           ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:65:27
   |
LL |                 1 => Some(&Foo::B),
   |                           ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:71:5
   |
LL |     fn ice_3719() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_ref_pats.rs:71:5
   |
LL |     fn ice_3719() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_ref_pats.rs:71:5
   |
LL |     fn ice_3719() {
   |     ^

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:80:1
   |
LL | mod issue_7740 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:81:5
   |
LL |     macro_rules! foobar_variant(
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:85:5
   |
LL |     enum FooBar {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:92:5
   |
LL |     impl FooBar {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_ref_pats.rs:93:9
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_ref_pats.rs:93:9
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/match_ref_pats.rs:93:16
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:93:35
   |
LL |         fn get(idx: u8) -> Option<&'static Self> {
   |                                   ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:95:27
   |
LL |                 0 => Some(&FooBar::Foo),
   |                           ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:96:27
   |
LL |                 1 => Some(&FooBar::Bar),
   |                           ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:97:27
   |
LL |                 2 => Some(&FooBar::FooBar),
   |                           ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/match_ref_pats.rs:98:27
   |
LL |                 3 => Some(&FooBar::BarFoo),
   |                           ^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:104:5
   |
LL |     fn issue_7740() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_ref_pats.rs:104:5
   |
LL |     fn issue_7740() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_ref_pats.rs:104:5
   |
LL |     fn issue_7740() {
   |     ^

error: item must be `pub`
  --> tests/ui/match_ref_pats.rs:123:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_ref_pats.rs:123:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_ref_pats.rs:123:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 43 previous errors

