error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:4:1
   |
LL | async fn sink1<'a>(_: &'a str) {} // lint
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:4:7
   |
LL | async fn sink1<'a>(_: &'a str) {} // lint
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:4:7
   |
LL | async fn sink1<'a>(_: &'a str) {} // lint
   |       ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: references are not allowed
  --> tests/ui/issue_4266.rs:4:23
   |
LL | async fn sink1<'a>(_: &'a str) {} // lint
   |                       ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:7:1
   |
LL | async fn sink1_elided(_: &str) {} // ok
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:7:7
   |
LL | async fn sink1_elided(_: &str) {} // ok
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:7:7
   |
LL | async fn sink1_elided(_: &str) {} // ok
   |       ^

error: references are not allowed
  --> tests/ui/issue_4266.rs:7:26
   |
LL | async fn sink1_elided(_: &str) {} // ok
   |                          ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:10:1
   |
LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:10:7
   |
LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:10:7
   |
LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {
   |       ^

error: parameter must be `mut`
  --> tests/ui/issue_4266.rs:10:25
   |
LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {
   |                         ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/issue_4266.rs:10:28
   |
LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {
   |                            ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/issue_4266.rs:10:40
   |
LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {
   |                                        ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:17:1
   |
LL | async fn one_to_one_elided(s: &str) -> &str {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:17:7
   |
LL | async fn one_to_one_elided(s: &str) -> &str {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:17:7
   |
LL | async fn one_to_one_elided(s: &str) -> &str {
   |       ^

error: parameter must be `mut`
  --> tests/ui/issue_4266.rs:17:28
   |
LL | async fn one_to_one_elided(s: &str) -> &str {
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/issue_4266.rs:17:31
   |
LL | async fn one_to_one_elided(s: &str) -> &str {
   |                               ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/issue_4266.rs:17:40
   |
LL | async fn one_to_one_elided(s: &str) -> &str {
   |                                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:22:1
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:22:7
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:22:7
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |       ^

error: parameter must be `mut`
  --> tests/ui/issue_4266.rs:22:25
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |                         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/issue_4266.rs:22:37
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/issue_4266.rs:22:28
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |                            ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/issue_4266.rs:22:41
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |                                         ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/issue_4266.rs:22:53
   |
LL | async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {
   |                                                     ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:29:1
   |
LL | struct Foo;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:30:1
   |
LL | impl Foo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:32:15
   |
LL |     pub async fn new(&mut self) -> Self {
   |               ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:32:15
   |
LL |     pub async fn new(&mut self) -> Self {
   |               ^

error: parameter must be `mut`
  --> tests/ui/issue_4266.rs:32:27
   |
LL |     pub async fn new(&mut self) -> Self {
   |                           ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/issue_4266.rs:32:22
   |
LL |     pub async fn new(&mut self) -> Self {
   |                      ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:41:1
   |
LL | async fn print(s: &str) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:41:7
   |
LL | async fn print(s: &str) {
   |       ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:41:7
   |
LL | async fn print(s: &str) {
   |       ^

error: parameter must be `mut`
  --> tests/ui/issue_4266.rs:41:16
   |
LL | async fn print(s: &str) {
   |                ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/issue_4266.rs:41:19
   |
LL | async fn print(s: &str) {
   |                   ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/issue_4266.rs:45:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/issue_4266.rs:45:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/issue_4266.rs:45:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 38 previous errors

