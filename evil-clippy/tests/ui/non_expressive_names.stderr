error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:4:1
   |
LL | enum MaybeInst {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:3:10
   |
LL | #[derive(Clone, Debug)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:3:7
   |
LL | #[derive(Clone, Debug)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:3:7
   |
LL | #[derive(Clone, Debug)]
   |       ^  ----- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/non_expressive_names.rs:3:10
   |
LL | #[derive(Clone, Debug)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/non_expressive_names.rs:3:10
   |
LL | #[derive(Clone, Debug)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:3:17
   |
LL | #[derive(Clone, Debug)]
   |                 ^

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:3:14
   |
LL | #[derive(Clone, Debug)]
   |              ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:3:14
   |
LL | #[derive(Clone, Debug)]
   |              ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/non_expressive_names.rs:3:17
   |
LL | #[derive(Clone, Debug)]
   |                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/non_expressive_names.rs:3:17
   |
LL | #[derive(Clone, Debug)]
   |                 ^

error: references are not allowed
  --> tests/ui/non_expressive_names.rs:3:17
   |
LL | #[derive(Clone, Debug)]
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/non_expressive_names.rs:3:17
   |
LL | #[derive(Clone, Debug)]
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/non_expressive_names.rs:6:12
   |
LL | #[derive(Clone, Debug)]
   |                 ----- in this derive macro expansion
...
LL |     Split1(usize),
   |            ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/non_expressive_names.rs:7:12
   |
LL | #[derive(Clone, Debug)]
   |                 ----- in this derive macro expansion
...
LL |     Split2(usize),
   |            ^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:10:1
   |
LL | struct InstSplit {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:14:1
   |
LL | impl MaybeInst {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:15:5
   |
LL |     fn fill(&mut self) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:15:5
   |
LL |     fn fill(&mut self) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/non_expressive_names.rs:15:18
   |
LL |     fn fill(&mut self) {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/non_expressive_names.rs:15:13
   |
LL |     fn fill(&mut self) {
   |             ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:17:13
   |
LL |         let filled = match *self {
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:26:1
   |
LL | fn underscores_and_numbers() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:26:1
   |
LL | fn underscores_and_numbers() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:26:1
   |
LL | fn underscores_and_numbers() {
   | ^

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:27:9
   |
LL |     let _1 = 1;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:29:9
   |
LL |     let ____1 = 1;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:31:9
   |
LL |     let __1___2 = 12;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:33:9
   |
LL |     let _1_ok = 1;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:36:1
   |
LL | fn issue2927() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:36:1
   |
LL | fn issue2927() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:36:1
   |
LL | fn issue2927() {
   | ^

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:37:9
   |
LL |     let args = 1;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:41:1
   |
LL | fn issue3078() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:41:1
   |
LL | fn issue3078() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:41:1
   |
LL | fn issue3078() {
   | ^

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:49:1
   |
LL | struct Bar;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:51:1
   |
LL | impl Bar {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:52:5
   |
LL |     fn bar() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:52:5
   |
LL |     fn bar() {
   |     ^

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:53:13
   |
LL |         let _1 = 1;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:55:13
   |
LL |         let ____1 = 1;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:57:13
   |
LL |         let __1___2 = 12;
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/non_expressive_names.rs:59:13
   |
LL |         let _1_ok = 1;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/non_expressive_names.rs:63:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/non_expressive_names.rs:63:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/non_expressive_names.rs:63:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 43 previous errors

