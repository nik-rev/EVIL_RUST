error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/should_impl_trait/method_list_2.rs:17:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:17:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:17:1
   |
LL | fn main() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/should_impl_trait/method_list_2.rs:20:1
   |
LL | impl T {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:25:9
   |
LL |     pub fn eq(&self, other: &Self) -> bool {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:25:9
   |
LL |     pub fn eq(&self, other: &Self) -> bool {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:25:16
   |
LL |     pub fn eq(&self, other: &Self) -> bool {
   |                ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:25:22
   |
LL |     pub fn eq(&self, other: &Self) -> bool {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:25:15
   |
LL |     pub fn eq(&self, other: &Self) -> bool {
   |               ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:25:29
   |
LL |     pub fn eq(&self, other: &Self) -> bool {
   |                             ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:31:9
   |
LL |     pub fn from_iter<T>(iter: T) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:31:9
   |
LL |     pub fn from_iter<T>(iter: T) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:31:25
   |
LL |     pub fn from_iter<T>(iter: T) -> Self {
   |                         ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:37:9
   |
LL |     pub fn from_str(s: &str) -> Result<Self, Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:37:9
   |
LL |     pub fn from_str(s: &str) -> Result<Self, Self> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:37:21
   |
LL |     pub fn from_str(s: &str) -> Result<Self, Self> {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:37:24
   |
LL |     pub fn from_str(s: &str) -> Result<Self, Self> {
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:43:9
   |
LL |     pub fn hash(&self, state: &mut T) {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:43:9
   |
LL |     pub fn hash(&self, state: &mut T) {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:43:18
   |
LL |     pub fn hash(&self, state: &mut T) {
   |                  ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:43:24
   |
LL |     pub fn hash(&self, state: &mut T) {
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:43:17
   |
LL |     pub fn hash(&self, state: &mut T) {
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:43:31
   |
LL |     pub fn hash(&self, state: &mut T) {
   |                               ^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:49:9
   |
LL |     pub fn index(&self, index: usize) -> &Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:49:9
   |
LL |     pub fn index(&self, index: usize) -> &Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:49:19
   |
LL |     pub fn index(&self, index: usize) -> &Self {
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:49:25
   |
LL |     pub fn index(&self, index: usize) -> &Self {
   |                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:49:18
   |
LL |     pub fn index(&self, index: usize) -> &Self {
   |                  ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:49:42
   |
LL |     pub fn index(&self, index: usize) -> &Self {
   |                                          ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:55:9
   |
LL |     pub fn index_mut(&mut self, index: usize) -> &mut Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:55:9
   |
LL |     pub fn index_mut(&mut self, index: usize) -> &mut Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:55:27
   |
LL |     pub fn index_mut(&mut self, index: usize) -> &mut Self {
   |                           ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:55:33
   |
LL |     pub fn index_mut(&mut self, index: usize) -> &mut Self {
   |                                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:55:22
   |
LL |     pub fn index_mut(&mut self, index: usize) -> &mut Self {
   |                      ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:55:50
   |
LL |     pub fn index_mut(&mut self, index: usize) -> &mut Self {
   |                                                  ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:61:9
   |
LL |     pub fn into_iter(self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:61:9
   |
LL |     pub fn into_iter(self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:61:22
   |
LL |     pub fn into_iter(self) -> Self {
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:67:9
   |
LL |     pub fn mul(self, rhs: Self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:67:9
   |
LL |     pub fn mul(self, rhs: Self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:67:16
   |
LL |     pub fn mul(self, rhs: Self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:67:22
   |
LL |     pub fn mul(self, rhs: Self) -> Self {
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:73:9
   |
LL |     pub fn neg(self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:73:9
   |
LL |     pub fn neg(self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:73:16
   |
LL |     pub fn neg(self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:79:9
   |
LL |     pub fn next(&mut self) -> Option<Self> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:79:9
   |
LL |     pub fn next(&mut self) -> Option<Self> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:79:22
   |
LL |     pub fn next(&mut self) -> Option<Self> {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/method_list_2.rs:79:17
   |
LL |     pub fn next(&mut self) -> Option<Self> {
   |                 ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:85:9
   |
LL |     pub fn not(self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:85:9
   |
LL |     pub fn not(self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:85:16
   |
LL |     pub fn not(self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:91:9
   |
LL |     pub fn rem(self, rhs: Self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:91:9
   |
LL |     pub fn rem(self, rhs: Self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:91:16
   |
LL |     pub fn rem(self, rhs: Self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:91:22
   |
LL |     pub fn rem(self, rhs: Self) -> Self {
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:97:9
   |
LL |     pub fn shl(self, rhs: Self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:97:9
   |
LL |     pub fn shl(self, rhs: Self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:97:16
   |
LL |     pub fn shl(self, rhs: Self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:97:22
   |
LL |     pub fn shl(self, rhs: Self) -> Self {
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:103:9
   |
LL |     pub fn shr(self, rhs: Self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:103:9
   |
LL |     pub fn shr(self, rhs: Self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:103:16
   |
LL |     pub fn shr(self, rhs: Self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:103:22
   |
LL |     pub fn shr(self, rhs: Self) -> Self {
   |                      ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:109:9
   |
LL |     pub fn sub(self, rhs: Self) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/method_list_2.rs:109:9
   |
LL |     pub fn sub(self, rhs: Self) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:109:16
   |
LL |     pub fn sub(self, rhs: Self) -> Self {
   |                ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/method_list_2.rs:109:22
   |
LL |     pub fn sub(self, rhs: Self) -> Self {
   |                      ^ help: make this parameter mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 56 previous errors

