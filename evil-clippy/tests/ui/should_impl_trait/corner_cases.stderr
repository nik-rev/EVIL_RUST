error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/should_impl_trait/corner_cases.rs:20:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:20:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:20:1
   |
LL | fn main() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/should_impl_trait/corner_cases.rs:23:1
   |
LL | impl T1 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:27:16
   |
LL |     pub(crate) fn drop(&mut self) {}
   |                ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:27:16
   |
LL |     pub(crate) fn drop(&mut self) {}
   |                ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:27:29
   |
LL |     pub(crate) fn drop(&mut self) {}
   |                             ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:27:24
   |
LL |     pub(crate) fn drop(&mut self) {}
   |                        ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`
   = note: requested on the command line with `-D clippy::reference-used`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:30:5
   |
LL |     fn neg(self) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:30:5
   |
LL |     fn neg(self) -> Self {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:30:12
   |
LL |     fn neg(self) -> Self {
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:35:5
   |
LL |     fn eq(&self, other: Self) -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:35:5
   |
LL |     fn eq(&self, other: Self) -> bool {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:35:12
   |
LL |     fn eq(&self, other: Self) -> bool {
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:35:18
   |
LL |     fn eq(&self, other: Self) -> bool {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:35:11
   |
LL |     fn eq(&self, other: Self) -> bool {
   |           ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:40:5
   |
LL |     fn sub(&self, other: Self) -> &Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:40:5
   |
LL |     fn sub(&self, other: Self) -> &Self {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:40:13
   |
LL |     fn sub(&self, other: Self) -> &Self {
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:40:19
   |
LL |     fn sub(&self, other: Self) -> &Self {
   |                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:40:12
   |
LL |     fn sub(&self, other: Self) -> &Self {
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:40:35
   |
LL |     fn sub(&self, other: Self) -> &Self {
   |                                   ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:45:5
   |
LL |     fn div(self) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:45:5
   |
LL |     fn div(self) -> Self {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:45:12
   |
LL |     fn div(self) -> Self {
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:50:5
   |
LL |     fn rem(self, other: Self) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:50:5
   |
LL |     fn rem(self, other: Self) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:50:12
   |
LL |     fn rem(self, other: Self) {}
   |            ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:50:18
   |
LL |     fn rem(self, other: Self) {}
   |                  ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:53:5
   |
LL |     fn into_u32(self) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:53:5
   |
LL |     fn into_u32(self) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:53:17
   |
LL |     fn into_u32(self) -> u32 {
   |                 ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:57:5
   |
LL |     fn into_u16(&self) -> u16 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:57:5
   |
LL |     fn into_u16(&self) -> u16 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:57:18
   |
LL |     fn into_u16(&self) -> u16 {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:57:17
   |
LL |     fn into_u16(&self) -> u16 {
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:61:5
   |
LL |     fn to_something(self) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:61:5
   |
LL |     fn to_something(self) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:61:21
   |
LL |     fn to_something(self) -> u32 {
   |                     ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:65:5
   |
LL |     fn new(self) -> Self {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:65:5
   |
LL |     fn new(self) -> Self {
   |     ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:65:12
   |
LL |     fn new(self) -> Self {
   |            ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:69:9
   |
LL |     pub fn next<'b>(&'b mut self) -> Option<&'b mut T1> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:69:9
   |
LL |     pub fn next<'b>(&'b mut self) -> Option<&'b mut T1> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:69:29
   |
LL |     pub fn next<'b>(&'b mut self) -> Option<&'b mut T1> {
   |                             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:69:21
   |
LL |     pub fn next<'b>(&'b mut self) -> Option<&'b mut T1> {
   |                     ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:69:45
   |
LL |     pub fn next<'b>(&'b mut self) -> Option<&'b mut T1> {
   |                                             ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/should_impl_trait/corner_cases.rs:75:1
   |
LL | impl T2 {
   | ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:77:23
   |
LL |     pub unsafe fn add(self, rhs: Self) -> Self {
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:77:29
   |
LL |     pub unsafe fn add(self, rhs: Self) -> Self {
   |                             ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:82:15
   |
LL |     pub async fn next(&mut self) -> Option<Self> {
   |               ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/should_impl_trait/corner_cases.rs:82:15
   |
LL |     pub async fn next(&mut self) -> Option<Self> {
   |               ^

error: parameter must be `mut`
  --> tests/ui/should_impl_trait/corner_cases.rs:82:28
   |
LL |     pub async fn next(&mut self) -> Option<Self> {
   |                            ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/should_impl_trait/corner_cases.rs:82:23
   |
LL |     pub async fn next(&mut self) -> Option<Self> {
   |                       ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 45 previous errors

