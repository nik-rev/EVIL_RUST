error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:8:1
   |
LL | struct A;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:10:1
   |
LL | impl A {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:11:5
   |
LL |     fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:11:5
   |
LL |     fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:11:46
   |
LL |     fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> {
   |                                              ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:16:5
   |
LL |     fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:16:5
   |
LL |     fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:16:36
   |
LL |     fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> {
   |                                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:17:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:17:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:17:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:17:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:17:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:21:5
   |
LL |     fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:21:5
   |
LL |     fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> {
   |     ^

error: parameter must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:21:36
   |
LL |     fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> {
   |                                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:22:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:22:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:22:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:22:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:22:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:26:5
   |
LL |     fn other_with_debug_assert_with_message(x: i32) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:26:5
   |
LL |     fn other_with_debug_assert_with_message(x: i32) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:26:45
   |
LL |     fn other_with_debug_assert_with_message(x: i32) {
   |                                             ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:30:5
   |
LL |     fn other_with_debug_assert_eq(x: i32) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:30:5
   |
LL |     fn other_with_debug_assert_eq(x: i32) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:30:35
   |
LL |     fn other_with_debug_assert_eq(x: i32) {
   |                                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:31:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:31:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:31:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:31:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:31:9
   |
LL |         debug_assert_eq!(x, 5);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_eq` which comes from the expansion of the macro `debug_assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:34:5
   |
LL |     fn other_with_debug_assert_ne(x: i32) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:34:5
   |
LL |     fn other_with_debug_assert_ne(x: i32) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:34:35
   |
LL |     fn other_with_debug_assert_ne(x: i32) {
   |                                   ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:35:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:35:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:35:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:35:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:35:9
   |
LL |         debug_assert_ne!(x, 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::assert_ne` which comes from the expansion of the macro `debug_assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:38:5
   |
LL |     fn result_without_banned_functions() -> Result<bool, String> {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:38:5
   |
LL |     fn result_without_banned_functions() -> Result<bool, String> {
   |     ^

error: variable must be `mut`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:39:13
   |
LL |         let debug_assert = "debug_assert!";
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:45:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:45:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/panic_in_result_fn_debug_assertions.rs:45:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 42 previous errors

