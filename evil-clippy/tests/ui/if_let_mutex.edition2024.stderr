error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:13:1
   |
LL | fn do_stuff<T>(_: T) {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:13:1
   |
LL | fn do_stuff<T>(_: T) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:13:1
   |
LL | fn do_stuff<T>(_: T) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:15:1
   |
LL | fn if_let() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:15:1
   |
LL | fn if_let() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:15:1
   |
LL | fn if_let() {
   | ^

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:16:9
   |
LL |     let m = Mutex::new(1_u8);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:21:13
   |
LL |         let lock = m.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:28:1
   |
LL | fn if_let_option() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:28:1
   |
LL | fn if_let_option() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:28:1
   |
LL | fn if_let_option() {
   | ^

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:29:9
   |
LL |     let m = Mutex::new(Some(0_u8));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:34:13
   |
LL |         let lock = m.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:40:1
   |
LL | fn if_let_different_mutex() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:40:1
   |
LL | fn if_let_different_mutex() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:40:1
   |
LL | fn if_let_different_mutex() {
   | ^

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:41:9
   |
LL |     let m = Mutex::new(Some(0_u8));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:42:9
   |
LL |     let other = Mutex::new(None::<u8>);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:46:13
   |
LL |         let lock = other.lock().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:51:1
   |
LL | fn mutex_ref(mutex: &Mutex<i32>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:51:1
   |
LL | fn mutex_ref(mutex: &Mutex<i32>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:51:1
   |
LL | fn mutex_ref(mutex: &Mutex<i32>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/if_let_mutex.rs:51:14
   |
LL | fn mutex_ref(mutex: &Mutex<i32>) {
   |              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/if_let_mutex.rs:51:21
   |
LL | fn mutex_ref(mutex: &Mutex<i32>) {
   |                     ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: variable must be `mut`
  --> tests/ui/if_let_mutex.rs:56:13
   |
LL |         let _x = mutex.lock();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:60:1
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:60:1
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:60:1
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   | ^

error: parameter must be `mut`
  --> tests/ui/if_let_mutex.rs:60:21
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   |                     ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/if_let_mutex.rs:60:37
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/if_let_mutex.rs:60:25
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   |                         ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/if_let_mutex.rs:60:41
   |
LL | fn multiple_mutexes(m1: &Mutex<()>, m2: &Mutex<()>) {
   |                                         ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/if_let_mutex.rs:69:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/if_let_mutex.rs:69:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/if_let_mutex.rs:69:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 32 previous errors

