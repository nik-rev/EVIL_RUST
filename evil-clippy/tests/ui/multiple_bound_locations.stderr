error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:3:1
   |
LL | fn ty<F: std::fmt::Debug>(a: F)
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:3:1
   |
LL | fn ty<F: std::fmt::Debug>(a: F)
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:3:1
   |
LL | fn ty<F: std::fmt::Debug>(a: F)
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:3:27
   |
LL | fn ty<F: std::fmt::Debug>(a: F)
   |                           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:10:1
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:10:1
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:10:1
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   | ^

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:10:29
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:10:41
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:10:53
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/multiple_bound_locations.rs:10:32
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/multiple_bound_locations.rs:10:44
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                            ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/multiple_bound_locations.rs:10:56
   |
LL | fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                                        ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:17:1
   |
LL | fn ty_pred<F: Sized>()
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:17:1
   |
LL | fn ty_pred<F: Sized>()
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:17:1
   |
LL | fn ty_pred<F: Sized>()
   | ^

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:24:1
   |
LL | struct B;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:26:1
   |
LL | impl B {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:27:5
   |
LL |     fn ty<F: std::fmt::Debug>(a: F)
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:27:5
   |
LL |     fn ty<F: std::fmt::Debug>(a: F)
   |     ^

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:27:31
   |
LL |     fn ty<F: std::fmt::Debug>(a: F)
   |                               ^ help: make this parameter mutable: `mut`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:34:5
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:34:5
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |     ^

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:34:33
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:34:45
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:34:57
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                                         ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/multiple_bound_locations.rs:34:36
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                    ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/multiple_bound_locations.rs:34:48
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                                ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/multiple_bound_locations.rs:34:60
   |
LL |     fn lifetime<'a, 'b: 'a, 'c>(a: &'b str, b: &'a str, c: &'c str)
   |                                                            ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:41:5
   |
LL |     fn ty_pred<F: Sized>()
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:41:5
   |
LL |     fn ty_pred<F: Sized>()
   |     ^

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:49:1
   |
LL | struct C<F>(F);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:51:1
   |
LL | impl<F> C<F> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:52:5
   |
LL |     fn foo(_f: F) -> Self
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:52:5
   |
LL |     fn foo(_f: F) -> Self
   |     ^

error: parameter must be `mut`
  --> tests/ui/multiple_bound_locations.rs:52:12
   |
LL |     fn foo(_f: F) -> Self
   |            ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/multiple_bound_locations.rs:60:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/multiple_bound_locations.rs:60:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/multiple_bound_locations.rs:60:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 35 previous errors

