error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:10:1
   |
LL | fn test() -> i32 {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:10:1
   |
LL | fn test() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:10:1
   |
LL | fn test() -> i32 {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:11:9
   |
LL |     let _y = 0; // no warning
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:12:9
   |
LL |     let x = 5;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:17:1
   |
LL | fn test_inner() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:17:1
   |
LL | fn test_inner() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:17:1
   |
LL | fn test_inner() -> i32 {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:19:13
   |
LL |         let x = 5;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:27:1
   |
LL | fn test_nowarn_1() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:27:1
   |
LL | fn test_nowarn_1() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:27:1
   |
LL | fn test_nowarn_1() -> i32 {
   | ^

error: item must be `pub`
  --> tests/ui/let_and_return.rs:33:1
   |
LL | fn test_nowarn_2() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:33:1
   |
LL | fn test_nowarn_2() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:33:1
   |
LL | fn test_nowarn_2() -> i32 {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:34:9
   |
LL |     let x = 5;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:38:1
   |
LL | fn test_nowarn_3() -> (i32, i32) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:38:1
   |
LL | fn test_nowarn_3() -> (i32, i32) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:38:1
   |
LL | fn test_nowarn_3() -> (i32, i32) {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:40:10
   |
LL |     let (x, y) = (5, 9);
   |          ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:40:13
   |
LL |     let (x, y) = (5, 9);
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:44:1
   |
LL | fn test_nowarn_4() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:44:1
   |
LL | fn test_nowarn_4() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:44:1
   |
LL | fn test_nowarn_4() -> i32 {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:46:9
   |
LL |     let x: i32 = 5;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:50:1
   |
LL | fn test_nowarn_5(x: i16) -> u16 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:50:1
   |
LL | fn test_nowarn_5(x: i16) -> u16 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:50:1
   |
LL | fn test_nowarn_5(x: i16) -> u16 {
   | ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:50:18
   |
LL | fn test_nowarn_5(x: i16) -> u16 {
   |                  ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:52:9
   |
LL |     let x = x as u16;
   |         ^ help: make this variable mutable: `mut`

error: trait must be `unsafe`
  --> tests/ui/let_and_return.rs:57:1
   |
LL | / trait Decode {
LL | |     fn decode<D: std::io::Read>(d: D) -> Result<Self, ()>
LL | |     where
LL | |         Self: Sized;
LL | | }
   | |_^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:57:1
   |
LL | trait Decode {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:58:5
   |
LL |     fn decode<D: std::io::Read>(d: D) -> Result<Self, ()>
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:58:5
   |
LL |     fn decode<D: std::io::Read>(d: D) -> Result<Self, ()>
   |     ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:58:33
   |
LL |     fn decode<D: std::io::Read>(d: D) -> Result<Self, ()>
   |                                 ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:63:1
   |
LL | macro_rules! tuple_encode {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:76:1
   |
LL | fn issue_3792() -> String {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:76:1
   |
LL | fn issue_3792() -> String {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:76:1
   |
LL | fn issue_3792() -> String {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:79:9
   |
LL |     let stdin = io::stdin();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:82:9
   |
LL |     let line = stdin.lock().lines().next().unwrap().unwrap();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:65:9
   |
LL |         impl<$($x: Decode),*> Decode for ($($x),*) {
   |         ^ help: make this item public: `pub`
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:68:13
   |
LL |             fn decode<D: std::io::Read>(mut d: D) -> Result<Self, ()> {
   |             ^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:68:13
   |
LL |             fn decode<D: std::io::Read>(mut d: D) -> Result<Self, ()> {
   |             ^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:15
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |               ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:19
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                   ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:23
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                       ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:27
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                           ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:31
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                               ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:35
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                                   ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:39
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                                       ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:87:43
   |
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   |                                           ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:70:48
   |
LL |                 Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))
   |                                                ^^^^^^
...
LL | tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);
   | --------------------------------------------- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw mut`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the macro `tuple_encode` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/let_and_return.rs:89:1
   |
LL | mod no_lint_if_stmt_borrows {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:92:5
   |
LL |     struct Bar;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:94:5
   |
LL |     impl Bar {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:95:9
   |
LL |         fn new() -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:95:9
   |
LL |         fn new() -> Self {
   |         ^

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:98:9
   |
LL |         fn baz(&self) -> u32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:98:9
   |
LL |         fn baz(&self) -> u32 {
   |         ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:98:17
   |
LL |         fn baz(&self) -> u32 {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:98:16
   |
LL |         fn baz(&self) -> u32 {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:103:5
   |
LL |     fn issue_3324(value: Weak<RefCell<Bar>>) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:103:5
   |
LL |     fn issue_3324(value: Weak<RefCell<Bar>>) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:103:5
   |
LL |     fn issue_3324(value: Weak<RefCell<Bar>>) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:103:19
   |
LL |     fn issue_3324(value: Weak<RefCell<Bar>>) -> u32 {
   |                   ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:104:13
   |
LL |         let value = value.upgrade().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:105:13
   |
LL |         let ret = value.borrow().baz();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:110:5
   |
LL |     fn borrows_in_closure(value: Weak<RefCell<Bar>>) -> u32 {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:110:5
   |
LL |     fn borrows_in_closure(value: Weak<RefCell<Bar>>) -> u32 {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:110:5
   |
LL |     fn borrows_in_closure(value: Weak<RefCell<Bar>>) -> u32 {
   |     ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:110:27
   |
LL |     fn borrows_in_closure(value: Weak<RefCell<Bar>>) -> u32 {
   |                           ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:111:9
   |
LL |         fn f(mut x: impl FnMut() -> u32) -> impl FnMut() -> u32 {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:111:9
   |
LL |         fn f(mut x: impl FnMut() -> u32) -> impl FnMut() -> u32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:111:9
   |
LL |         fn f(mut x: impl FnMut() -> u32) -> impl FnMut() -> u32 {
   |         ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:115:13
   |
LL |         let value = value.upgrade().unwrap();
   |             ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:116:13
   |
LL |         let ret = f(|| value.borrow().baz())();
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:121:5
   |
LL |     mod free_function {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:122:9
   |
LL |         struct Inner;
   |         ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:124:9
   |
LL |         struct Foo<'a> {
   |         ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/let_and_return.rs:125:20
   |
LL |             inner: &'a Inner,
   |                    ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:128:9
   |
LL |         impl Drop for Foo<'_> {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:129:13
   |
LL |             fn drop(&mut self) {}
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:129:13
   |
LL |             fn drop(&mut self) {}
   |             ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:129:26
   |
LL |             fn drop(&mut self) {}
   |                          ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:129:21
   |
LL |             fn drop(&mut self) {}
   |                     ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:132:9
   |
LL |         impl<'a> Foo<'a> {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:133:13
   |
LL |             fn new(inner: &'a Inner) -> Self {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:133:13
   |
LL |             fn new(inner: &'a Inner) -> Self {
   |             ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:133:20
   |
LL |             fn new(inner: &'a Inner) -> Self {
   |                    ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:133:27
   |
LL |             fn new(inner: &'a Inner) -> Self {
   |                           ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:137:13
   |
LL |             fn value(&self) -> i32 {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:137:13
   |
LL |             fn value(&self) -> i32 {
   |             ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:137:23
   |
LL |             fn value(&self) -> i32 {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:137:22
   |
LL |             fn value(&self) -> i32 {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:142:9
   |
LL |         fn some_foo(inner: &Inner) -> Foo<'_> {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:142:9
   |
LL |         fn some_foo(inner: &Inner) -> Foo<'_> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:142:9
   |
LL |         fn some_foo(inner: &Inner) -> Foo<'_> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:142:21
   |
LL |         fn some_foo(inner: &Inner) -> Foo<'_> {
   |                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:142:28
   |
LL |         fn some_foo(inner: &Inner) -> Foo<'_> {
   |                            ^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:146:9
   |
LL |         fn test() -> i32 {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:146:9
   |
LL |         fn test() -> i32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:146:9
   |
LL |         fn test() -> i32 {
   |         ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:147:17
   |
LL |             let x = Inner {};
   |                 ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:148:17
   |
LL |             let value = some_foo(&x).value();
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:148:34
   |
LL |             let value = some_foo(&x).value();
   |                                  ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:153:9
   |
LL |         fn test2() -> i32 {
   |         ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:153:9
   |
LL |         fn test2() -> i32 {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:153:9
   |
LL |         fn test2() -> i32 {
   |         ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:154:17
   |
LL |             let x = Inner {};
   |                 ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:155:17
   |
LL |             let value = Foo::new(&x).value();
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:155:34
   |
LL |             let value = Foo::new(&x).value();
   |                                  ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:162:1
   |
LL | mod issue_5729 {
   | ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/let_and_return.rs:165:5
   |
LL |     trait Foo {}
   |     ^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:165:5
   |
LL |     trait Foo {}
   |     ^ help: make this item public: `pub`

error: trait must be `unsafe`
  --> tests/ui/let_and_return.rs:167:5
   |
LL | /     trait FooStorage {
LL | |         fn foo_cloned(&self) -> Arc<dyn Foo>;
LL | |     }
   | |_____^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:167:5
   |
LL |     trait FooStorage {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:168:9
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo>;
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:168:9
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo>;
   |         ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:168:24
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo>;
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:168:23
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo>;
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:171:5
   |
LL |     struct FooStorageImpl<T: Foo> {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:175:5
   |
LL |     impl<T: Foo + 'static> FooStorage for FooStorageImpl<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:176:9
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:176:9
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:176:24
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo> {
   |                        ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:176:23
   |
LL |         fn foo_cloned(&self) -> Arc<dyn Foo> {
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:177:17
   |
LL |             let clone = Arc::clone(&self.foo);
   |                 ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:177:36
   |
LL |             let clone = Arc::clone(&self.foo);
   |                                    ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:184:1
   |
LL | mod issue_11335 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:190:5
   |
LL |     impl<T> E<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:191:13
   |
LL |         pub fn inner(&self) -> &T {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:191:13
   |
LL |         pub fn inner(&self) -> &T {
   |             ^

error: parameter must be `mut`
  --> tests/ui/let_and_return.rs:191:23
   |
LL |         pub fn inner(&self) -> &T {
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:191:22
   |
LL |         pub fn inner(&self) -> &T {
   |                      ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/let_and_return.rs:191:32
   |
LL |         pub fn inner(&self) -> &T {
   |                                ^^
   |
   = help: use a raw pointer instead: `*const`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:192:17
   |
LL |             let result = match self {
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:204:1
   |
LL | macro_rules! fn_in_macro {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:206:9
   |
LL |           fn f() -> usize $b
   |           ^ help: make this item public: `pub`
...
LL | / fn_in_macro!({
LL | |     return 1;
LL | | });
   | |__- in this macro invocation
   |
   = note: this error originates in the macro `fn_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:206:9
   |
LL |           fn f() -> usize $b
   |           ^
...
LL | / fn_in_macro!({
LL | |     return 1;
LL | | });
   | |__- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:206:9
   |
LL |           fn f() -> usize $b
   |           ^
...
LL | / fn_in_macro!({
LL | |     return 1;
LL | | });
   | |__- in this macro invocation
   = note: this error originates in the macro `fn_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/let_and_return.rs:213:1
   |
LL | fn issue9150() -> usize {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:213:1
   |
LL | fn issue9150() -> usize {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:213:1
   |
LL | fn issue9150() -> usize {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:214:9
   |
LL |     let x = 1;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:220:1
   |
LL | fn issue12801() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:220:1
   |
LL | fn issue12801() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:220:1
   |
LL | fn issue12801() {
   | ^

error: item must be `pub`
  --> tests/ui/let_and_return.rs:221:5
   |
LL |     fn left_is_if() -> String {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:221:5
   |
LL |     fn left_is_if() -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:221:5
   |
LL |     fn left_is_if() -> String {
   |     ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:222:13
   |
LL |         let s = if true { "a".to_string() } else { "b".to_string() } + "c";
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:227:5
   |
LL |     fn no_par_needed() -> String {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:227:5
   |
LL |     fn no_par_needed() -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:227:5
   |
LL |     fn no_par_needed() -> String {
   |     ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:228:13
   |
LL |         let s = "c".to_string() + if true { "a" } else { "b" };
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:233:5
   |
LL |     fn conjunctive_blocks() -> String {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:233:5
   |
LL |     fn conjunctive_blocks() -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:233:5
   |
LL |     fn conjunctive_blocks() -> String {
   |     ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:234:13
   |
LL |         let s = { "a".to_string() } + "b" + { "c" } + "d";
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:240:5
   |
LL |     fn other_ops() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:240:5
   |
LL |     fn other_ops() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:240:5
   |
LL |     fn other_ops() {
   |     ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:242:17
   |
LL |             let s = if true { 2 } else { 3 } << 4;
   |                 ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:247:17
   |
LL |             let s = { true } || { false } && { 2 <= 3 };
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:254:1
   |
LL | fn issue14164() -> Result<u32, ()> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:254:1
   |
LL | fn issue14164() -> Result<u32, ()> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:254:1
   |
LL | fn issue14164() -> Result<u32, ()> {
   | ^

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:255:9
   |
LL |     let v = std::cell::RefCell::new(Some(vec![1]));
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/let_and_return.rs:256:9
   |
LL |     let r = match &*v.borrow() {
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/let_and_return.rs:256:19
   |
LL |     let r = match &*v.borrow() {
   |                   ^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/let_and_return.rs:264:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/let_and_return.rs:264:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/let_and_return.rs:264:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 152 previous errors

