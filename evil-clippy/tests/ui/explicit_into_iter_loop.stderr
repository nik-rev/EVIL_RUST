error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:4:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:4:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:4:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:6:5
   |
LL |     fn _takes_iterator<T>(iterator: &T)
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:6:5
   |
LL |     fn _takes_iterator<T>(iterator: &T)
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:6:5
   |
LL |     fn _takes_iterator<T>(iterator: &T)
   |     ^

error: parameter must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:6:27
   |
LL |     fn _takes_iterator<T>(iterator: &T)
   |                           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:8:17
   |
LL |         for<'a> &'a T: IntoIterator<Item = &'a String>,
   |                 ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:8:44
   |
LL |         for<'a> &'a T: IntoIterator<Item = &'a String>,
   |                                            ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:6:37
   |
LL |     fn _takes_iterator<T>(iterator: &T)
   |                                     ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:14:5
   |
LL |     struct T;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:15:5
   |
LL |     impl IntoIterator for &T {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:15:27
   |
LL |     impl IntoIterator for &T {
   |                           ^^
   |
   = help: use a raw pointer instead: `*const`

error: function must be `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:18:9
   |
LL |         fn into_iter(self) -> Self::IntoIter {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:18:9
   |
LL |         fn into_iter(self) -> Self::IntoIter {
   |         ^

error: parameter must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:18:22
   |
LL |         fn into_iter(self) -> Self::IntoIter {
   |                      ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:27:9
   |
LL |     let r = &t;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:27:13
   |
LL |     let r = &t;
   |             ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:33:9
   |
LL |     let rr = &&t;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:33:14
   |
LL |     let rr = &&t;
   |              ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:33:15
   |
LL |     let rr = &&t;
   |               ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:36:9
   |
LL |     let mr = &mut t;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:36:14
   |
LL |     let mr = &mut t;
   |              ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:40:5
   |
LL |     struct U;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:41:5
   |
LL |     impl IntoIterator for &mut U {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:41:27
   |
LL |     impl IntoIterator for &mut U {
   |                           ^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: function must be `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:44:9
   |
LL |         fn into_iter(self) -> Self::IntoIter {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:44:9
   |
LL |         fn into_iter(self) -> Self::IntoIter {
   |         ^

error: parameter must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:44:22
   |
LL |         fn into_iter(self) -> Self::IntoIter {
   |                      ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:53:9
   |
LL |     let mr = &mut u;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:53:14
   |
LL |     let mr = &mut u;
   |              ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:58:5
   |
LL |     struct S;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:59:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:61:13
   |
LL |         pub fn into_iter<T>(self) -> I<T> {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:61:13
   |
LL |         pub fn into_iter<T>(self) -> I<T> {
   |             ^

error: parameter must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:61:29
   |
LL |         pub fn into_iter<T>(self) -> I<T> {
   |                             ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:66:5
   |
LL |     struct I<T>(T);
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/explicit_into_iter_loop.rs:67:5
   |
LL |     impl<T> Iterator for I<T> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:69:9
   |
LL |         fn next(&mut self) -> Option<Self::Item> {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/explicit_into_iter_loop.rs:69:9
   |
LL |         fn next(&mut self) -> Option<Self::Item> {
   |         ^

error: parameter must be `mut`
  --> tests/ui/explicit_into_iter_loop.rs:69:22
   |
LL |         fn next(&mut self) -> Option<Self::Item> {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/explicit_into_iter_loop.rs:69:17
   |
LL |         fn next(&mut self) -> Option<Self::Item> {
   |                 ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 40 previous errors

