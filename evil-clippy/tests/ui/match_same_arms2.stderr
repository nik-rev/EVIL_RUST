error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:10:1
   |
LL | fn bar<T>(_: T) {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms2.rs:10:1
   |
LL | fn bar<T>(_: T) {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms2.rs:10:1
   |
LL | fn bar<T>(_: T) {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:11:1
   |
LL | fn foo() -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms2.rs:11:1
   |
LL | fn foo() -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms2.rs:11:1
   |
LL | fn foo() -> bool {
   | ^

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:15:1
   |
LL | fn match_same_arms() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms2.rs:15:1
   |
LL | fn match_same_arms() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms2.rs:15:1
   |
LL | fn match_same_arms() {
   | ^

error: variable must be `mut`
  --> tests/ui/match_same_arms2.rs:108:9
   |
LL |     let x: Result<i32, &str> = Ok(3);
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/match_same_arms2.rs:108:24
   |
LL |     let x: Result<i32, &str> = Ok(3);
   |                        ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:151:5
   |
LL |     macro_rules! empty {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:183:1
   |
LL | fn match_expr_like_matches_macro_priority() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms2.rs:183:1
   |
LL | fn match_expr_like_matches_macro_priority() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms2.rs:183:1
   |
LL | fn match_expr_like_matches_macro_priority() {
   | ^

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:184:5
   |
LL |     enum E {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/match_same_arms2.rs:189:9
   |
LL |     let x = E::A;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/match_same_arms2.rs:190:9
   |
LL |     let _ans = match x {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:197:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms2.rs:197:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms2.rs:197:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:206:5
   |
LL |     enum Foo {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:246:5
   |
LL |     struct Bar {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:279:1
   |
LL | mod with_lifetime {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:280:5
   |
LL |     enum MaybeStaticStr<'a> {
   |     ^ help: make this item public: `pub`

error: references are not allowed
  --> tests/ui/match_same_arms2.rs:281:16
   |
LL |         Static(&'static str),
   |                ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/match_same_arms2.rs:282:18
   |
LL |         Borrowed(&'a str),
   |                  ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/match_same_arms2.rs:285:5
   |
LL |     impl<'a> MaybeStaticStr<'a> {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms2.rs:286:9
   |
LL |         fn get(&self) -> &'a str {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms2.rs:286:9
   |
LL |         fn get(&self) -> &'a str {
   |         ^

error: parameter must be `mut`
  --> tests/ui/match_same_arms2.rs:286:17
   |
LL |         fn get(&self) -> &'a str {
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/match_same_arms2.rs:286:16
   |
LL |         fn get(&self) -> &'a str {
   |                ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/match_same_arms2.rs:286:26
   |
LL |         fn get(&self) -> &'a str {
   |                          ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 31 previous errors

