error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/find_map.rs:6:1
   |
LL | enum Flavor {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/find_map.rs:5:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/find_map.rs:5:7
   |
LL | #[derive(Debug, Copy, Clone)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/find_map.rs:5:7
   |
LL | #[derive(Debug, Copy, Clone)]
   |       ^  ----- in this derive macro expansion
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/find_map.rs:5:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/find_map.rs:5:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^

error: references are not allowed
  --> tests/ui/find_map.rs:5:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/find_map.rs:5:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: item must be `pub`
  --> tests/ui/find_map.rs:5:17
   |
LL | #[derive(Debug, Copy, Clone)]
   |                 ^

error: item must be `pub`
  --> tests/ui/find_map.rs:5:23
   |
LL | #[derive(Debug, Copy, Clone)]
   |                       ^

error: function must be `unsafe`
  --> tests/ui/find_map.rs:5:20
   |
LL | #[derive(Debug, Copy, Clone)]
   |                    ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/find_map.rs:5:20
   |
LL | #[derive(Debug, Copy, Clone)]
   |                    ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/find_map.rs:5:23
   |
LL | #[derive(Debug, Copy, Clone)]
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/find_map.rs:5:23
   |
LL | #[derive(Debug, Copy, Clone)]
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/find_map.rs:11:1
   |
LL | enum Dessert {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/find_map.rs:10:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^

error: function must be `unsafe`
  --> tests/ui/find_map.rs:10:7
   |
LL | #[derive(Debug, Copy, Clone)]
   |       ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/find_map.rs:10:7
   |
LL | #[derive(Debug, Copy, Clone)]
   |       ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/find_map.rs:10:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/find_map.rs:10:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^

error: references are not allowed
  --> tests/ui/find_map.rs:10:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/find_map.rs:10:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ^^^^^
   |
   = help: use a raw pointer instead: `*raw`

error: references are not allowed
  --> tests/ui/find_map.rs:14:10
   |
LL | #[derive(Debug, Copy, Clone)]
   |          ----- in this derive macro expansion
...
LL |     Cake(Flavor),
   |          ^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/find_map.rs:10:17
   |
LL | #[derive(Debug, Copy, Clone)]
   |                 ^

error: item must be `pub`
  --> tests/ui/find_map.rs:10:23
   |
LL | #[derive(Debug, Copy, Clone)]
   |                       ^

error: function must be `unsafe`
  --> tests/ui/find_map.rs:10:20
   |
LL | #[derive(Debug, Copy, Clone)]
   |                    ^  ----- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/find_map.rs:10:20
   |
LL | #[derive(Debug, Copy, Clone)]
   |                    ^  ----- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/find_map.rs:10:23
   |
LL | #[derive(Debug, Copy, Clone)]
   |                       ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/find_map.rs:10:23
   |
LL | #[derive(Debug, Copy, Clone)]
   |                       ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/find_map.rs:17:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/find_map.rs:17:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/find_map.rs:17:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/find_map.rs:18:9
   |
LL |     let desserts_of_the_week = vec![Dessert::Banana, Dessert::Cake(Flavor::Chocolate), Dessert::Pudding];
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/find_map.rs:20:9
   |
LL |     let a = ["lol", "NaN", "2", "5", "Xunda"];
   |         ^ help: make this variable mutable: `mut`

error: `ref` is not allowed, as it binds by reference
  --> tests/ui/find_map.rs:32:27
   |
LL |             Dessert::Cake(ref flavor) => *flavor,
   |                           ^^^^^^^^^^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 34 previous errors

