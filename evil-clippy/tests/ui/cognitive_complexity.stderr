error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:11:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:11:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:11:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:98:1
   |
LL | fn kaboom() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:98:1
   |
LL | fn kaboom() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:98:1
   |
LL | fn kaboom() {
   | ^

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:101:9
   |
LL |     let n = 0;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:121:1
   |
LL | fn bloo() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:121:1
   |
LL | fn bloo() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:121:1
   |
LL | fn bloo() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:148:1
   |
LL | fn lots_of_short_circuits() -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:148:1
   |
LL | fn lots_of_short_circuits() -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:148:1
   |
LL | fn lots_of_short_circuits() -> bool {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:153:1
   |
LL | fn lots_of_short_circuits2() -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:153:1
   |
LL | fn lots_of_short_circuits2() -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:153:1
   |
LL | fn lots_of_short_circuits2() -> bool {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:158:1
   |
LL | fn baa() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:158:1
   |
LL | fn baa() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:158:1
   |
LL | fn baa() {
   | ^

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:161:9
   |
LL |     let x = || match 99 {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:179:1
   |
LL | fn bar() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:179:1
   |
LL | fn bar() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:179:1
   |
LL | fn bar() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:192:1
   |
LL | #[test]
   | ------- in this procedural macro expansion
...
LL | fn dont_warn_on_tests() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:192:1
   |
LL | fn dont_warn_on_tests() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:192:1
   |
LL | fn dont_warn_on_tests() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:192:1
   |
LL | fn dont_warn_on_tests() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:202:1
   |
LL | fn barr() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:202:1
   |
LL | fn barr() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:202:1
   |
LL | fn barr() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:214:1
   |
LL | fn barr2() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:214:1
   |
LL | fn barr2() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:214:1
   |
LL | fn barr2() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:232:1
   |
LL | fn barrr() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:232:1
   |
LL | fn barrr() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:232:1
   |
LL | fn barrr() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:244:1
   |
LL | fn barrr2() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:244:1
   |
LL | fn barrr2() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:244:1
   |
LL | fn barrr2() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:262:1
   |
LL | fn barrrr() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:262:1
   |
LL | fn barrrr() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:262:1
   |
LL | fn barrrr() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:274:1
   |
LL | fn barrrr2() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:274:1
   |
LL | fn barrrr2() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:274:1
   |
LL | fn barrrr2() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:292:1
   |
LL | fn cake() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:292:1
   |
LL | fn cake() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:292:1
   |
LL | fn cake() {
   | ^

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:304:5
   |
LL | pub fn read_file(input_path: &str) -> String {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:304:5
   |
LL | pub fn read_file(input_path: &str) -> String {
   |     ^

error: parameter must be `mut`
  --> tests/ui/cognitive_complexity.rs:304:18
   |
LL | pub fn read_file(input_path: &str) -> String {
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:304:30
   |
LL | pub fn read_file(input_path: &str) -> String {
   |                              ^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:310:37
   |
LL |     let mut file = match File::open(&Path::new(input_path)) {
   |                                     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:319:28
   |
LL |     match file.read_to_end(&mut bytes) {
   |                            ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:334:1
   |
LL | enum Void {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:337:1
   |
LL | fn void(void: Void) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:337:1
   |
LL | fn void(void: Void) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:337:1
   |
LL | fn void(void: Void) {
   | ^

error: parameter must be `mut`
  --> tests/ui/cognitive_complexity.rs:337:9
   |
LL | fn void(void: Void) {
   |         ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:346:1
   |
LL | fn mcarton_sees_all() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:346:1
   |
LL | fn mcarton_sees_all() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:346:1
   |
LL | fn mcarton_sees_all() {
   | ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:352:1
   |
LL | fn try_() -> Result<i32, &'static str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:352:1
   |
LL | fn try_() -> Result<i32, &'static str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:352:1
   |
LL | fn try_() -> Result<i32, &'static str> {
   | ^

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:352:26
   |
LL | fn try_() -> Result<i32, &'static str> {
   |                          ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:360:1
   |
LL | fn try_again() -> Result<i32, &'static str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:360:1
   |
LL | fn try_again() -> Result<i32, &'static str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:360:1
   |
LL | fn try_again() -> Result<i32, &'static str> {
   | ^

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:360:31
   |
LL | fn try_again() -> Result<i32, &'static str> {
   |                               ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:376:1
   |
LL | fn early() -> Result<i32, &'static str> {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:376:1
   |
LL | fn early() -> Result<i32, &'static str> {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:376:1
   |
LL | fn early() -> Result<i32, &'static str> {
   | ^

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:376:27
   |
LL | fn early() -> Result<i32, &'static str> {
   |                           ^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:390:1
   |
LL | fn early_ret() -> i32 {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:390:1
   |
LL | fn early_ret() -> i32 {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:390:1
   |
LL | fn early_ret() -> i32 {
   | ^

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:393:9
   |
LL |     let a = if true { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:394:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:395:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:396:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:397:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:398:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:399:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:400:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:401:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:402:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:403:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:404:9
   |
LL |     let a = if a < 99 { 42 } else { return 0; };
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:412:1
   |
LL | fn closures() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:412:1
   |
LL | fn closures() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:412:1
   |
LL | fn closures() {
   | ^

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:413:9
   |
LL |     let x = |a: i32, b: i32| -> i32 {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:424:1
   |
LL | struct Moo;
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:427:1
   |
LL | impl Moo {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:428:5
   |
LL |     fn moo(&self) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:428:5
   |
LL |     fn moo(&self) {
   |     ^

error: parameter must be `mut`
  --> tests/ui/cognitive_complexity.rs:428:13
   |
LL |     fn moo(&self) {
   |             ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:428:12
   |
LL |     fn moo(&self) {
   |            ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:438:1
   |
LL | mod issue9300 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:439:5
   |
LL |     async fn a() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:439:11
   |
LL |     async fn a() {
   |           ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:439:11
   |
LL |     async fn a() {
   |           ^

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:442:13
   |
LL |         let a = 0;
   |             ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:447:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:448:19
   |
LL |         pub async fn async_method() {
   |                   ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:448:19
   |
LL |         pub async fn async_method() {
   |                   ^

error: variable must be `mut`
  --> tests/ui/cognitive_complexity.rs:451:17
   |
LL |             let a = 0;
   |                 ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:458:1
   |
LL | mod issue14422 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:459:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:459:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:459:5
   |
LL |     fn foo() {
   |     ^

error: item must be `pub`
  --> tests/ui/cognitive_complexity.rs:466:5
   |
LL |     fn bar() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/cognitive_complexity.rs:466:5
   |
LL |     fn bar() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/cognitive_complexity.rs:466:5
   |
LL |     fn bar() {
   |     ^

error: function must be `unsafe`
   |
   = help: make this function unsafe: `unsafe`

error: references are not allowed
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/cognitive_complexity.rs:192:1
   |
LL |   #[test]
   |   ------- in this procedural macro expansion
...
LL | / fn dont_warn_on_tests() {
LL | |
LL | |
LL | |     match 99 {
...  |
LL | | }
   | |_^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 94 previous errors

