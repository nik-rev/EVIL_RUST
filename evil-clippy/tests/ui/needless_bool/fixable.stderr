error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:16:1
   |
LL | macro_rules! bool_comparison_trigger {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:38:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:38:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:38:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:39:9
   |
LL |     let x = true;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:40:9
   |
LL |     let y = false;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:59:9
   |
LL |     let a = 0;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:60:9
   |
LL |     let b = 1;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:120:1
   |
LL | fn bool_ret3(x: bool) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:120:1
   |
LL | fn bool_ret3(x: bool) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:120:1
   |
LL | fn bool_ret3(x: bool) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:120:14
   |
LL | fn bool_ret3(x: bool) -> bool {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:129:1
   |
LL | fn bool_ret4(x: bool) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:129:1
   |
LL | fn bool_ret4(x: bool) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:129:1
   |
LL | fn bool_ret4(x: bool) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:129:14
   |
LL | fn bool_ret4(x: bool) -> bool {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:138:1
   |
LL | fn bool_ret5(x: bool, y: bool) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:138:1
   |
LL | fn bool_ret5(x: bool, y: bool) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:138:1
   |
LL | fn bool_ret5(x: bool, y: bool) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:138:14
   |
LL | fn bool_ret5(x: bool, y: bool) -> bool {
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:138:23
   |
LL | fn bool_ret5(x: bool, y: bool) -> bool {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:147:1
   |
LL | fn bool_ret6(x: bool, y: bool) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:147:1
   |
LL | fn bool_ret6(x: bool, y: bool) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:147:1
   |
LL | fn bool_ret6(x: bool, y: bool) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:147:14
   |
LL | fn bool_ret6(x: bool, y: bool) -> bool {
   |              ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:147:23
   |
LL | fn bool_ret6(x: bool, y: bool) -> bool {
   |                       ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:156:1
   |
LL | fn needless_bool(x: bool) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:156:1
   |
LL | fn needless_bool(x: bool) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:156:1
   |
LL | fn needless_bool(x: bool) {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:156:18
   |
LL | fn needless_bool(x: bool) {
   |                  ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:161:1
   |
LL | fn needless_bool2(x: bool) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:161:1
   |
LL | fn needless_bool2(x: bool) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:161:1
   |
LL | fn needless_bool2(x: bool) {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:161:19
   |
LL | fn needless_bool2(x: bool) {
   |                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:166:1
   |
LL | fn needless_bool3(x: bool) {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:166:1
   |
LL | fn needless_bool3(x: bool) {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:166:1
   |
LL | fn needless_bool3(x: bool) {
   | ^

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:166:19
   |
LL | fn needless_bool3(x: bool) {
   |                   ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:19:18
   |
LL |           #[derive(Clone)]
   |                    ^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = note: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:19:15
   |
LL |           #[derive(Clone)]
   |                 ^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:19:15
   |
LL |           #[derive(Clone)]
   |                 ^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   = note: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:19:18
   |
LL |         #[derive(Clone)]
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/needless_bool/fixable.rs:19:18
   |
LL |           #[derive(Clone)]
   |                    ^^^^^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/needless_bool/fixable.rs:21:15
   |
LL |               $($i: (Cell<bool>, bool, bool)),+
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/needless_bool/fixable.rs:21:15
   |
LL |               $($i: (Cell<bool>, bool, bool)),+
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/needless_bool/fixable.rs:21:15
   |
LL |               $($i: (Cell<bool>, bool, bool)),+
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
   = note: this error originates in the derive macro `Clone` which comes from the expansion of the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:25:9
   |
LL |           impl Trigger {
   |           ^ help: make this item public: `pub`
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = note: this error originates in the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:26:17
   |
LL |               pub fn trigger(&self, key: &str) -> bool {
   |                   ^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:26:17
   |
LL |               pub fn trigger(&self, key: &str) -> bool {
   |                   ^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   = note: this error originates in the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:26:29
   |
LL |               pub fn trigger(&self, key: &str) -> bool {
   |                               ^ help: make this parameter mutable: `mut`
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = note: this error originates in the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:26:35
   |
LL |               pub fn trigger(&self, key: &str) -> bool {
   |                                     ^ help: make this parameter mutable: `mut`
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = note: this error originates in the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/needless_bool/fixable.rs:26:28
   |
LL |               pub fn trigger(&self, key: &str) -> bool {
   |                              ^^^^^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/needless_bool/fixable.rs:26:40
   |
LL |               pub fn trigger(&self, key: &str) -> bool {
   |                                          ^^^^
...
LL | /     bool_comparison_trigger! {
LL | |         test_one:   false, false;
LL | |         test_three: false, false;
LL | |         test_two:   true, true;
LL | |     }
   | |_____- in this macro invocation
   |
   = help: use a raw pointer instead: `*const`
   = note: this error originates in the macro `bool_comparison_trigger` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:179:1
   |
LL | fn needless_bool_in_the_suggestion_wraps_the_predicate_of_if_else_statement_in_brackets() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:179:1
   |
LL | fn needless_bool_in_the_suggestion_wraps_the_predicate_of_if_else_statement_in_brackets() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:179:1
   |
LL | fn needless_bool_in_the_suggestion_wraps_the_predicate_of_if_else_statement_in_brackets() {
   | ^

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:180:9
   |
LL |     let b = false;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:181:9
   |
LL |     let returns_bool = || false;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:183:9
   |
LL |     let x = if b {
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:193:1
   |
LL | unsafe fn no(v: u8) -> u8 {
   | ^ help: make this item public: `pub`

error: parameter must be `mut`
  --> tests/ui/needless_bool/fixable.rs:193:14
   |
LL | unsafe fn no(v: u8) -> u8 {
   |              ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:198:1
   |
LL | fn needless_bool_condition() -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:198:1
   |
LL | fn needless_bool_condition() -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:198:1
   |
LL | fn needless_bool_condition() -> bool {
   | ^

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:205:9
   |
LL |     let _brackets_unneeded = if unsafe { no(4) } & 1 != 0 { true } else { false };
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:207:5
   |
LL |     fn foo() -> bool {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:207:5
   |
LL |     fn foo() -> bool {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:207:5
   |
LL |     fn foo() -> bool {
   |     ^

error: item must be `pub`
  --> tests/ui/needless_bool/fixable.rs:216:1
   |
LL | fn issue12846() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/needless_bool/fixable.rs:216:1
   |
LL | fn issue12846() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/needless_bool/fixable.rs:216:1
   |
LL | fn issue12846() {
   | ^

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:217:9
   |
LL |     let a = true;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:218:9
   |
LL |     let b = false;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:221:9
   |
LL |     let _x = if a && b { true } else { false }.then(|| todo!());
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:223:9
   |
LL |     let _x = if a && b { true } else { false } as u8;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/needless_bool/fixable.rs:227:9
   |
LL |     let _x = if a { true } else { false }.then(|| todo!());
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 66 previous errors

