error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/eq_op.rs:5:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/eq_op.rs:5:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eq_op.rs:5:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/eq_op.rs:23:9
   |
LL |     let x = f32::NAN;
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/eq_op.rs:79:9
   |
LL |     let a: u32 = 0;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eq_op.rs:80:9
   |
LL |     let b: u32 = 0;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eq_op.rs:104:5
   |
LL |     const A: u32 = 10;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:105:5
   |
LL |     const B: u32 = 10;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:106:5
   |
LL |     const C: u32 = A / B; // ok, different named constants
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:107:5
   |
LL |     const D: u32 = A / A;
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:111:1
   |
LL | macro_rules! check_if_named_foo {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:121:1
   |
LL | macro_rules! bool_macro {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:127:1
   |
LL | fn check_ignore_macro() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eq_op.rs:127:1
   |
LL | fn check_ignore_macro() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eq_op.rs:127:1
   |
LL | fn check_ignore_macro() {
   | ^

error: item must be `pub`
  --> tests/ui/eq_op.rs:133:1
   |
LL | struct Nested {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/eq_op.rs:137:1
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eq_op.rs:137:1
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eq_op.rs:137:1
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   | ^

error: parameter must be `mut`
  --> tests/ui/eq_op.rs:137:17
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   |                 ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/eq_op.rs:137:30
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   |                              ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/eq_op.rs:137:21
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   |                     ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/eq_op.rs:137:34
   |
LL | fn check_nested(n1: &Nested, n2: &Nested) -> bool {
   |                                  ^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/eq_op.rs:144:1
   |
LL | #[test]
   | ------- in this procedural macro expansion
LL | fn eq_op_shouldnt_trigger_in_tests() {
   | ^

error: item must be `pub`
  --> tests/ui/eq_op.rs:144:1
   |
LL | fn eq_op_shouldnt_trigger_in_tests() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eq_op.rs:144:1
   |
LL | fn eq_op_shouldnt_trigger_in_tests() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eq_op.rs:144:1
   |
LL | fn eq_op_shouldnt_trigger_in_tests() {
   | ^

error: variable must be `mut`
  --> tests/ui/eq_op.rs:145:9
   |
LL |     let a = 1;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eq_op.rs:146:9
   |
LL |     let result = a + 1 == 1 + a;
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/eq_op.rs:151:1
   |
LL | #[test]
   | ------- in this procedural macro expansion
LL | fn eq_op_macros_shouldnt_trigger_in_tests() {
   | ^

error: item must be `pub`
  --> tests/ui/eq_op.rs:151:1
   |
LL | fn eq_op_macros_shouldnt_trigger_in_tests() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/eq_op.rs:151:1
   |
LL | fn eq_op_macros_shouldnt_trigger_in_tests() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/eq_op.rs:151:1
   |
LL | fn eq_op_macros_shouldnt_trigger_in_tests() {
   | ^

error: variable must be `mut`
  --> tests/ui/eq_op.rs:152:9
   |
LL |     let a = 1;
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/eq_op.rs:153:9
   |
LL |     let b = 2;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/eq_op.rs:154:5
   |
LL |     assert_eq!(a, a);
   |     ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:154:5
   |
LL |     assert_eq!(a, a);
   |     ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/eq_op.rs:154:5
   |
LL |     assert_eq!(a, a);
   |     ^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:154:5
   |
LL |     assert_eq!(a, a);
   |     ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:154:5
   |
LL |     assert_eq!(a, a);
   |     ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:155:5
   |
LL |     assert_eq!(a + b, b + a);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:155:5
   |
LL |     assert_eq!(a + b, b + a);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/eq_op.rs:155:5
   |
LL |     assert_eq!(a + b, b + a);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:155:5
   |
LL |     assert_eq!(a + b, b + a);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/eq_op.rs:155:5
   |
LL |     assert_eq!(a + b, b + a);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
   |
   = help: make this function unsafe: `unsafe`

error: references are not allowed
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eq_op.rs:151:1
   |
LL |   #[test]
   |   ------- in this procedural macro expansion
LL | / fn eq_op_macros_shouldnt_trigger_in_tests() {
LL | |     let a = 1;
LL | |     let b = 2;
LL | |     assert_eq!(a, a);
LL | |     assert_eq!(a + b, b + a);
LL | | }
   | |_^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/eq_op.rs:144:1
   |
LL |   #[test]
   |   ------- in this procedural macro expansion
LL | / fn eq_op_shouldnt_trigger_in_tests() {
LL | |     let a = 1;
LL | |     let result = a + 1 == 1 + a;
LL | |     assert!(result);
LL | | }
   | |_^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 48 previous errors

