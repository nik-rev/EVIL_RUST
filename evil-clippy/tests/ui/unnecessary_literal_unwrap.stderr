error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:10:1
   |
LL | fn unwrap_option_some() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:10:1
   |
LL | fn unwrap_option_some() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:10:1
   |
LL | fn unwrap_option_some() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:11:9
   |
LL |     let _val = Some(1).unwrap();
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:13:9
   |
LL |     let _val = Some(1).expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:23:1
   |
LL | fn unwrap_option_none() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:23:1
   |
LL | fn unwrap_option_none() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:23:1
   |
LL | fn unwrap_option_none() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:24:9
   |
LL |     let _val = None::<()>.unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:26:9
   |
LL |     let _val = None::<()>.expect("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:28:9
   |
LL |     let _val: String = None.unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:30:9
   |
LL |     let _val: u16 = None.unwrap_or(234);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:32:9
   |
LL |     let _val: u16 = None.unwrap_or_else(|| 234);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:34:9
   |
LL |     let _val: u16 = None.unwrap_or_else(|| { 234 });
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:36:9
   |
LL |     let _val: u16 = None.unwrap_or_else(|| -> u16 { 234 });
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:55:1
   |
LL | fn unwrap_result_ok() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:55:1
   |
LL | fn unwrap_result_ok() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:55:1
   |
LL | fn unwrap_result_ok() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:56:9
   |
LL |     let _val = Ok::<_, ()>(1).unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:58:9
   |
LL |     let _val = Ok::<_, ()>(1).expect("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:60:9
   |
LL |     let _val = Ok::<_, ()>(1).unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:62:9
   |
LL |     let _val = Ok::<_, ()>(1).expect_err("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:75:1
   |
LL | fn unwrap_result_err() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:75:1
   |
LL | fn unwrap_result_err() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:75:1
   |
LL | fn unwrap_result_err() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:76:9
   |
LL |     let _val = Err::<(), _>(1).unwrap_err();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:78:9
   |
LL |     let _val = Err::<(), _>(1).expect_err("this never happens");
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:80:9
   |
LL |     let _val = Err::<(), _>(1).unwrap();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:82:9
   |
LL |     let _val = Err::<(), _>(1).expect("this always happens");
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:95:1
   |
LL | fn unwrap_methods_option() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:95:1
   |
LL | fn unwrap_methods_option() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:95:1
   |
LL | fn unwrap_methods_option() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:96:9
   |
LL |     let _val = Some(1).unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:98:9
   |
LL |     let _val = Some(1).unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:100:9
   |
LL |     let _val = Some(1).unwrap_or_else(|| 2);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:111:1
   |
LL | fn unwrap_methods_result() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:111:1
   |
LL | fn unwrap_methods_result() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:111:1
   |
LL | fn unwrap_methods_result() {
   | ^

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:112:9
   |
LL |     let _val = Ok::<_, ()>(1).unwrap_or(2);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:114:9
   |
LL |     let _val = Ok::<_, ()>(1).unwrap_or_default();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:116:9
   |
LL |     let _val = Ok::<_, ()>(1).unwrap_or_else(|_| 2);
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:127:1
   |
LL | fn unwrap_from_binding() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:127:1
   |
LL | fn unwrap_from_binding() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:127:1
   |
LL | fn unwrap_from_binding() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:128:5
   |
LL |     macro_rules! from_macro {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/unnecessary_literal_unwrap.rs:133:9
   |
LL |     let val = from_macro!();
   |         ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:137:1
   |
LL | fn unwrap_unchecked() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:137:1
   |
LL | fn unwrap_unchecked() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:137:1
   |
LL | fn unwrap_unchecked() {
   | ^

error: references are not allowed
  --> tests/ui/unnecessary_literal_unwrap.rs:140:53
   |
LL |     let _ = unsafe { Some(1).unwrap_unchecked() + *(&1 as *const i32) }; // needs to keep the unsafe block
   |                                                     ^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/unnecessary_literal_unwrap.rs:147:60
   |
LL |     let _ = unsafe { Ok::<_, ()>(1).unwrap_unchecked() + *(&1 as *const i32) };
   |                                                            ^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/unnecessary_literal_unwrap.rs:155:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:155:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_literal_unwrap.rs:155:1
   |
LL | fn main() {
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 49 previous errors

