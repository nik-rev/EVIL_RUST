error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:4:1
   |
LL | fn ok() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:4:1
   |
LL | fn ok() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:4:1
   |
LL | fn ok() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:5:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:5:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:5:5
   |
LL |     fn foo() {
   |     ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:11:1
   |
LL | fn last() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:11:1
   |
LL | fn last() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:11:1
   |
LL | fn last() {
   | ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:13:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:13:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:13:5
   |
LL |     fn foo() {
   |     ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:20:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:20:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:20:1
   |
LL | fn main() {
   | ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:22:5
   |
LL |     fn foo() {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:22:5
   |
LL |     fn foo() {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:22:5
   |
LL |     fn foo() {
   |     ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:30:1
   |
LL | fn mac() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:30:1
   |
LL | fn mac() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:30:1
   |
LL | fn mac() {
   | ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:34:5
   |
LL |     macro_rules! b {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:37:13
   |
LL |             fn say_something() {
   |             ^ help: make this item public: `pub`
...
LL |     b!();
   |     ---- in this macro invocation
   |
   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:37:13
   |
LL |             fn say_something() {
   |             ^
...
LL |     b!();
   |     ---- in this macro invocation
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:37:13
   |
LL |             fn say_something() {
   |             ^
...
LL |     b!();
   |     ---- in this macro invocation
   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:47:1
   |
LL | fn semicolon() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:47:1
   |
LL | fn semicolon() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:47:1
   |
LL | fn semicolon() {
   | ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:48:5
   |
LL |     struct S {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:51:5
   |
LL |     impl S {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:52:9
   |
LL |         fn new(a: u32) -> Self {
   |         ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:52:9
   |
LL |         fn new(a: u32) -> Self {
   |         ^

error: parameter must be `mut`
  --> tests/ui/items_after_statement.rs:52:16
   |
LL |         fn new(a: u32) -> Self {
   |                ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:60:1
   |
LL | fn item_from_macro() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:60:1
   |
LL | fn item_from_macro() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:60:1
   |
LL | fn item_from_macro() {
   | ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:61:5
   |
LL |     macro_rules! static_assert_size {
   |     ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:63:13
   |
LL |             const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];
   |             ^ help: make this item public: `pub`
...
LL |     static_assert_size!(u32, 4);
   |     --------------------------- in this macro invocation
   |
   = note: this error originates in the macro `static_assert_size` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:71:1
   |
LL | fn allow_attribute() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/items_after_statement.rs:71:1
   |
LL | fn allow_attribute() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/items_after_statement.rs:71:1
   |
LL | fn allow_attribute() {
   | ^

error: item must be `pub`
  --> tests/ui/items_after_statement.rs:74:5
   |
LL |     const _: usize = 1;
   |     ^ help: make this item public: `pub`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 34 previous errors

