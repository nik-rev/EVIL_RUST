error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:3:1
   |
LL | fn is_any(acc: bool, x: usize) -> bool {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:3:1
   |
LL | fn is_any(acc: bool, x: usize) -> bool {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:3:1
   |
LL | fn is_any(acc: bool, x: usize) -> bool {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/unnecessary_fold.rs:3:11
   |
LL | fn is_any(acc: bool, x: usize) -> bool {
   |           ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/unnecessary_fold.rs:3:22
   |
LL | fn is_any(acc: bool, x: usize) -> bool {
   |                      ^ help: make this parameter mutable: `mut`

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:8:1
   |
LL | fn unnecessary_fold() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:8:1
   |
LL | fn unnecessary_fold() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:8:1
   |
LL | fn unnecessary_fold() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:27:1
   |
LL | fn unnecessary_fold_span_for_multi_element_chain() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:27:1
   |
LL | fn unnecessary_fold_span_for_multi_element_chain() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:27:1
   |
LL | fn unnecessary_fold_span_for_multi_element_chain() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:33:1
   |
LL | fn unnecessary_fold_should_ignore() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:33:1
   |
LL | fn unnecessary_fold_should_ignore() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:33:1
   |
LL | fn unnecessary_fold_should_ignore() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:55:1
   |
LL | fn unnecessary_fold_over_multiple_lines() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:55:1
   |
LL | fn unnecessary_fold_over_multiple_lines() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:55:1
   |
LL | fn unnecessary_fold_over_multiple_lines() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:63:1
   |
LL | fn issue10000() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:63:1
   |
LL | fn issue10000() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:63:1
   |
LL | fn issue10000() {
   | ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:67:5
   |
LL |     fn anything<T>(_: T) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:67:5
   |
LL |     fn anything<T>(_: T) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:67:5
   |
LL |     fn anything<T>(_: T) {}
   |     ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:68:5
   |
LL |     fn num(_: i32) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:68:5
   |
LL |     fn num(_: i32) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:68:5
   |
LL |     fn num(_: i32) {}
   |     ^

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:69:5
   |
LL |     fn smoketest_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:69:5
   |
LL |     fn smoketest_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:69:5
   |
LL |     fn smoketest_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {
   |     ^

error: references are not allowed
  --> tests/ui/unnecessary_fold.rs:71:9
   |
LL |         assert_eq!(map.values().fold(0, |x, y| x + y), 0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/unnecessary_fold.rs:71:9
   |
LL |         assert_eq!(map.values().fold(0, |x, y| x + y), 0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/unnecessary_fold.rs:71:9
   |
LL |         assert_eq!(map.values().fold(0, |x, y| x + y), 0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/unnecessary_fold.rs:71:9
   |
LL |         assert_eq!(map.values().fold(0, |x, y| x + y), 0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/unnecessary_fold.rs:71:9
   |
LL |         assert_eq!(map.values().fold(0, |x, y| x + y), 0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/unnecessary_fold.rs:96:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/unnecessary_fold.rs:96:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/unnecessary_fold.rs:96:1
   |
LL | fn main() {}
   | ^

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 31 previous errors

