error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:9:1
   |
LL | fn main() {}
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:9:1
   |
LL | fn main() {}
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:9:1
   |
LL | fn main() {}
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:11:1
   |
LL | fn syntax_match() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:11:1
   |
LL | fn syntax_match() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:11:1
   |
LL | fn syntax_match() {
   | ^

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:12:9
   |
LL |     let ref_value = &Some(&Some(42));
   |         ^ help: make this variable mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:12:21
   |
LL |     let ref_value = &Some(&Some(42));
   |                     ^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:12:27
   |
LL |     let ref_value = &Some(&Some(42));
   |                           ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:32:1
   |
LL | fn syntax_if_let() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:32:1
   |
LL | fn syntax_if_let() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:32:1
   |
LL | fn syntax_if_let() {
   | ^

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:33:9
   |
LL |     let ref_value = &Some(42);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:33:21
   |
LL |     let ref_value = &Some(42);
   |                     ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:44:1
   |
LL | fn syntax_while_let() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:44:1
   |
LL | fn syntax_while_let() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:44:1
   |
LL | fn syntax_while_let() {
   | ^

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:45:9
   |
LL |     let ref_value = &Some(42);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:45:21
   |
LL |     let ref_value = &Some(42);
   |                     ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:63:1
   |
LL | fn syntax_for() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:63:1
   |
LL | fn syntax_for() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:63:1
   |
LL | fn syntax_for() {
   | ^

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:64:9
   |
LL |     let ref_value = &Some(23);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:64:21
   |
LL |     let ref_value = &Some(23);
   |                     ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:65:9
   |
LL |     let slice = &[(2, 3), (4, 2)];
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:65:17
   |
LL |     let slice = &[(2, 3), (4, 2)];
   |                 ^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:75:1
   |
LL | fn syntax_let() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:75:1
   |
LL | fn syntax_let() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:75:1
   |
LL | fn syntax_let() {
   | ^

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:76:9
   |
LL |     let ref_value = &(2, 3);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:76:21
   |
LL |     let ref_value = &(2, 3);
   |                     ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:79:10
   |
LL |     let (_n, _m) = ref_value;
   |          ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:79:14
   |
LL |     let (_n, _m) = ref_value;
   |              ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:83:11
   |
LL |     let &(_n, _m) = ref_value;
   |           ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:83:15
   |
LL |     let &(_n, _m) = ref_value;
   |               ^ help: make this variable mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:83:10
   |
LL |     let &(_n, _m) = ref_value;
   |          ^ help: make this parameter mutable: `mut`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:84:10
   |
LL |     let (_n, _m) = *ref_value;
   |          ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:84:14
   |
LL |     let (_n, _m) = *ref_value;
   |              ^ help: make this variable mutable: `mut`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:87:1
   |
LL | fn syntax_fn() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:87:1
   |
LL | fn syntax_fn() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:87:1
   |
LL | fn syntax_fn() {
   | ^

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:89:5
   |
LL |     fn foo((_a, _b): &(i32, i32)) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:89:5
   |
LL |     fn foo((_a, _b): &(i32, i32)) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:89:5
   |
LL |     fn foo((_a, _b): &(i32, i32)) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:89:13
   |
LL |     fn foo((_a, _b): &(i32, i32)) {}
   |             ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:89:17
   |
LL |     fn foo((_a, _b): &(i32, i32)) {}
   |                 ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:89:22
   |
LL |     fn foo((_a, _b): &(i32, i32)) {}
   |                      ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:5
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:5
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:5
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |     ^

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:19
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |                   ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:23
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |                       ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:18
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |                  ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:93:28
   |
LL |     fn foo_ok_1(&(_a, _b): &(i32, i32)) {}
   |                            ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:96:1
   |
LL | fn syntax_closure() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:96:1
   |
LL | fn syntax_closure() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:96:1
   |
LL | fn syntax_closure() {
   | ^

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:97:5
   |
LL |     fn foo<F>(f: F)
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:97:5
   |
LL |     fn foo<F>(f: F)
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:97:5
   |
LL |     fn foo<F>(f: F)
   |     ^

error: parameter must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:97:15
   |
LL |     fn foo<F>(f: F)
   |               ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:99:19
   |
LL |         F: FnOnce(&(i32, i32)),
   |                   ^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:111:1
   |
LL | fn macro_with_expression() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:111:1
   |
LL | fn macro_with_expression() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:111:1
   |
LL | fn macro_with_expression() {
   | ^

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:112:5
   |
LL |     macro_rules! matching_macro {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:117:9
   |
LL |     let value = &Some(23);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:117:17
   |
LL |     let value = &Some(23);
   |                 ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:137:1
   |
LL | fn macro_expansion() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:137:1
   |
LL | fn macro_expansion() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/pattern_type_mismatch/syntax.rs:137:1
   |
LL | fn macro_expansion() {
   | ^

error: item must be `pub`
  --> tests/ui/pattern_type_mismatch/syntax.rs:138:5
   |
LL |     macro_rules! matching_macro {
   |     ^ help: make this item public: `pub`

error: variable must be `mut`
  --> tests/ui/pattern_type_mismatch/syntax.rs:159:9
   |
LL |     let value = &Some(23);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/pattern_type_mismatch/syntax.rs:159:17
   |
LL |     let value = &Some(23);
   |                 ^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 65 previous errors

