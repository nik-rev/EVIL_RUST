error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:5:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:5:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:5:1
   |
LL | fn main() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
   = note: requested on the command line with `-D clippy::missing-mut`
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:7:5
   |
LL | /     thread_local! {
LL | |         static BUF_1: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/missing_const_for_thread_local.rs:13:5
   |
LL | /     thread_local! {
LL | |         static BUF_2: RefCell<String> = const { RefCell::new(String::new()) };
LL | |     }
   | |_____^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: requested on the command line with `-D clippy::reference-used`
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:17:5
   |
LL | /     thread_local! {
LL | |         static SIMPLE:i32 = 1;
LL | |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: references are not allowed
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:23:5
   |
LL | /     thread_local! {
LL | |         static BUF_3_CAN_BE_MADE_CONST: RefCell<String> = RefCell::new(String::new());
LL | |
LL | |         static CONST_MIXED_WITH:i32 = const { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: variable must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:35:42
   |
LL |         static PEEL_ME_MANY: i32 = { let x = 1; x * x };
   |                                          ^ help: make this variable mutable: `mut`

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:31:5
   |
LL | /     thread_local! {
LL | |         static PEEL_ME: i32 = { 1 };
...  |
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:41:1
   |
LL | fn issue_12637() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:41:1
   |
LL | fn issue_12637() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:41:1
   |
LL | fn issue_12637() {
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:48:49
   |
LL |         static STATE_12637_PANIC: Cell<usize> = panic!();
   |                                                 ^^^^^^^^

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:48:49
   |
LL |         static STATE_12637_PANIC: Cell<usize> = panic!();
   |                                                 ^^^^^^^^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:48:49
   |
LL |         static STATE_12637_PANIC: Cell<usize> = panic!();
   |                                                 ^^^^^^^^

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:47:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_PANIC: Cell<usize> = panic!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:53:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_TODO: Cell<usize> = todo!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:59:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNIMPLEMENTED: Cell<usize> = unimplemented!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:65:5
   |
LL | /     thread_local! {
LL | |         static STATE_12637_UNREACHABLE: Cell<usize> = unreachable!();
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:73:1
   |
LL | fn f() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:73:1
   |
LL | fn f() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:73:1
   |
LL | fn f() {
   | ^

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: function must be `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: static must be `mut`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: item must be `pub`
  --> tests/ui/missing_const_for_thread_local.rs:74:5
   |
LL | /     thread_local! {
LL | |         static TLS: i32 = 1;
LL | |     }
   | |_____^
   |
   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 104 previous errors

