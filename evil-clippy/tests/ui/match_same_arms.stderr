error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:10:1
   |
LL | fn match_same_arms() {
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:10:1
   |
LL | fn match_same_arms() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:10:1
   |
LL | fn match_same_arms() {
   | ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:47:1
   |
LL | mod issue4244 {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:48:11
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |           ^  --------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:48:11
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |           ^  --------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:48:14
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |              ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:48:22
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                      ^  ---------- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:48:22
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                      ^  ---------- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:25
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                         ^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:48:37
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                     ^

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:48:34
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                  ^  -- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:48:34
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                  ^  -- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:37
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                     ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:37
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                     ^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:48:38
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                      ^  --- in this derive macro expansion
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:48:38
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                      ^  --- in this derive macro expansion

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^ help: make this parameter mutable: `mut`

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^
   |
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:48:41
   |
LL |     #[derive(PartialEq, PartialOrd, Eq, Ord)]
   |                                         ^^^
   |
   = help: use a raw borrowing instead: `&raw const`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:54:5
   |
LL |     impl CommandInfo {
   |     ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:55:13
   |
LL |         pub fn name(&self) -> String {
   |             ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:55:13
   |
LL |         pub fn name(&self) -> String {
   |             ^

error: parameter must be `mut`
  --> tests/ui/match_same_arms.rs:55:22
   |
LL |         pub fn name(&self) -> String {
   |                      ^ help: make this parameter mutable: `mut`

error: references are not allowed
  --> tests/ui/match_same_arms.rs:55:21
   |
LL |         pub fn name(&self) -> String {
   |                     ^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:65:1
   |
LL | macro_rules! m {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:69:1
   |
LL | macro_rules! foo {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:74:1
   |
LL | macro_rules! bar {
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/match_same_arms.rs:80:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/match_same_arms.rs:80:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/match_same_arms.rs:80:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/match_same_arms.rs:81:9
   |
LL |     let x = 0;
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 50 previous errors

