error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: `-D renamed-and-removed-lints` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(renamed_and_removed_lints)]`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:6:1
   |
LL | type SomeBox = Box<dyn Any>;
   | ^ help: make this item public: `pub`
   |
   = note: requested on the command line with `-D clippy::missing-pub`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:8:1
   |
LL | struct BadBox(Box<dyn Any>);
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:10:1
   |
LL | impl Deref for BadBox {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/type_id_on_box.rs:13:5
   |
LL |     fn deref(&self) -> &Self::Target {
   |     ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/type_id_on_box.rs:13:5
   |
LL |     fn deref(&self) -> &Self::Target {
   |     ^
   = note: `-D clippy::safe-code` implied by `-D clippy::safe-fn`
   = help: to override `-D clippy::safe-fn` add `#[allow(clippy::safe_code)]`

error: parameter must be `mut`
  --> tests/ui/type_id_on_box.rs:13:15
   |
LL |     fn deref(&self) -> &Self::Target {
   |               ^ help: make this parameter mutable: `mut`
   |
   = note: requested on the command line with `-D clippy::missing-mut`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:13:14
   |
LL |     fn deref(&self) -> &Self::Target {
   |              ^^^^^
   |
   = help: use a raw pointer instead: `*const`
   = note: requested on the command line with `-D clippy::reference-used`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:13:24
   |
LL |     fn deref(&self) -> &Self::Target {
   |                        ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:14:9
   |
LL |         &self.0
   |         ^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:18:1
   |
LL | fn existential() -> impl Any {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/type_id_on_box.rs:18:1
   |
LL | fn existential() -> impl Any {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/type_id_on_box.rs:18:1
   |
LL | fn existential() -> impl Any {
   | ^

error: trait must be `unsafe`
  --> tests/ui/type_id_on_box.rs:22:1
   |
LL | trait AnySubTrait: Any {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: make this trait unsafe: `unsafe trait`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:22:1
   |
LL | trait AnySubTrait: Any {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:23:1
   |
LL | impl<T: Any> AnySubTrait for T {}
   | ^ help: make this item public: `pub`

error: item must be `pub`
  --> tests/ui/type_id_on_box.rs:25:1
   |
LL | fn main() {
   | ^ help: make this item public: `pub`

error: function must be `unsafe`
  --> tests/ui/type_id_on_box.rs:25:1
   |
LL | fn main() {
   | ^
   |
help: make this function unsafe: `unsafe`
  --> tests/ui/type_id_on_box.rs:25:1
   |
LL | fn main() {
   | ^

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:27:9
   |
LL |     let ref_dyn: &dyn Any = &42;
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:27:18
   |
LL |     let ref_dyn: &dyn Any = &42;
   |                  ^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:27:29
   |
LL |     let ref_dyn: &dyn Any = &42;
   |                             ^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:30:9
   |
LL |     let any_box: Box<dyn Any> = Box::new(0usize);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:39:9
   |
LL |     let any_box: &Box<dyn Any> = &(Box::new(0usize) as Box<dyn Any>);
   |         ^ help: make this variable mutable: `mut`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:39:18
   |
LL |     let any_box: &Box<dyn Any> = &(Box::new(0usize) as Box<dyn Any>);
   |                  ^^^^^^^^^^^^^
   |
   = help: use a raw pointer instead: `*const`

error: references are not allowed
  --> tests/ui/type_id_on_box.rs:39:34
   |
LL |     let any_box: &Box<dyn Any> = &(Box::new(0usize) as Box<dyn Any>);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use a raw borrowing instead: `&raw const`

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:43:9
   |
LL |     let b = existential();
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:46:9
   |
LL |     let b: Box<dyn AnySubTrait> = Box::new(1);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:50:9
   |
LL |     let b: SomeBox = Box::new(0usize);
   |         ^ help: make this variable mutable: `mut`

error: variable must be `mut`
  --> tests/ui/type_id_on_box.rs:54:9
   |
LL |     let b = BadBox(Box::new(0usize));
   |         ^ help: make this variable mutable: `mut`

error: lint `clippy::safe_fn` has been renamed to `clippy::safe_code`
   |
   = help: use the new name `clippy::safe_code`
   = note: requested on the command line with `-D clippy::safe_fn`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: missing `#![no_std]`
   |
   = help: make this crate `#![no_std]`
   = note: requested on the command line with `-D clippy::missing-no-std`

error: aborting due to 30 previous errors

